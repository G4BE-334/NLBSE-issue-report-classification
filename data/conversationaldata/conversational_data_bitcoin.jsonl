{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nf\n"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nf\n"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\na native token protocol\nplease describe the feature youd like to see added a native token protocol can be implemented on btc a utxobased blockchain structure with a native token method which i call dye coins 1 the transaction output class needs to add a new field called color 2 the block header needs to add a new field called color 3 the validation of ordinary transactions needs to add additional validation logic 4 the validation of coinbase transactions needs to add additional validation logic 5 the validation of blocks needs to add new validation logic specific logic is as follows 1 after the transaction output has the color tag field there are only two results 0 all 0 indicates not marked non0 indicates marked 2 to verify that a normal transaction noncoinbase is valid additional validation logic needs to be added specifically it means that the input and output of all transactions must be traversed to ensure that the output values of all colors are less than or equal to the input values of the corresponding colors 3 miners need to verify that all or some of the normal transactions in the transaction pool that need to be packaged meet 2 and calculate the difference between all the corresponding colors in all these transactions as utxo can be single or multiple added to the coinbase output 4 a coinbase transaction is a special transaction that essentially has no input and only output in addition to the utxo generated by the block miner fee the coinbase transaction itself has a certain number of native token rewards 5 the structure of a coinbase transaction that does not participate in color marking is as follows assuming that the current block reward is 50 white coins and the transaction output generated by the miner fee contains 10 red coins 10 green coins and 10 white coins when constructing a coinbase transaction 3 red coin outputs 3 red coin outputs total 10 can be output 2 green coin outputs 2 green coin outputs total 10 and 1 white coin output output quantity is equal to 60 6 the structure of a coinbase transaction that participates in color marking is as follows assuming that the current block reward is 50 white coins and the transaction output generated by the miner fee contains 10 red coins 10 green coins and 10 white coins when constructing a coinbase transaction 3 red coin outputs 3 red coin outputs total 10 can be output 2 green coin outputs 2 green coin outputs total 10 and the remaining 60 white coins will be dyed yellow as a single output or multiple outputs however 60 white coins cannot be dyed yellow 30 blue and white coins can only be dyed the same color and a color that has not appeared before how to determine if the color exists will be mentioned later otherwise the transaction will fail 7 next the miner will pack all the transactions to generate the merkle tree and assign the color value of the dye in the coinbase transaction to the color field in the block header and then start proof of work to generate the block 8 after the miner generates the block it will broadcast the block to the entire network 9 other miners will verify the validity of the block this includes verifying the validity of each transaction especially the coinbase transaction it must be ensured that the only color that can be dyed in the coinbase transaction is one color not that there is only one color of output and that this color has never appeared before it can be obtained by traversing all the block headers or caching all the colors locally otherwise the transaction will fail if there is no dyeing meaning that the output of the coinbase transaction does not produce a new color utxo and the number of utxo tokens of other colors does not increase the traversal process can be skipped 10 verify whether the color value in the block header 0 if no dyeing is equal to the new color value in the coinbase transaction if equal the block is valid the block is added to the blockchain and the next block is mined if not equal the block is invalid and the block is rejected 11 note there is no inflation problem here because inflation can be achieved simply by adding one more color utxo for example green and red are marked as us dollars if interested pls contact me is your feature related to a problem if so please describe it no response describe the solution youd like no response describe any alternatives youve considered no response please leave any additional context no response"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd bech32cpp locateerrors case to check for minimum length\nplease describe the feature youd like to see added add a bech32 string too short case to bech32cpp locateerrors to reduce ambiguity and collisions with invalid separator position case is your feature related to a problem if so please describe it error representation when calling locateerrors within is ambiguous and incorrect in some cases because of a missing bech32 string to short case not having a too short case causes a fall though into the conditions of invalid separator position missing separator describe the solution youd like simply add a check for a minimum bech32 string size after or during the check for the maximum size which is already implemented cascading effects of this would be seen in decodedestination if was patched to not consider bech32 invalid then attempt to base58decode it becuase of the incorrect hrp for the current chain referenced in pr describe any alternatives youve considered you could case this into other logic on a case by case basis in code example make a speical case inside decodedestination to display the correct error message to the user by if locateerrors returns invalid separator position missing separator then you check to see if the string is to short please leave any additional context as an aside there is already a check for string length greater than 90 max len in both 10a06t81qzzfhee produce invalid separator position 0 the former is non conformant to bip173 due not even having enough chars to represent a base32 string and the second genuinely has a wrong separator position"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd maxrelaytxfee\nplease describe the feature youd like to see added just an example this feature request is not related to mutinynet in any way lets suppose the miner wants to recycle coins and shrink the total number of utxos by making an allfee transaction and eventually mining it any other miner would be happy to mine such a transaction if it is relayed to the network is your feature related to a problem if so please describe it no response describe the solution youd like add maxrelaytxfee parameter similar to its min equivalent which is present at least since 9d14e689c8 later it became a configurable the value could be in percentage of the amount sent an absolute number like the other similar configurables use may be less helpful here when tho point is to stop broadcasting mostly allfee transactions describe any alternatives youve considered the usual way how utxos work is that they retain their full history back to the block from whose coinbase they come please leave any additional context in case of largescale recycling maybe the chainstate can get back below 6 gib at the moment it is 63 gib big also the ordinals theory may require some rethinking"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nchange wording\nplease describe the feature youd like to see added if you have chosen to limit block chain storage pruning the historical data must still be downloaded and processed but will be deleted afterward to keep your disk usage low change to if you have chosen to limit block chain storage pruning the historical data will be downloaded processed and deleted to keep your disk usage low is your feature related to a problem if so please describe it no response describe the solution youd like no response describe any alternatives youve considered no response please leave any additional context no response"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nuse semantic analysis in lintlogspy\nplease describe the feature youd like to see added currently testlintlintlogspy tries to parse the c manually which is prone to flaws for example it does not support expressions that span more than one line and would be happy if there is n anywhere on the single line it checks for example cpp bclogleveldebug this is fine but lintlogspy will report errorn cpp bclogleveldebug not okn but will be reported as ok cpp bclogleveldebug even more continued no newline but is ok cpp logprintlevel inside comment causes an error is your feature related to a problem if so please describe it lintlogspy requires to either write everything on line line or add continued comment describe the solution youd like it should be possible to use libclang to properly parse the c code then the check should be something like for each call to logprintlevel get the third argument it should be a string its last two chars should be and n describe any alternatives youve considered no response please leave any additional context no response"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\noption to prevent sleep\nplease describe the feature youd like to see added there should be option to start core which enable system to sleep only when net act is disabled is your feature related to a problem if so please describe it no response describe the solution youd like to notify the system that your application is busy use the describe any alternatives youve considered constant disk activity about 5 mbsec occasionally it may drop to a smaller value but in general this 50 mbsec activity continues for very long periods of time creating a customized power plan is also not option because that would affect system even when core is not running more hours would be better and best of all would be if you can run your node continuously please leave any additional context no response"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc allow importing wallets by data instead of by filename\nplease describe the feature youd like to see added right now we can only import wallets by filename this means you can only execute that rpc if you are executing it from the system where the bitcoin node is running but it could be that you are sending the rpc request from outside the node in that case you dont have access to the file system so it would be handy to allow passing the content of a wallet dump file instead and also allowing dumping the content not in a file but in the rpc result it might be a good idea to check for other cases where the same is being done"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nconsider removing message signing\nsigning arbitrary messages with bitcoin private keys was always a bit strange it was designed to handle only the narrow case of singlesig keys and isnt welldefined for new address types worse it doesnt allow for signing messages with more arbitrary scripts and its not clear what the semantics for such things would be sadly the message signing feature is now being abused to verify wallets as a part of withdraw flows this prevents bitcoin users from using anything but an incredibly narrow set of scripts in many cases only p2pkh not even modern script formats and definitely not multisig rather than trying to rework it to avoid these things breaking bitcoin it seems like itd be much better to simply remove the message signing logic entirely if someone comes along with a proposal that considers a broader set of scripts and a more sensible design that could be considered"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmillisecond log timestamp option\nplease describe the feature youd like to see added for some events like two blocks at the same height being announced by multiple peers at the same time its nice to have millisecond precision on the log entries is your feature related to a problem if so please describe it eg one of the forkmonitor nodes saw two blocks at height 782129 within the same second other nodes saw those blocks in the opposite order describe the solution youd like something like which would second by default with millisecond as an option log entries would look like 20230322t155329z describe any alternatives youve considered a more fancy solution would allow a custom date formatter please leave any additional context no response"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeature request alert pr author in case of ci failure\nwould be nice to have a means of quickly getting alerted about the ci failing on a pr you authored its a bit cumbersome to keep an eye out on it manually and a freshly created pr typically gets more eyes on it so having it in failing state is a bit of a waste of everyones time creating this issue after brief irc discussion i think the main requirements are be able to opt out or easily ignorehide only get a single notification per run not for every single job failing lowtouch easy to maintain some potential approaches i see 1 use github actions as recommended by cirrus ci documention eg heres a sample email workflow can we get this to work so the pr author is notified 2 use bitcoingit irc bot to dm the nickname that corresponds to the pr authors github nickname people with a different username on irc and github would not get notifications to optout i think users could simply use ignore bitcoingit 3 use drahtbot to tag the author as assignee when ci fails and remove them as assignee upon force push havent come up with an elegant way for people to optout of this but arguably its also the least intrusive option and eg could be filtered on the mailbox level"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd support for sighash flags in psbt like singleanyonecanpay\nis your feature request related to a problem please describe when using bitcoin cores gui to sign a psbt that has a utxo with it throws following error specified sighash value does not match value stored in psbt describe the solution youd like id like it to successfully sign psbts containing describe alternatives youve considered the current nonidea workaround is to use the console window as described here additional context example psbt taken from"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeature lock inscriptions automatically\nbitcoin core is used a lot for inscriptions but they could be spent accidentally so lets freeze it we could not do it in past but meshcollider helped fix it in lets lock inscriptions with by default it to help users"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndecodescript could infer miniscript from given script in segwit context\ni was playing around with a probablytoocute script for ln channel smart contract and was looking for something to decide for me if miniscript can infer the structure of the script fe decodescript asm opsize 32 opequalverify ophash160 opequalverify opchecksigverify 1 desc type nonstandard p2sh segwit asm 0 desc hex address type witnessv0scripthash p2shsegwit since its evaluated at top level for desc it cannot get any meaningful structure from it perhaps in segwit it could try infering the miniscript in the segwit context"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nexpose addrman size info via rpc\nif 26847 gets merged addrman will maintain counts of addresses stored on the new tried tables broken down by network this is useful information for monitoring the state of our addrman when we run it with different network configs on mainnet currently when running a node we can get a rough estimate into this information using the cli argument addrinfo however this is just an estimate because it uses the rpc endpoint getnodeaddresses which calls through to addrmangetaddr although this logic path skips the addr caching logic we apply for results propagated to the p2p network it still applies some logic to filter results for example it removes addresses that meet the isterrible attributes it also doesn’t distinguish between the new and tried tables so i recommend we expose the raw counts to provide a better picture of addrman’s workings especially since addrman network integrations are particularly hard to test via our automated tooling we can breakdown the counts by network new vs tried there are a few different options for how we can expose this information i expect this feature to primarily be used by bitcoin core contributors or superusers that understand bitcoind’s inner workings thus i suggest we expose it as a new hidden rpc that enables exposing the information to devs without having to guarantee a stable rpc interface over future versions the name of the rpc can be something generic like addrmaninfo to allow for future extensions for other debugging information for more historic context around bitcoin cli’s addrinfo and conversation about cli vs rpc see 21595 if we do end up implementing a new rpc endpoint we could consider reworking the cli to use these values directly rather than trying to compute them with partial information"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\npathing guide for installation using macos\nis your feature request related to a problem please describe yes one common problem with software setups is the pathing is corrupted proper pathing is one of the most important parts of getting started with any new software because if the path is depreciated the software will not properly run this is the problem i am currently working on with bitcoin i downloaded the software but am unable to interact with the network in bitcoincli getblocktemplate rules segwit out zsh command not found bitcoincli describe the solution youd like ideally there would be clear instructions on how to install and get started using bitcoin software that did not require extensive knowledge of software systems architecture and pathing a great installation method would automatically install the software along the right path to prevent the pathing problem a generalized solution would be really good providing a clear guide to solving the pathing problem on any machine describe alternatives youve considered ive researched solving the problem in the bitcoin forum and on stackoverflow however because this common problem is so unique to each local machine a clear or generalized solution is hard to develop one specific solution i tried from my research was to add additional context to the command in curl user username databinary jsonrpc 10 id curltest method getblocktemplate params rules segwit h contenttype textplain out curl 7 failed to connect to 127001 port 8332 connection refused however the command resulted in a connection refusal i found a possible solution in the bitcoin forum but the problem with the proposed solution is that there is no bitcoinconf file in the main bitcoin repository i found a config folder in the src directory but there is no bitcoinconf file additional context i am running on macos thank you in advance for your attention and advice"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nerlay status in getpeerinfo\nwhen running with txreconciliation added in 23443 but off by default and hidden under helpdebug its currently rather tedious to see which of your peers have this enabled it basically involves loooking at the p2p log it would be nice to have erlay status under getpeerinfo"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ninclude estimated time to synchronize blockchain in bitcoind\nis your feature request related to a problem please describe no describe the solution youd like currently the estimated time to synchronize to the bitcoin blockchain is only shown in the qt gui it would be useful to display the estimated remaining time to synchronize to the blockchain via the bitcoin daemons logs as well describe alternatives youve considered display estimated time in the bitcoin daemon synchronizing logs"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsetminrelayfee\ni think this is something within my ability to add is your feature request related to a problem please describe the ability to change minrelaytxfee without restarting describe the solution youd like i would like the ability to set the relayfee by a bitcoincli rpc call setminrelayfee amount set the transaction fee rate in btckvb for this wallet overrides the global setminrelayfee config parameter can be deactivated by passing 0 as the fee in that case automatic default min fee will be used arguments 1 amount numeric or string required the transaction fee rate in btckvb result truefalse boolean returns true if successful examples bitcoincli setminrelayfee 000001 curl user myusername databinary jsonrpc 10 id curltest method setminrelayfee params 000001 h contenttype textplain describe alternatives youve considered additional context i encountered this while hooking up a lightning network node my relay fee was too high from bad conf settings and was blocking funding transactions i wasnt able to change this value and had to restart bitcoind instead of just making an rpc call"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndumpprivkey doesnt work in descriptor wallet\nin a descriptor wallet it returns this type of wallet does not support this command instead of the private key even though the wallet doesnt store the key directly it obviously knows how to build it since it can spend the funds so it should do that and return it there are just too many cases where a private key needs to be dumped and it shouldnt be a nightmare of rpc calls and 3rd party scripts to try to get it that just doesnt make sense usabilitywise just a common case point for us for example we still use p2shsegwit for our users since too many places still dont support bech32 and pretty regularly people still send ltc to our btc addresses smh i know and we need to easily be able to dump the key to recover it for them"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc listunspent doesnt return immature coinbase outputs\nis your feature request related to a problem please describe i need to know all the utxos i have in my wallet including the immature ones when using listunspent the immature coinbases are not returned ❯ bitcoincli listtransactions address category immature amount 5000000000 label vout 0 confirmations 1 generated true blockhash blockheight 102 blockindex 0 blocktime 1658995253 txid walletconflicts time 1658995253 timereceived 1658995253 bip125replaceable no ❯ bitcoincli listunspent describe the solution youd like what do you think of adding a default to false parameter to listunspent if you think itd be useful i can start working on this myself describe alternatives youve considered at the moment im calling listtransaction and adding to the utxo list every immature output i see this works just fine but having the includeimmature parameter would make the code a bit cleaner and it would save one rpc call"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd to rescanblockchain rpc\nit seems that it would otherwise silently skip the rescan for prebackup used keys that are still waiting to be generated into the keypool see also 11249"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nprogress for opening wallet\nwhile there is progress for importing private keys and rescanning there is good reason to also add progress for wallet opening now you need to look into debuglog and trace it for progress so adding a progress bar for opening wallet it is rescan in the end would be a very nice feature"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nallow groups of accounts to access the rpc cookie file\ncontext i have multiple accounts on the same box that need to run clients of bitcoind in particular its lnd and electrs bitcoind itself runs in a separate account i have other accounts that i dont want to have access to bitcoin eg grafana graphscharts web ui so the cookie file can be shared amount the relevant accounts via a group on the file system a group read permissions can be set on each file i call the group bitcoinclients i setup a directory where new files will inherit the bitcoinclients group and will be created with the urwgro permission this means bticoin account can write the file bitcoinclinets group can read it and no one else has access is your feature request related to a problem please describe the problem is that when bitcoind is restarted it drops the group read permission on the cookie file so clients in other unix accounts cant read the file describe the solution youd like there should be a config that allows controlling permissions of the cookie file just a boolean that sets the read permissions on the group would be sufficient describe alternatives youve considered i setup a chronos workaround but i bet more people will have to reinvent this wheel as the cookie file gets wider adoption additional context cookie file has more security over userpassword auth userpassword auth is being deprecated in favor of the cookie file"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngettransaction does not contain the field abandoned for abandoned receiving tx\nin specter a user can abandon an receiving tx that was evicted from the mempool for example because it was double spent the tx is marked via abandontransaction as abandoned in bitcoin core however gettransaction and listtransactions do not return the field abandoned even though this is visible in the gui image consequence specter cannot get the abandoned information from bitcoin rpc and will fetch the abandoned tx back again via listtransactions after it was deleted in specter describe the solution youd like always return the abandoned field in and not only in this special case that should then automatically solve gettransaction via describe alternatives youve considered if specter cant get the information about abandoned tx from bitcoin it would have to keep an internal list that is possible but redundant and can lead to many edge cases steps to reproduce wallet a send 1 btc to wallet b rbf wallet a replace tx with rbf to send all funds to wallet a wallet b abandon tx because no longer in mempool wallet b gettransaction will not show the abandoned field"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nexport a watch wallet only with descriptors and without private keys for an air gap setup\nis your feature request related to a problem please describe for long time ive seen users looking for a way to do an air gap setup with bitcoin core since there were no easy way people tend to go with other solutions such as armory electrum which offers an easy and friendly way to do it since bitcoin core v 220 and with the command listdescriptors it can be done easily offline pc create a wallet with descriptorstrue export descriptors with listdescriptors online pc create a wallet without privatekeys descriptorstrue and importdescriptors to have a functional watch only wallet for receiving funds and create unsigned transactions describe the solution youd like instead of creating two wallets one offline and a watch only and manually have to exportimport descriptors the wallet containing the private keys could offer an option like exportwatchonly that would generate a watchwalletdat without private keys and all descriptors already imported making very easy and user friendly the process to create an air gap setup"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nci tracing run tracepoint interface tests in the ci\nthe first tracepoint tests were merged in 24358 however they are skipped in the ci ive already done some experiments running them in the ci in however i havent been successful with it yet the main issue was the limited capabilities inside the cirrusci docker container an option would be to ask cirrusci for help another would be to run this part in a vm if its not to much overhead"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nenable consistency checks by default with enabledebug\nnow that most consistency checks have been made a runtime option instead of configure option see commit it could make sense to enable them on enabledebug otherwise they are only run when explicitly passed the runtime setting"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nisstandard should check the witnessprogram is a valid point on the field\nis your feature request related to a problem please describe a v1 taproot witness program must be a valid point on secp256k1 otherwise it is essentially a black hole describe the solution youd like add a check in isstandard that will check the witnessprogram in the case where witnessv1 is returned if the witness program is not the x value of a valid point return false"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nedit srcindexbasecpp\nis your feature request related to a problem please describe txindex sync message will print more than exactly twice a minute because currenttime and lastlogtime are in seconds it jitters by one second describe the solution youd like change with makes the message appear twice exactly a minute0 in for consistency probably as well in among others but im not interested in analyzing implications of changing that line 174 describe alternatives youve considered i suppose theres a way to change this by using millisec resolution in these time variables additional context thanks 0"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nci testing with minimum supported versions\nit would be nice if we could get a ci that always tests our minimum supported versions maybe we can use guix for it"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeature request automatically upgrade legacy to hd wallet\nsince bitcoin core 017 the startup option upgradewallet has been available allowing users to upgrade old legacy wallets to hd wallets however many users with nonhd wallets are yet to upgrade their wallet to reduce complexity and or various issues related to nonhd wallets i am wondering if it may be a good idea to require users to upgrade two different ways of implementing this off the top of my head when all addresses in a keypool are marked used automatically upgrade wallet and notify user to make a backup on startup upgrade wallet and notify user to make a backup are there any reasons for why bitcoin core doesnt already do this"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc removal of signmessage and verifymessage\nthose two features are present for a long in bitcoin core but has been scarcely used over the years however this is going to change with aopp who directly link at this code in the protocols implementation"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nproof of advanced delegation\nif we remove the consensus protocol blockchain and mining what do we get were left with what satoshi nakamoto had before he added the consensus protocol no blockchain no mining just the transaction history with nothing to protect it from double spend attacks here i present what i call proof of advanced delegation pad pad eliminates double spends by spending them in advance when an output is created the transaction that spends it is created too and its txid is embedded in the output before it gets published the output of the last transaction is not yet spent so it remains unpublished beginning with an arbitrary transaction in the ledger a its output is a1 the unpublished transaction that spends it is b and its output is b1 to make a payment the sender 1 creates a new transaction c that splits b1 between two new outputs c1 payment and c2 change 2 generates the txid of c and embeds it in b1 3 creates another transaction e that spends c2 and embeds its txid in c2 4 publishes transactions b advanced delegation 5 sends transaction c with sigs to the receiver in secret the receiver then 1 sees transaction b on the network which validates and binds it to transaction c 2 creates two new transactions of his own d and f d spends c1 and f spends d1 3 publishes c and d as a pair and saves f until hes ready to spend it since every published output is bound to the txid of the unpublished transaction that spends it there is no opportunity to double spend them therefore no consensus mechanism is required"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfuzz prototype for crosslanguage differential fuzzing\nsince differential fuzzing is strongest when different programming languages are involved i’d like to fuzz cpp code against python code solution use sockets to establish a tcp clientserver connection server a python file which listens and accepts client communications from the fuzz target performs the required operations in python and sends back the computed python output as a response back to the client client a fuzzing harness which can send requests to the python server to perform certain operations receives python output computed in the server file and compares cpp output with the python output to see if they match since this requires a slight architectural change in the fuzzing harness to allow python subprocesses i’d like to know if this solution is acceptable additional context i’ve implemented a prototype which performs crosslanguage differential fuzzing of chacha20 on this branch and would love to hear opinionsfeedback on how to proceed test instructions 1 start server python3 srctestfuzzscriptpy 2 run the fuzz test srctestfuzzfuzz"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd ability to remove dust utxos\nis your feature request related to a problem please describe problem i have a lot of 0 sat utxos after flooding the testnet lol describe the solution youd like an rpc call to remove utxos for example bitcoincli removeutxos with an argument to remove everything with less than the specified amount describe alternatives youve considered making a new wallet sending coins from the old one to the new one remove the old wallet additional context"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nimprove test framework time with run order directive\nif you could leave a directive in one of the commits in your tree eg runpriority featureblahpy and we could use that to instruct the ci to run that test first that would be pretty helpful in speeding up ci if theres a particular eg new or impacted test that should see failures before others it wont help with passing but it could help with fail fast"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nallow positional and named arguments in bitcoincli\nis your feature request related to a problem please describe bitcoincli sendtoaddress 01 true false 0 unset true 1 true or bitcoincli named sendtoaddress amount01 verbosetrue describe the solution youd like bitcoincli sendtoaddress 01 verbosetrue add the ability to use positional and named arguments in one rpc call"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmake rescans faster\nthis issue aggregates ideas for making wallet rescans substantially faster using compact block filters when available could substantially speed up wallet rescans although it is not clear to me how this might work for nondescriptorbased legacy wallets currently 20664 proposes to add an rpc that will use compact block filters to scan for blocks relevant to a given script descriptor this gives a listing of blocks that correspond to the descriptor but the user then has to do something with that list of blocks to find transactions relevant to their wallet it would be nice to integrate scanblocks use of block filters opaquely into rescanblockchain wallet rescanning so that if block filters are available the faster method of consulting them could be used instead of scanning the entire chain or forcing the user to do something more roundabout with the output of scanblocks from sipa regarding faster rescanning i think there is some lowerhanging fruit like a rescanning all wallets at startup in parallel rather than one by one and b building a set of scriptpubkeys to look for and using that for legacy wallet rescanning instead of calling ismine for each especially with achow101s migratetodescriptor code i think there should be a way of computing that set for legacy wallets too possible changes integrate compact block filter usage into rescanblockchain to allow faster rescans when the compact block index is available otherwise falling back to the standard scanning method a first approach could possibly use filters only when dealing with a nonlegacy descriptor wallet currently proposed in allow pruned nodes with the block filter index to rescan quickly by getting a list of relevant blocks to the wallet requesting the download of blocks and then parsing the blocks for relevant transactions rescanning all wallets at startup in parallel instead of onebyone building a set of scriptpubkeys to look for when using a legacy wallet based on achow101s migratetodescriptor code"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd benchmark to test large scale of hardware\nim not sure if there are any benchmarks that could be easily used to test large scale of hardware wrt type of bottleneck cpussd bound i recall i saw something on twitter mentioned by sipa but not sure now what it was about benching cpus rams and ssds is my daily job and ive been wanting to have some bitcoin related benchmarks in my suite last month i was rebenching 14 cpus and i wish i had relevant data on their performance in bitcoin software it would be best if we could have such benchmarks as part of and so we could bench all kind of hardware and different versions of bitcoin core with single command that way we could have a lot of open data which im sure could be useful to development"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntracing include tracepoints in guix builds\nthere has been light conceptual agreement on including the usdt based tracepoints in bitcoin core release builds this for example enables user to hook into production deployments if they need to binaries dont have to be switched out this is possible because we dont do expensive computations only for the tracepoints and the tracepoints are nops when not used there is a slight chance that the guix build on the current master already includes the tracepoints i have not done an guix build on a branch with the tracepoints merged yet this can be tested on a bitcoind binary using one of the methods mentioned in the tracing documentation section listing avaliable tracepoints if not present making the systemtap headers syssdth available during the guix build should build bitcoind with the tracepoints"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nreturn fee in getrawtransaction\nsimilar to how the fee is returned in getblock 18771 it should be returned in getrawtransaction useful skills understanding of undo data the rpc interface and the functional tests want to work on this issue for guidance on contributing please read contributingmd before opening your pull request"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc support fee bumping with external inputs\nexternal inputs are currently only supported for initial transaction creation functions extend solvingdata arguments as necessary to support fee bumping wallet transactions with nonwallet inputs"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nother platform support for linux syscall sandboxing\nnow that 20487 is merged it would be nice if syscall sandboxing was extended to the other linux platforms that have release binaries as well x x8664linuxgnu armlinuxgnueabihf aarch64linuxgnu riscv64linuxgnu powerpc64linuxgnu powerpc64lelinuxgnu"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nplumb toolongmempoolchain to rpc error for sendsendtoaddress\nis your feature request related to a problem please describe if coin selection fails as part of send or sendtoaddress the error message returned to the rpc client is insufficient funds even if the actual cause is due to toolongmempoolchain this is likely to alarm users unnecessarily as they will believe this means their funds have permanently vanished rather than being temporarily inaccessible describe the solution youd like if coin selection fails due to toolongmempoolchain the send and sendtoaddress methods should pass that error back to the rpc client instead of insufficient funds describe alternatives youve considered it would be even nicer from a ux standpoint if the limit on mempool chain length were removed but aiui thats a dos vector so is not going to happen additional context apparently this is already done for sendrawtransaction the discussion in is relevant it appears that the pr was withdrawn for reasons unrelated to my request"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nautogenerate msvc version information\nright now bumping the version involves updating the version in two places configureac in multiple places—see for example commit i think it should be doable to parse the information from configureac in msvcautogenpy so that this is no longer something errorprone that has to be done manually if you do this also update the release process useful skills python msvc want to work on this issue for guidance on contributing please read contributingmd before opening your pull request"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfuzz invoking python interpreter from a c file\nim interested in reimplementing a python version of the new aead and fuzzing it against the c implementation however since it involves invoking a python interpreter from inside a c file im confused on how to proceed possible approaches 1 using pipes to call the python script from the c file 2 using pybind11 to create the python c interface idea from this pr however the python to c code for the aead wouldnt be very readable here would method 1 be ok id love to hear your thoughts on how to proceed"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc add level 3 verbosity to getblock rpc call 21245 modified\nauthor of 21245 expressed time issues in the original pr given that 21245 has received a lot of review i have decided to open this new pull request with modifications required to get ack from lukejr and a few nits of mine original pr description display the prevout in transaction inputs when calling getblock level 3 verbosity this pr affects the existing restblock api by adding a prevout fields to tx inputs this is mentioned in the change to the release notes i added some functional tests that checks that the rpc call still works when txundo cant be found doesnt display the value or scriptpubkey of the previous output when at a lower verbosity level this completes the issue 18771 possible improvements i can include even this commit to this pr if deemed useful or i can leave it for a followup pr see for more context examples examples of the getblock output with various verbose levels note that contains only 2 transactions see verbose level 0 bash bitcoincli testnet getblock 0 verbose level 1 bash bitcoincli testnet getblock 1 verbose level 2 bash bitcoincli testnet getblock 2 verbose level 3 bash bitcoincli testnet getblock 3 rest bash curl h contenttypetextplain and my everyday obsessive checking of my email inbox whether the pr moves forward edit laanwj removed at symbol from message and large example output to prevent it from all ending up in the commit message"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpcwallet add rpc\nnote this was originally titled add rpc this command iterates over the inputs and outputs of the given transactions and tallies up the balance change for the given wallet this can be useful eg when verifying that a coin join like transaction doesnt contain unexpected inputs that the wallet will then sign for unintentionally i originally proposed this to elements and it was suggested that i propose this upstream there is an alternative 22776 to instead add this info to getbalances when providing an optional transaction as argument"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfuzz investigate test adequacy unit and fuzz via mutation testing\nmarcofalke practicalswift im starting some mutation analysis using a couple of questions at random i picked txverifycpp as a file with high coverage that is likely critical where any missed nonequivalent mutants should be carefully investigated is this a good choice to get the workflow going on is there any mapping from fuzz targets to code expected to be covered i can run all targets of course but knowing which ones might possibly detect txverifycppmutants would be helpful"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncreatewallet with external signer always picks the first external signer regardless of how many are connected\nis your feature request related to a problem please describe while testing 220rc2 external signer feature i noticed that if multiple hw wallets are connected to the computer createwallet will always pick the first one without alerting the user in any way this led to the following unexpected behavior 1 attach a trezor and create a wallet using bitcoincli createwallet 2 attach a coldcard while the trezor is still connected and create a second wallet with bitcoincli createwallet both wallets were created fine with no errors but on further inspection i realized both wallets were connected to the trezor despite having different names this is related to 22635 describe the solution youd like ideally if multiple external signers are returned from enumeratesigners and i then try to create a wallet i would want createwallet to fail and warn me there are multiple external signers additionally an option to specify the fingerprint of the device would be useful but i think simply failing would be sufficient for now describe alternatives youve considered granted this is a rare case where a user would have multiple hws connected while creating a single sig wallet so perhaps just documenting that you should only have one connected at a time is a viable solution"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nnetinfo display addrprocessed ratelimited relayenabled and relaytxes data\nupdate cli netinfo to display the getpeerinfo addrprocessed addrratelimited addrrelayenabled and relaytxes data with autoadjusting column widths srcbitcoincli netinfo help txn time since last novel transaction received from the peer and accepted into our mempool in minutes the peer requested we not relay transactions to it relaytxes is false addrp total number of addresses processed excluding those dropped due to rate limiting we do not relay addresses to this peer addrrelayenabled is false addrl total number of addresses dropped due to rate limiting screenshot from 20210822 143140"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsub wallet for dirty coins\nis your feature request related to a problem please describe unable to spend unconfirmed utxo 100 the combination of these two things affects privacy which is discussed in detail here describe the solution youd like image we are already marking used addresses as grey in can improve this by marking red for addresses used twice or more for receiving bitcoin grey color for addresses used once once we have dirty coins received bitcoin twice or more they should be locked automatically dump private keys associated with the addresses and import them in a new wallet subwallet for dirty coins not sure if there should be a sub wallet for each address or all dirty coins go in one sub wallet describe alternatives youve considered use other wallets additional context this will improve following things 1 no wallet fingerprinting 2 keep things separate 3 manage forced address reuse in a better way 4 neither utxos being confirmed nor value for will matter anymore the user can decide how to spend dirty coins in future either use all in one transaction or do coinjoin or something else looking for concept acks and discussion about this solution so that implementation can be planned if enough people agree to add this feature thanks harding for suggesting idea about subwallets in"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nnulldata treated as nonstandard\nbitcoind returns nonstandard addresses from scripts started from opreturn eg in first 300 kiloblocks bktxvout 2297121291 257727911 257727931 2833965961 296195120 299571102 as an example vout 2297121291 block height 229712 tx 129 vout 1 json value 000000000 n 1 scriptpubkey asm opreturn opdup ophash160 opequalverify opchecksig hex type nonstandard"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet add destination output and bump fee\nthis would allow ad hoc transaction batching when a wallet transaction is unconfirmed id like to be able to add an additional destination output bip 125 requires that such a transaction also increases the fee rate one approach would be to create a new wallet rpc addoutput which takes a transaction hash address amount and fee rate difference a better approach imo would be to add a new argument extraoutputs to bumpfee and psbtbumpfee this would have the same format as outputs in send two complications come to mind 1 if the original transaction used we dont store that information see also 11122 so either a the user has to provide that array again for us to subtract the additional fee correctly or b the extra fee is paid entirely from change 2 if the previous transaction confirms rather than the new one the user has to figure this out and manually craft a new transaction"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nenable reading of pchcommand before complete\ni always found it useful to be able to see what message was incoming from another node as soon as the header had been received but since 16202 it no longer appears to be possible to discern the pchcommand until the complete message has been received is there a way to determine the message as soon as the header has been received this could be useful functionality in order to be able to reduce bandwidth and for logging and debugging"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbroadcast a transaction to specific nodes\nis your feature request related to a problem please describe there is no argument in sendrawtransaction to mention the peers describe the solution youd like add an argument in sendrawtransaction that accepts one or more addresses for nodes describe alternatives youve considered additional context note that the transaction will be sent unconditionally to all peers so using this for manual rebroadcast may degrade privacy by leaking the transactions origin as nodes will normally not rebroadcast nonwallet transactions already in their mempool rebroadcast thing mentioned above will be fixed in however this option will still be useful"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndevelop watchonly wallet\nis your feature request related to a problem please describe im trying to create a watch only wallet on bitcoinqt with bitcoin core describe the solution youd like passwordpin protected qrcode capability"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nstyle guide enum bool thoughts\nin many places we use bool parameters to denote some effect i suggest that throughout the codebase we make an effort to where feasibletouched replace these with enum class its a bit more verbose but its already a norm to do f confusing bool true and it would be nice if our compiler helped us out further it makes it easier should later code extend the functionality to add moredifferent options in order to reduce clutter we could make a macro boolenumargument enabledname disabledname not high importance so i dont think we should make a project out of it but i was looking at some code recently where it would have been nice con we dont need more structs"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhow to tell compilers to not drop the lock stack when using assumeassert\nit would be nice if there was a way to tell compilers not to drop the lock stack and thus issue warnings when accessing a symbol that needs a lock inside assumeassert hit by at least ajtowns jnewbery me"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd mitigation for disk fill via logging attacks\nshort version it would be nice if we could render disk fill via logging vulnerabilities unexploitable by introducing a mitigation like the one suggested in the up for grabs pr 19995 that pr was concept acked by naumenkogs laanwj and jnewbery but unfortunately closed due to lack of time volunteers welcome long version a disk fill attack is an attack where an untrusted party such as a peer is able to cheaply make your node log to disk excessively the excessive logging may fill your disk and thus make your node crash either cleanly best case if disk fill rate is relatively slow or uncleanly worst case if disk fill rate is relatively fast it is easy to accidentally introduce a disk fill vulnerability all it takes is a logprintf in a code path which is easily and cheaply triggered by a remote attacker it would be nice if we could kill this vulnerability bug class by introducing a general mitigation mechanism which would remove the ability exploit such such a misplaced logprintf our first line of defence would obviously be to never misplace a logprintf but realistically logging mistakes happen and thats where mitigations kick in as a second line of defence one possible mitigation was suggested in pr 19995 which received concept acks from naumenkogs laanwj and jnewbery the reviewers came up with some good ideas for improvements which need to be implemented unfortunately i dont have time to implement those changes myself but if someone is looking for up for grabs prs then 19995 would be a very good choice it is seldom one gets the chance to kill an entire vulnerability bug class id be glad to review and help out the solution suggested in the referenced pr is one of many possible solutions but regardless of which solution we choose i think we need some disk fill attack mitigation to kill this bug class once and for all"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncontrib current systemd usage doesnt allow for dependencies\nthe current systemd service does not allow gracefully for services to depend on bitcoind all dependent units will be launched immediately regardless of current status so if it is to work at all they need an inefficient polling loop in the service file the service type is specified as typeforking but we dont heed the behavior specified from the systemdservice5 man page if set to forking it is expected that the process configured with execstart will call fork as part of its startup the parent process is expected to exit when startup is complete and all communication channels are set up a possible solution is 21007 which adds daemonwait so that the control is only returned to the parent process when startup is complete in combination with typeforking i think this achieves the proper functionality to start dependent units only when rpc functionality is working with that the only change to the service file needed would be to use daemonwait instead of daemon an alternative would be to implement support for typenotify and do readyness notification through sdnotify but i opted for daemonwait because it seems more generally useful the advantage of using a native notification mechanism however would be that it is still possible to have logging through stdout to the journal the drawback that it introduces an optional dependency on libsystemd"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsolve for 51 attact\nis your feature request related to a problem please describe yes this problem is security problem for pow consensus protocol describe the solution youd like solution is basic the new consensus algorithm safe proof of work blocks will have a two hash block and miner select from random first hash mining or second hash mining this is changed all mining proccess and add into the hash the merkle root of the blocks of the blockchain the miners wants to add if first hash blocks merkler root not equal second hash blocks merkle root all nodes and miners restart process describe alternatives youve considered if you want to know more you can check the my github repository onuratakanspow i published with mozilla public license"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nguix prints g not found when building depends\nsteps to reproduce start a guix build on a system without gcc binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found env no such file or directory env no such file or directory env no such file or directory env no such file or directory found macos sdk at using make entering directory binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found make1 entering directory binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found env no such file or directory env no such file or directory env no such file or directory env no such file or directory make1 leaving directory make1 entering directory binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found make1 leaving directory make1 entering directory binsh 1 gcc not found binsh 1 gcc not found binsh 1 g not found binsh 1 g not found binsh 1 x8664w64mingw32gcc not found binsh 1 x8664w64mingw32gcc not found binsh 1 x8664w64mingw32g not found binsh 1 x8664w64mingw32g not found make1 leaving directory make leaving directory info building commit a4903f747ccd for platform triple x8664linuxgnu"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrefactor moveonly into a block storage module\nsee"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd ranges to to output descriptors\noutput descriptors do not contain support for ranges bip444984 account uses two chains for receiving addresses and for change addresses having possibility to express ranges would allow us to capture the essence of bip444984 accounts in one output descriptor eg note the 01 at the end"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngithub slack integration\nis your feature request related to a problem please describe no describe the solution youd like can you add the slack github integration to this repo so that changes can be easily tracked in slack describe alternatives youve considered i understand that email notifications can be used but in my opinion slack notifications provides easier team organisation additional context none"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeature add editorconfig\nmotivation developers are supposed to follow coding style however from time to time a pr is created and then its author is asked to change tabs to spaces for example introducing an editorconfig file can mitigate these formatting issues user story a contributor wants to create a new pr she clones bitcoin core repo opens her editor the editor loads editorconfig rules and writes her patch with correct formatting rules less coding style issues is then discovered in the pr review process and thus less ci runs are needed what is editorconfig file provides very well and concise explanation what is editorconfig editorconfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and ides the editorconfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles editorconfig files are easily readable and they work nicely with version control systems support editorconfig is supported in many ides and text editors sometimes the support is outofbox and sometimes a plugin is needed however for example vs code detects editorconfig presence and automatically offers you to install the missing plugin see for details on support visual studio is supported vs code and intellij idea are supported and many others my editor does not support editorconfig then nothing really changes for you editorconfig vs clangformat as explained here note that visual studio also supports editorconfig which works in a similar way clangformat however has a much larger variety of style options than editorconfig including some very c specific rules that can be set and it is already used by c developers today having both editorconfig and clangformat in a project may not always work correctly though i think as some editors may have a plugin for editorconfig and a plugin for clangformatter which may not work correctly in unison proposed editorconfig this proposal is based on developer notes yaml this is the topmost editorconfig file root true for all files charset utf8 endofline lf insertfinalnewline false shell scripts sh indentsize 4 indentstyle space true c files hcpp indentsize 4 indentstyle space true python files py indentsize 4 indentstyle space true makefiles makefileam indentstyle tab true markdown files md true cirrusyml appveyoryml fuzzbuzzyml etc yml indentstyle space indentsize 2 true note that the syntax can be much shorter but it is not my goal here i prefer clarity at this point so what is this specifying charset use utf8 in all files endofline line endings should be lf by default in all files insertfinalnewline do not add a blank line at the end of a file by default and then there are rules for various types of files the rules does not cover everything one can see that there actually many different file types meaning unique file extensions using this simple powershell script powershell getchilditem recurse extensiontolower sort unique with the following output 1 ac adoc am bashcompletion bat bmp c cc cert cfg clangcomplete clangformat cmake cmd cnf com conf cpp css csv doxyfile dtd empty exe exp gci gitattributes github gitignore gitmodules guess h hex hpp html icns ico idb ilk in include ini init ipp jam js json lastbuildstate lib list log m m4 md mk mm moc obj openrc openrcconf patch pc pdb pl plist png po pro py pythonversion qbk qm qml qrc raw rb rc recipe res s sage sass scm scss service sgml sh sln spec sub supp svg targets td tlog ts tx txt ui user v2 vcxproj verbatim vscode xml xpm xsl y yapf yml yy what do you think"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmodify testmempoolaccept to handle clients maxrawtxfee check failure\nsee"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nlog add debug log category prefix\ni wanted to log especially incoming onion connections was unsure if category net or tor would do that in the debug log you do not see which debug message is of what category or if it is of no debug category at all standard log i would like if debug log categories are logged eg with a prefix eg for net debug category log line the line is currently logged like this i hope i am right that this belongs to netcategory so this is an example of the uncertainty that results in the current absence of the category logging 20210201t193308z socks5 connected my wish would be that it would be logged like this 20210201t193308z net socks5 connected if that would have any drawback like log gets bloated an option to toggle debug log category prefix logging could be introduced eg debugcategorylogging"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc field to indicate which of the conflicted wallet transactions is in the mempool\ndont currently indicate which of the conflicted unconfirmed wallet transactions are considered active in the nodes mempool and which arent to determine this one currently has to issue an additional getmempoolentry rpc call and check if that fails or not it would be useful if this information was more readily available without requiring additional calls additionally it appears that theres an inconsistency between gettransaction and listtransactions normally listtransactions returns a flattened concatenated list of the details for all the wallet transactions with one entry per detail entry but in this case gettransaction returns an empty details array for non active transactions which should to my understanding translate to the transaction not showing up in listtransactions at all yet it does this is wrong it was a pebmac my preference would be for non active unconfirmed transactions to show up in both but with a flag that indicates their status similarly to confirmations 0 for transactions that conflict with confirmed transactions"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nthreshold signing for releases\nfor signing the sha256sumsasc in the distribution i would like to move away from using a signing key that i solely personally possess im not entirely sure how threshold signing is only a possibility there might be others i think it would be ideal if we could distribute the process over multiple people like a m out of n scheme for example a few relatively trusted gitian builders the resulting signature should ideally be verifiable in the same way as it is now with gnupg getting people to adapt a custom tool for validation is going to be difficult"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbetter errors for address use from wrong network\ni spent too long to figure out i was putting mainnet addresses to regtest node errors werent helpful at getaddressinfo and validateaddress seems like a good first issue to augment the error messages when prefixhrp dont match current network"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndecodescript returns wrong reqsigs for complex scripts\nthis issue may be related to but i dont think it is because i get the expected reqsigs for other p2sh p2wsh scripts create a redeem script that includes both opcheckmultisig and some other condition such as feed the redeem script into the decodescript rpc expected behavior i expect reqsigs to match the number corresponding to the opcheckmultisig portion of the redeem script actual behavior the output has reqsigs set to 1 to reproduce example script bitcoincli testnet named decodescript asm 1896380 opdrop 3 5 opcheckmultisig type nonstandard p2sh segwit asm 0 hex reqsigs 1 type witnessv0scripthash addresses p2shsegwit system information bitcoin core 0201 ubuntu 2004 using bitcoincli against local node"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncan we create a non proofofchilds documentation to install and run properly this repo\ni have tried several times to install and run this repo in a fresh ubuntu 2004 operative system all the documentation i have found is outdated and there is not an evident clear path to successfully install this repo in at least an os i would like to suggest if possible an exhaustive doc that explains how to install this repo in any linux distribution"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nplease split the msghand thread into multiple threads\nit seems when using good storage that this thread act as bottleneck in a way that other threads are waiting completion from it a the cpu level when performing initial full node synchronisation as a result bitcoin is mostly single threaded in that case the msghand thread take 100 of a single core leaving other cores idle even on a core duo cpu this what currently prevents syncing a full node with txindex in less than 1 hour"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\npartially signed bitcoin transaction psbt gui for bitcoin core request\ndear developers do you fine people plan on adding a gui to bitcoin core so that users can create a psbt and also sign a psbt for cold storage users i would love this feature i think you can do this with command line but its risky and not simple i ask because i only use bitcoin core as my wallet and dont have easy cold storage spending method without bringing all online thank you and i love you all is your feature request related to a problem please describe no describe the solution youd like an easy to use gui to create a psbt and to sign a psbt for cold storage describe alternatives youve considered additional context"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd command in bitcoinwalletexe\nthis is an underrated useful tool dear devs please add this feature thanks"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd macos arm build universal or additional binaries\nfirst arm based macs are available now see the porting guide and the architectural differences things to do x fix depends build on arm with macos 1016 done in merged 20482 x fix crc32 build issue fix in 20603 x update macos build readme if required x allow cross compiling arm64 mac on linuxgitian x fix make deploy on arm64"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nguifeedback on calculating transaction fees\ni stumbled across fee calculation messing up units please take a look at this discussion which is related to therefore id like to suggest the following use case user selects manually editing fee and user asks for sending next bitcoinqt calculates the fee added to the transaction then gui shows to user the calculated fee and ask for confirmation if ok then send transaction else edit fee calculation and repeat"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhardcoded seeds for torv3 addresses\nfor the 022 release well want to start hardcoding torv3 addresses instead of or in addition to torv2 the biggest challenge here is not how to hardcode them although that will require a few minor script and code changes but how to collect them the release process is to get the addresses from dns seeders however these currently dont support the addrv2 message nor torv3 addresses in the first place nor do they really have a need to"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndandelion\nis your feature request related to a problem please describe bip 156 never got implemented in bitcoin core which could improve privacy reasons tldr denial of service dandelion proposed for bitcoin implemented in monero describe the solution youd like implement dandelion in bitcoin core and if it involves any risks lets test try to find solutions or workarounds describe alternatives youve considered tor additional context not sure how much is this pr and associated project related to this issue also there is no option to specify tor for sendrawtransaction rpc command"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsupport tor v3 seeding\nis your feature request related to a problem please describe dns seeding for tor v3 edwards curve nodes is not possible in the current aaaaa design describe the solution youd like support for tor v3 seeding by creating a bip that outlines how that can be done until we have that add at least some fixed v3 node addresses in the vseeds list dns seeding for tor v3 nodes is not possible in the current aaaaa design when v2 fades out seeders are unable to hand over learned known v3 onions encoded in there dns aaaaa answer records not that enable dns seeding while using tor is a good privacy idea anyway but since some users are behind chains of nats and just like or must bootstrap over tor we should support that with the next release users will be reachable by v3 onions the node created and gossip them but be unable to get also those onion v3 seeds by the build in seeders or there own dns tor v2ipv46 seeders in the usual fashion on a clean bootstrap so to mitigate against fragmentation at least we should add some build in v3 node addresses ie from the known seeder nodes so nodes have a chance to stay solely in tor and v3 and are not forced to leak orand think about building for and using something like the lightning mechanism to support also seeding like we used to now also for tor v3 onions general caveat of long v3 onion names is that we can no longer bootstarp in out of ip4ip6 by use of a and aaaa records that fit the now long onion address but might be forced to support dns srv calls for the long names but srv dns calls are not supported by tor and the socks5 proxy so the task is that we must find a way to bootstrap in a private maner before tor v2 fades out describe alternatives youve considered until we have that add at least some fixed v3 node addresses in the vseeds list additional context"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndocument supported methods for backups and restore\nexisting literature on backing up and restoring are on external sites and forums and may become outdated they may also be recommending methods that could result in wallet file corruption we should document the supported backup and restoration methods in repo or on the website so that people can refer to those as the officially supported methods this also lets us update them as files and folder structures change"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nvalidate user input and keep path in a separate argument for importwallet createwallet and dumpwallet\nis your feature request related to a problem please describe wallets with weird names possible which can be exploited in vulnerable web applications that use bitcoin core and allow the users to create and importexport wallet testwallet for linux testwallet for windows tried on bitcoin core v 0200 describe the solution youd like keep two arguments walletname and walletpath for createwallet filename and filepath for dumpwallet importwallet validate user input name should not contain special characters path should be optional and if not specified use a default value describe alternatives youve considered web developers should create secure web apps that use bitcoin core additional context image i understand its not a vulnerability in bitcoin core and only affects vulnerable web apps that use bitcoin core however we can at least consider it a bug that may affect something in future or other projects that use bitcoin core basic checks for user input can improve the security in 2017 i had a website in which someone had reported a vulnerability that could be used to change price of flight tickets and book with almost zero bitcoin it was an issue with the website and we had to fix it although nobody could exploit it because the third party apis that we were using to book the fight tickets were validating all the things so a ticket couldnt be processed after tampering and changing the price by attacker similarly if any web developer makes a mistake and using bitcoin core for the web app would still be unaffected if bitcoin core itself doesnt allow such things for wallet names there have been lot of directory traversal related vulnerabilities recently one was reported in facebook android app"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nuse orange icon for bitcoin account\ncurrently the account that hosts this repo and several others uses the black bitcoin icon which as far as im concerned is the bitcoin core brand icon would it not be more onbrand to use the orange icon for this account and the black bitcoin core icon for the bitcoincore account a discussions was had several weeks ago around branding here visualized below group 114 here is the orange icon on figma that can be exported as svg png jpg etc and used posted an issue over at regarding changing the orange icon to black for the bitcoincore account"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet reenable fallbackfee by default for regtest and signet and maybe testnet too\nthis pr merged in october 2019 disabled fallbackfee by default across all chains mainnet testnet regtest the only motivation for doing this for regtest and maybe testnet too that i can see is now it is 0 by default for all chains thus theres no need to call params comment however this does mean that if you dont set a fee or enable fallbackfee you get this error error code 4 error message fee estimation failed fallbackfee is disabled wait a few blocks or enable fallbackfee any thoughts on reenabling fallbackfee by default for regtest signet and maybe testnet too i think it makes sense to continue to have it disabled by default for real money on mainnet if im missing context please direct me to it and ill close this bitcoin stackexchange post"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsplit policyerror consensus codes for cleanstack minamalif\ndiscussion here"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngood first review label\ni would like to suggest a small idea that i had to make it easier for beginner to review their first prs analogous to the good first issue label i am suggesting a good first review label as a general guideline labeled pull requests should have some ideally all of the following characteristics complexity level low a tentative small change 100 loc a detailed description of the pr background if needed general instructionshints on how to testreproduce examples of pulls that generally tend to be good first reviews a newly added rpc that can be easily manually tested to verify functionality a pr that only adds new functional test coverage since these tend to be selfdocumenting a documentation change that can be verified to be correct with manual testing similar to other labels the creator of the pull could ask for the label to be applied or contributors with the power to give labels could apply the proactively"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nonion address in bitcoin core wallet\nis your feature request related to a problem please describe i am not sure if there is a rpc method available to directly get the onion address used so i checked it in localaddresses returned by getnetworkinfo it was also mentioned in debuglog file image describe the solution youd like i would love to see an onion address and maybe qr code in the wallet if it is listening on tor similar to abcore image describe alternatives youve considered check the onion address in debuglog or localaddresses returned for getnetworkinfo additional context linked to because if we add such option to check the onion address it will have to be added in the tor documentation"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfatal performance when importing 151m private keys\nearlier i was importing several thousands of private keys to bitcoin core and it took much time especially rescan of the blockchain few hours 3 surely but now when i am importing 151m private keys 10 gb file with keys the import process is now taking 2 days and i have 65 for now how badly bitcoin core is written is unbelivable there is no other way to scan such an amount of keys because other apps are for private limited use and do not offer scanning the blockchain with such a large amount of keys will this be fixed or even rewritten"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrevisit the chain view cache policy\noops wrong repo sorry"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc pipe support for submitblock\nif you use the submitblock rpc with a large enough block youll run into argument list too long using a pipe should fix this at least on linux macos the submitblock rpc can be useful to check validity of a stale block that never made it into the main chain and that your node never fetched call invalidateblock on its sameheightsibling and then feed it the raw block easiest workaround is to use a library that connects directly to bitcoind via rpc be careful to avoid a line break character at the end using the gui console fails with block decode failed for me but havent tested that extensively"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmanualpruning cursor rewind\nis your feature request related to a problem please describe setting a lowerthancurrent prune height via pruneblockchain currently requires a full resync on slower machines this can take a very long time it is also unnecessary describe the solution youd like since all block headers are retained for pow and chain reorg purposes bitcoind could feasibly redownload the raw blocks that are lower than the old cursor and above the new cursor and check their validity against the retained headers"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndecouple build system from source use cmake to help newcomers and ecosystem\nproblem new developers unable to quickly get up and going in their ide the current build system is very brittle and the custom tailored nature of it leaves the development team having to address constant breaking changes and new architectures etc it also leaves new comers to the project in a state of despair when they realize that the current ide cannot pick up the project for example in this issue 13694 the user asked where i could find the guide on how to install an ide and debug the code because his top of the line ide clion works by using cmake the other well known cc ides that are currently used are able to and appear to prefer the cmake build system sadly the sarcastic response i hope from sipa was most developers dont use ides as far as i know for the windows users out there in issue 14118 the issue got alot of support to the idea of adding cmake as one is able to quickly work on cc projects given visual studios and vscode support for cmake projects improve ecosystem by having option to build shared libraries this last point will be a simple theory but if cmake is added one could imagine that the ecosystem to grow and flourish and bring in new support and tooling with it for instance if i wanted to instead wrap around the c code using cffi and call directly from pythonjswhatever i am unable to as where would i even begin to get started on compiling a library as opposed to the executable in a neat manner right now the best way to interact with bitcoin is via the rpc it seems but why not directly the other direct benefits of having a simple cmake build system is we can undo the tight coupling of what should be the build with the source code when developing the sanitizers can be added and help ensure there is strong checks with proper memory usage and addressing etc proper sanitizing and bug catching for instance i found a buffer overflow in the tests within the ctaes library inside crypto which was found trivially after setting up a proper standalone cmake file for it this was found within hours of me poking around and was there for a number of years makes one wonder how many other bugs are simple low hanging fruit just waiting to be picked solution according to the developer ecosystem in 2020 how c is doing the c community is moving with conviction to cmake as their build system of choice over the last couple years its gone from 34 to 53 of developers choosing it over makefiles or visual studio if the trend continues it is imperative the project invests in improving the current status quo begin adding cmake files to cover the major oss windows osx linux on the major processors x8664 then expand out to arm and the smaller targets like raspberry pis and the like eschew the many optimizations and customtailored functionsmodules for specific architectures and just add the generic standard library versions until the entire project builds and tests properly while this is a monumental task as noted by sipa the hardest part will be decoupling of the many build steps with source code but thats more tedious and repetitive than anything i can and already have a couple cmake files for some modules like crypto and ctaes to start off what i am not sure of exactly is the flow of direction between the libraries in the bitcoincore project and this one which one follows which"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntestnet reset\ni was thinking since it looks like the testnet is very hard to mine and has already had many halvings i know they are faster what are your thoughts on a testnet reset for the next release of bitcoin core the testnet i believe should get a refresher as its been many years since the launch of testnet3 and many altcoins are on testnet4 if you all like this ill submit a pr to reset the testnet"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nprovide skeleton bitcoinconf during datadir generation\nis your feature request related to a problem please describe it would be helpful to provide the example bitcoinconf provided in the source code to the users that just download the binaryinstall from their package manager secondly a new bitcoind user may not be aware that bitcoinconf file is an available option while bitcoinconf is mentioned in the man page one would have to know what to look for or read a bit to get to the conf section by providing a skeleton file a new user is more exposed to such an option describe the solution youd like automatically generate a skeleton bitcoinconf with something like the one found at when first starting bitcoind describe alternatives youve considered additional context"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncve20122459 possible code and performance improvement\nok so in my effort to create a fullnode from scratch both for learning purpose and need not a topic for discussion thanks i was looking at the code that check merkle root to not be vulnerable to cve20122459 that vulnerability basically allows you to create a block that has a valid merkle root but contains duplicate transactions causing a node that receive such block before the correct one to be stuck on a fork because that block will be flagged as incorrect and having the same hash of a correct block will prevent the node to ask again for that block causing a node to be stuck anyway this is an old cve that was fixed back in 2012 and code changed during time now in bitcoin core the code is not that pretty and the method to compute merkle root are polluted from a boolean parameter that when read back reflects if the block has been mutated malleated or not the code is this uint256 hashes bool mutated bool mutation false while hashessize 1 if mutated for sizet pos 0 pos 1 hashessize pos 2 if hashespos hashespos 1 mutation true if hashessize 1 hashes0begin hashessize 2 2 if mutated mutated mutation if hashessize 0 return uint256 return hashes0 now thinking about the problem i think i found a better approach that is olog n and allows to have a better code too without having to pass the mutated flag around if it works and the logic isnt flawled so id like to know your thought about this my paint skill can show you some of the logic 123711 a b c etc are transactions the vertical line is what i call safe point basically all transactions before that safe point are guaranteed to be not duplicable this is one of the assumption i do and one thing to check if its correct then based on how merkle root is computed and how the cve uses that to do nasty things you can see some example of malleated blocks i created then a gist containing a linqpad code that can be run as it is and produce outputs to see if the logc is correct and can spot malleated blocks this is an output example of that gist enter image description here22 the core logic relies into checking the last transaction against the previous moving exponentially to the left at each iteration see the picture with the vertical blue arrows showing which element it checks or see the linqpad result where its explicitly detailed i handle both the cases where the tx count is even or odd to me it seems to work but would like to have some more eyes on that to see if the logic sounds correct or not note how for 9000 tx i have just to compare 14 transactions instead of thousands like current bitcoin code is doing apart from that in my case it has another pros that allow me to split the markle computation and markle cve check in two different places without having to use a solution like that mutated boolean parameter actually i cant setup an environment to check if my intuition is correct and benchmark it so i cant provide numbers but im more interested about the check logic itself 1 2"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nchange address selected randomly causes problem with hw wallet\nusing core with hardware wallets coldcard in this case comes with a problem when you create a psbt with it pulls a random change address problem is coldcard i think justly says it is out of order and displays a strong warning like in our case in a pool of 1000 addresses coldcard scans and accepts the first 200 solution it would be nice to have an option default to pull change addresses in the derivation order alternative right now we can importmulti 200 addresses so any random address falls into the accepted first 200 problem is its easy to run out of that 200 i believe pulling random change addresses form a hd wallet gives no extra privacy"}, {"role": "assistant", "content": "feature"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nboundary limit\nlukejr glozow fanquake marcofalke shouldnt be here in code less equal than ie for determination if an uxto is to be considered dust"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoinwallet reported as wacatac malware\nis there an existing issue for this x i have searched the existing issues current behaviour running gpg verified binaries leads to an active wacatac malware was prevented expected behaviour not triggering the incident steps to reproduce follow curl o zxf cd downloads gpg verify sha256sumsasc tar zxf sudo cp bitcoin250binbitcoin usrlocalbin run bitcoind relevant log output an active wacatac malware was prevented how did you obtain bitcoin core prebuilt binaries what version of bitcoin core are you using 250arm64appledarwin operating system and version macos ventura 1351 machine specifications apple silicone chip"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwhat is depends buildidsalt\nis it unused if not how can it be used if yes can it be removed references git grep dependsmakefile they rely on the buildid variables env ccbuildcc cstandardcstandard cxxbuildcxx arbuildar ranlibbuildranlib stripbuildstrip debugdebug ltolto nohardennoharden genid buildidsalt guixenvironment the cache is not invalidated cd depends buildidsaltsalt make boost echo done done cd depends buildidsaltsalty make boost echo done done"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nregtest mode loses unspents after day\nis there an existing issue for this x i have searched the existing issues current behaviour testing in regtest mode i have noticed that after 1 day of send some funds from a wallet to b the unspent inputs disappear from wallet b bitcoinconf bash generated by this config should be placed in following path bitcoinbitcoinconf chain run this node on its own independent test network equivalent to chainregtest regtest1 core specify a nondefault location to store blockchain and other data reduce storage requirements by only storing most recent n mib of block this mode is incompatible with txindex and coinstatsindex warning reverting this setting requires redownloading th prune0 wallet bech32 addresstypebech32 bech32 changetypebech32 specify wallet database path can be specified multiple times to load multiple wallets path is interpreted relative to if it is not absolute and will be created if it does not ex walletdefault sections most options automatically apply to mainnet testnet and regtest networks if you want to confine an option to just one network you should add it in the relevant section exceptions the options addnode connect port bind rpcport rpcbind and wallet only apply to mainnet unless they appear in the appropriate section below options only for mainnet main options only for testnet test options only for regtest regtest accept command line and jsonrpc commands server1 bind to given address to listen for jsonrpc connections this option is ignored unless rpcallowip is also passed port is optional and overrides rpcport use hostport notation for ipv6 rpcbind127001 listen for jsonrpc connections on this port rpcport10001 allow jsonrpc connections from specified source valid for are a single ip eg 1234 a networknetmask eg 12342552552550 or a networkcidr eg 123424 this optio rpcallowip127001 username and hashed password for jsonrpc connections the field comes in the format rpc clients connect using rpcuserrpcpassword ar expected behaviour obtain unspent inputs steps to reproduce bash send unspent bitcoincorecli named send 0034 feerate25 generate blocks bitcoincorecli generatetoaddress 6 list unspent bitcoincorecli listunspent 0 9999999 after day trying again to list with listunspent and the result is empty relevant log output no response how did you obtain bitcoin core package manager what version of bitcoin core are you using v025 operating system and version debian 11 machine specifications no response"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nundefined symbols for architecture arm64\nis there an existing issue for this x i have searched the existing issues current behaviour configure success make failed expected behaviour make failed steps to reproduce configure enablefuzz disableasm build options with external callbacks no with benchmarks no with tests yes with ctime tests no with coverage no with examples no module ecdh no module recovery yes module extrakeys yes module schnorrsig yes module ellswift yes asm no ecmult window size 15 ecmult gen prec bits 4 valgrind no cc gcc cppflags secpcflags o2 stdc89 pedantic wnolonglong wnestedexterns wshadow wstrictprototypes wundef wnooverlengthstrings wall wnounusedfunction wextra wcastalign wreservedidentifier fvisibilityhidden cflags g o2 ldflags options used to compile and link external signer no multiprocess no with libs no with wallet yes with sqlite yes with bdb yes with gui qt no with zmq no with test not building testbitcoin because fuzzing is enabled with fuzz binary yes with bench no with upnp no with natpmp no use asm no usdt tracing no sanitizers debug enabled no gprof enabled no werror no lto no target os darwin2260 build os darwin2260 cc gcc cflags pthread g o2 cppflags dabortonfailedassume ufortifysource dfortifysource3 dhavebuildinfo xclang dmacosx cxx g stdc17 cxxflags wstackprotector fstackprotectorall wall wextra wgnu wformat wformatsecurity wvla wshadowfield wthreadsafety wloopanalysis wredundantdecls wdatetime woverloadedvirtual wsuggestoverride wimplicitfallthrough wdocumentation wnounusedparameter wnoselfassign g o2 ldflags lpthread wlbindatload wlfixupchains wldeadstrip wldeadstripdylibs ar usrbinar arflags cr make relevant log output ar libbitcoinutila cxx cxx cxx cxx cxx cxx cxx cxx cxx cxx cxx ar libbitcoinconsensusa cxx cxx cxx cxx cxx cxx cxx cxx cxx cxx cxxld cxx ar libbitcoinclia cxxld testfuzzfuzz undefined symbols for architecture arm64 int unsigned char const unsigned long referenced from crc32cextendunsigned int unsigned char const unsigned long in ld symbols not found for architecture arm64 clang error linker command failed with exit code 1 use v to see invocation make2 testfuzzfuzz error 1 make1 allrecursive error 1 make allrecursive error 1 how did you obtain bitcoin core compiled from source what version of bitcoin core are you using 25x operating system and version macos ventura 135 machine specifications m1 macbook pro 16 103264gb 1tb"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin core v250 crashes\nis there an existing issue for this x i have searched the existing issues current behaviour bitcoin core keeps crashing and wont stay up i have been running a bitcoin node on a windows 10 computer for several years and had never experienced a bitcoin core crash before i had been running bitcoin core v0211 since if first came out but left the node unattended for a few weeks this summer i restarted it earlier this week and the bitcoin core log window showed its data base was several thousand blocks out of sync the last i saw on the bitcoin core log window was that it had some 50 blocks to go to complete the synchronization i do not know if the synchronization finished or not but a few hours later i noticed the bitcoin core log window gone and the bitcoinqtexe process disappeared from the task manager process list i restarted bitcoin core and surprisingly the log window showed its data base was more than one thousand blocks out of sync in other words it lost a large number of blocks in the crash i rebooted the windows computer and restarted bitcoin core three more times but it crashed within a few hours each time i updated bitcoin core to v250 hoping that the latest version would fix the problem unfortunately i tried v250 several times and it crashes within a few hours each time i reran bitcoin core from the command prompt window bitcoindexe with the debug option and wrote its output to a file bitcoinlogtxt which i am including below to help identify the problem i would really appreciate it if anyone would could give me some guidance on how to fix this problem so i can get my bitcoin node back up and running expected behaviour expected my bitcoin node to sync up to the bitcoin blockchain and continue to load new blocks like it has reliably done for several years now steps to reproduce restarted bitcoin core bitcoinqtexe after some 4 or 5 weeks offline relevant log output bitcoinlogtxt how did you obtain bitcoin core prebuilt binaries what version of bitcoin core are you using v250 operating system and version windows 10 version 22h2 machine specifications using a windows 10 computer running intel core i78565 cpu with 8 gb ram and 2 tb hdd"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfailure running ci locally 0 1501 error unable to find a match glibcdevelx8664 libstdcdevelx8664 glibcdeveli686 libstdcdeveli686\nis there an existing issue for this x i have searched the existing issues current behaviour im following the guide in cireadmemd but i cant get any of the environments to run successfully expected behaviour run ci locally steps to reproduce macos docker v docker version 2402 build cb74dfc uname a darwin 2160 darwin kernel version 2160 thu mar 9 201019 pst 2023 arm64 command citestrunallsh relevant log output full log end of log 0 7735 bash c dnf y allowerasing install gccc glibcdevelx8664 libstdcdevelx8664 glibcdeveli686 libstdcdeveli686 ccache libtool make git python3 python3pip which patch lbzip2 xz procpsng dash rsync coreutils bison utillinux 0 2506 extra packages for enterprise linux 9 aarch64 10 mbs 18 mb 0017 0 3034 extra packages for enterprise linux 9 next 448 kbs 606 kb 0001 0 3075 last metadata expiration check 00001 ago on sat jun 17 160648 2023 0 3146 no match for argument glibcdevelx8664 0 3147 no match for argument libstdcdevelx8664 0 3147 no match for argument glibcdeveli686 0 3148 no match for argument libstdcdeveli686 0 3148 package is already installed 0 3153 error unable to find a match glibcdevelx8664 libstdcdevelx8664 glibcdeveli686 libstdcdeveli686 how did you obtain bitcoin core compiled from source what version of bitcoin core are you using master operating system and version macos 1265 machine specifications no response"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbuild fails on fedora 36 configure failed for srcsecp256k1\nis there an existing issue for this x i have searched the existing issues current behaviour found a recent similar issue but didnt help im trying to run a build on fedora 36 and im seeing the same error when i run configure i see the following configure warning bitcoin core requires this library for bdb legacy wallet support configure warning passing withoutbdb will suppress this warning checking for sqlite yes checking whether to build wallet with support for sqlite yes checking whether userspace statically defined tracing tracepoints are supported no checking for natpmph yes checking for initnatpmp in lnatpmp yes checking for boostlib 1640 106400 yes checking whether boostprocess can be used yes checking for seccompbpf linux x8664 yes checking for event yes checking for eventpthreads yes checking if expects const char no checking for zmq yes checking for libmultiprocess no checking whether to build bitcoind yes checking whether to build bitcoincli yes checking whether to build bitcointx yes checking whether to build bitcoinwallet yes checking whether to build bitcoinutil yes checking whether to build experimental bitcoinchainstate no checking whether to build libraries yes checking if ccache should be used yes checking whether c compiler accepts fdebugprefixmapab yes checking whether c preprocessor accepts fmacroprefixmapab yes checking if wallet should be enabled yes checking whether to build with support for upnp no checking whether to build with support for natpmp yes checking whether to build with natpmp enabled by default no checking whether to build testbitcoin yes checking whether to reduce exports no checking that generated files are newer than configure done configure creating configstatus configstatus creating configstatus creating makefile configstatus creating srcmakefile configstatus creating docmanmakefile configstatus creating sharesetupnsi configstatus creating shareqtinfoplist configstatus creating testconfigini configstatus creating configstatus creating configstatus is unchanged configstatus executing depfiles commands configstatus executing libtool commands configuring in srcsecp256k1 configure running binsh configure prefixusrlocal withoutminiupnpc disablebench withoutgui disableshared withpic enablebenchmarkno enablemodulerecovery cachefiledevnull srcdir configure error cannot find required auxiliary files compile missing configure error configure failed for srcsecp256k1 would be appreciate if you can guide if this error is because of a recent change expected behaviour configure script completes successfully steps to reproduce run the following on master configure withoutminiupnpc disablebench withoutgui relevant log output already pasted above how did you obtain bitcoin core compiled from source what version of bitcoin core are you using masterba616b9 operating system and version fedora 36 machine specifications no response"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nallow accepting nonstandard transactions on mainnet via local rpc\nto mitigate mempool divergence between nodes and miners node operators should have the ability to submit nonstandard transactions to their local mempools one of the reasons to do so is to improve the quality of fee estimates acceptance via the p2p network has been discussed in and is deemed to be problematic this issue is for enabling nonstandard transaction submission for the sendrawtransaction rpc only"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndumpprivkey this type of wallet does not support this command code 4\nis there an existing issue for this x i have searched the existing issues current behaviour hello when i try export private key for bitcoin address i got this type of wallet does not support this command code 4 i tried on all 4 types of bitcoin address base58 and bech32 legacy segwit im using zip version of bitcoin core v2310 downloaded from expected behaviour it should display private key bitcoin address cannot be found if i insert random value for bitcoin address i got this error steps to reproduce 1 run bitcoin core v2310 2 select help console 3 insert command and press enter dumpprivkey relevant log output no response how did you obtain bitcoin core compiled from source what version of bitcoin core are you using bitcoin core v2310 operating system and version windows machine specifications"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmethod not found\nissues reports or feature requests related to the gui should be opened directly on the gui repo x i still think this issue should be opened here report img width1018 src i build the node with ubuntu2004 and 2401 but some api return the error as the picture the run command bitcoind datadirdata2btcdata rpcuserxxxx rpcpasswordxxx server txindex1"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncompiling a bitcoin core version that accepts transactions over 100vkb\nplease describe the feature youd like to see added i couldnt manage to find any label that fits this when people try to inscribe ordinals that are bigger than 400kb they can not be able to because bitcoin core doesnt allow transactions over 100kvb even though that would require the person to be a miner or pay miners for it but it still would be nice to guide us on how to compile such bitcoin core version is your feature related to a problem if so please describe it no response describe the solution youd like a guide on what code changes should be done to compile such version describe any alternatives youve considered trying to look through the code to understand it and do it myself please leave any additional context no response"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nget block or transaction data via rpc api when in the ibd process\nplease describe the feature youd like to see added can i get the block or transaction data via the rpc api when the bitcoin core is still in the ibd process that has not been finished for example can i get the downloaded block data via calling the getblock api while the client is still in the ibd process is your feature related to a problem if so please describe it no response describe the solution youd like no response describe any alternatives youve considered no response please leave any additional context no response"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoincore macos\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue when i install bitcoin core for my mac from official site i used datadir to my deskop but i did not found bitcoin folder and i checked out support but did not get any folder here too i am unable add to my path of mac but bitcoincore app running properly im stuck now please help expected behavior actual behavior to reproduce system information"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest p2pmessagecapturepy fails with undefined sanitizer\non ubuntu 2210 relevant configure variable testframework info prng seed is 8604348948412116696 testframework info initializing test directory testframework info stopping nodes traceback most recent call last file line 72 in file line 157 in main exitcode selfshutdown file line 313 in shutdown selfstopnodes file line 577 in stopnodes nodestopnodewaitwait file line 356 in stopnode raise stderr formatstderr expectedstderr assertionerror unexpected stderr streamsh55619 runtime error null pointer passed as argument 1 which is declared to never be null node 0 cleaning up leftover process seems pretty consistent on the latest master"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhidden fee about 15 of sum while send\nhello my wallet is 18 transactions total i sent 01btc but in blockchain i found 2 transactions my own 01btc unknown fee 001999241btc 20 of sum txid next i sent 01btc but in blockchain i found 2 transactions my own 01btc unknown fee 000997949btc 10 of sum txid i do not understand how this could happen in bitcoin core i see only my transactions but blockchain show me more 2 transactions to unknown wallets so total balance in blockchain is less then in bitcoin core on this amount 002997189btc bitcoin core show me 138994437 btc but blockchain show me 135997247btc minus two fees above what is my really balance what are these hidden payments tell me more about it please what can i do to solve this problems in future screens from my bitcoin core is attached below thanks expected behavior actual behavior to reproduce system information bitcoin core version v0180 64bit from official site linux blockchain 415048generic 51ubuntu smp wed apr 3 082849 utc 2019 x8664 x8664 x8664 gnulinux balance sent1 sent2 transactions version"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin blockchain download alternate\nplease anyone out there having knowledge help me that how can i deploy a node and start transactions on btc core without downloading the complete blockchain as its more than 350gb right now i want to know if there is any possible solution to it img width659 altscreenshot 20230202 at 8 06 19 pm src"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhow to interpret the asm section of scriptsig\ni tried asking the question in this post on but got no answer the question is this i am trying to understand the output from bitcoincli the sample transactions txid is from block 222222 the asm section of scriptpubkey ie opdup ophash160 opequalverify opchecksig is more understandable it decodes hex and shows the assembly in a sort of humanreadable format vout value 063918136 n 0 scriptpubkey asm opdup ophash160 opequalverify opchecksig hex address type pubkeyhash the question arises when it comes to the asm section of scriptsig txid vout 1 scriptsig asm hex as you can see it is which isnt really decoded i checked the same transaction from blockstreaminfo its result is oppushbytes72 oppushbytes65 which looks more readable and i can understand that this scriptsig pushes two byte arrays into the bitcoin vms stack so the questions are 1 why bitcoinclis output is like this 1 how to interpret it especially how to understand the all part in its asm perhaps you can just give me a rtfm link"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsender always unknown on the laatest version\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue sender always show unknown is there any way to see senders in order to make our own accounting expected behavior to see sender too actual behavior to reproduce system information"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsha256sumsasc using untrusted key\ngetting warning using untrusted key when running gpg verification gpg keyserver autokeyretrieve trustmodel always verify sha256sumsasc sha256sums output and warning 14 2271 gpg requesting key 0a41bdc3f4faff1c from hkp server keyserverubuntucom 14 2299 gpg key 0a41bdc3f4faff1c public key aaron clauson sipsorcery imported 14 2299 gpg total number processed 1 14 2299 gpg imported 1 14 2299 gpg good signature from aaron clauson sipsorcery unknown 14 2299 gpg warning using untrusted key 14 2299 gpg signature made thu nov 17 212322 2022 utc 14 2299 gpg using rsa key 14 2299 gpg requesting key 57ff9bdbcc301009 from hkp server keyserverubuntucom 14 2334 gpg key 57ff9bdbcc301009 3 duplicate signatures removed 14 2334 gpg key 57ff9bdbcc301009 public key sjors provoost imported 14 2334 gpg total number processed 1 14 2334 gpg imported 1 14 2334 gpg good signature from sjors provoost unknown 14 2334 gpg aka sjors provoost unknown 14 2334 gpg warning using untrusted key 14 2334 gpg signature made tue nov 22 110428 2022 utc 14 2334 gpg using rsa key 14 2334 gpg issuer 14 2386 gpg requesting key c2371d91cb716ea7 from hkp server keyserverubuntucom 14 2412 gpg key c2371d91cb716ea7 public key sebastian falbesoner thestack imported 14 2412 gpg total number processed 1 14 2412 gpg imported 1 14 2413 gpg good signature from sebastian falbesoner thestack unknown 14 2413 gpg warning using untrusted key 14 2413 gpg signature made thu nov 17 193552 2022 utc 14 2413 gpg using rsa key 14 2413 gpg issuer vertionprotonmailcom 14 2535 gpg key da43140f88b4e81f public key vertionprotonmailcom imported 14 2535 gpg total number processed 1 14 2535 gpg imported 1 14 2535 gpg requesting key a7beb2621678d37d from hkp server keyserverubuntucom 14 2558 gpg key a7beb2621678d37d public key vertion imported 14 2558 gpg total number processed 1 14 2558 gpg imported 1 14 2558 gpg good signature from vertion unknown 14 2558 gpg warning using untrusted key"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nflushing block file to disk failed when using external drive on macos ventura\ni kept getting an error regarding flushing block to disk ive tried to use bitcoin core v023 and it doesnt help although v022 was better at loading the backup file but i couldnt send any of my bitcoin out i cant seem to load the wallet or the backup file properly not a coder and hoping someone can help i dont think its an issue with the hard drive any suggestion im on macosx ventura 130 debuglog file 20221104t203428z using wallet volumesextreme ssdbruceltd walletdat 20221104t203428z logdirvolumesextreme ssddatabase ssddblog 20221104t205816z filecommit fcntl ffullfsync failed 25 20221104t205816z error serializefiledb failed to flush file volumesextreme ssdpeers176f dblog file fsync inappropriate ioctl for device panic inappropriate ioctl for device txncheckpoint failed to flush the buffer cache dbrunrecovery fatal error run database recovery"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd ability to ignore flags when broadcasting transactions on test networks\nafter bugs like it would be useful to be able to reproduce these bugs in regtest currently to do so you would need to manually edit the code and comment out the script flag then compile your self it would be beneficial if we could disable these flags to create more reproducible tests"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ninitialblockdownload set to false prematurely\nexpected behavior stays true until all blocks are imported actual behavior becomes false before before all blocks are imported 20221101t111639z updatetip new height761091 version0x20f0c000 log2work93816484 tx776463417 date20221031t111346z progress0999730 20221101t111639z leaving initialblockdownload latching to false 20221101t111642z updatetip new height761092 version0x20c00000 log2work93816497 tx776466523 date20221031t112940z progress0999733 20221101t111657z updatetip new height761255 version0x2e4a6000 log2work93818629 tx776748676 date20221101t110942z progress0999999 observe the 15 seconds it took my reasonably fast machine to import the remaining blocks this is a problem for me since my application relies on this field to determine if syncing is complete we can not rely on either due to to reproduce start a node that hasnt been synced in a while and observe the log output system information observed on version 22 from the website"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsqlite version vulnerability\nsqlite version is before vulnerability cve202235737 was fixed details of which are described here"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nestimatesmartfee returns 50 satvb on an empty mempool for inclusion in 1008 blocks\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue expected behavior when the mempool is empty i expect something really low at least smaller than 3 satvb but not 50 satvb actual behavior bitcoincli testnet estimatesmartfee 1 feerate 000050106 blocks 2 bitcoincli testnet estimatesmartfee 1008 feerate 000050106 blocks 111 to reproduce run bitcoincli testnet estimatesmartfee on the testnet when the difficulty drops to 1 happens every few months or so i dont know why system information bitcoincoreorg download v23 any extra information that might be useful in the debugging process blocks were flowing in like every few seconds a block got mined"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncentos compilation error no rule to make target\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue any report issue or feature request related to the gui should be reported at im trying to compile bitcoin v230 tag commit id fcf6c8f during the compilation i received this error make2 no rule to make target reldirlibunivaluecpp needed by stop os centos 7 compiler gcc 1120"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin cores sync has stop for days\nimage image image os info windows11 21h2 what should i do"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsync slow\nsyncing blockchain is sometimes very slow i think this has become more common in the past months heres a screenshot from network traffic window in the gui see how there are long periods of absolutely no traffic also see how it only downloaded about 100 mb during the first 30minutes of syncing its also often connected to just 1 or 2 peers which is weird internet is stable and i can easily download 10 mbsecond cpu load stays mostly low so lack of cpu resources doesnt explain this memory usage is also not high i have set the memory option in the settings menu to 4 gb sometimes it starts to work faster if you close and restart the program but as i said this has become worse in the past months why doesnt it download blocks faster than this if the problem is that peers cant provide blocks faster why isnt it looking for more peers im using the latest master from git as of today"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nconan build system\ndoes bitcoin support building with conan build system is there a way to build bitcoin and the depends library with conan"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nis there an alternative to the blockmaxsize option available in the client\nthe blockmaxsize option for bitcoind was removed with issue 12640 and i need to be able to limit my block creation size is there an alternative setting that will accomplish this or is there no control of this now beyond restricting my mempool with fees"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ni cant define bitcoinconf file in different folder as default\ni installed the bitcoin libraries on mntvolumefra102 ran it via the following setting bitcoind i get an error when i want to create a new wallet bitcoincli createwallet adminwallet response no authentication cookie could be found and rpc password is not set see rpcpassword and stdinrpcpass configuration file probably still based on directory could you help"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nconfigure hang up\ni am using mac os 1301 i get to this point everytime everyway i try to configure the code from source checking dependency style of g gcc3 checking whether g supports c17 features with stdc17 yes checking whether stdfilesystem can be used without link library no checking whether stdfilesystem needs lstdcfs no checking whether stdfilesystem needs lcfs configure error in bitcoinbitcoincli configure error cannot figure out how to use stdfilesystem see configlog for more details what can i do to remedy the situation"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoincli createwallet error compiled without sqlite support\ni installed bitcoin core on ubuntu server i got help from the following commands work fine bitcoincli getinfo bitcoincli getblockchaininfo bitcoincli getnetworkinfo bitcoincli getpeerinfo i get this error when i want to create a new wallet request bitcoincli createwallet adminwallet response error code 4 error message compiled without sqlite support required for descriptor wallets"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeatureconfigargspy failure\nrun test python3 featureconfigargspy results in error testframework info initializing test directory testframework info test config args logging testframework info test seed peers testframework error assertion failed traceback most recent call last file line 133 in main selfruntest file line 229 in runtest selftestseedpeers file line 175 in testseedpeers selfstartnode0 extraargsdnsseed1 fixedseeds1 fmocktimestart file line 124 in exit nextselfgen file line 423 in assertdebuglog messages does not partially match printlog file line 167 in raiseassertionerror raise assertionerror node 0 expected messages loaded 0 addresses from peersdat 0 addresses found from dns seeds opencon thread start does not partially match log init initcommoncpp127 logpackageversion bitcoin core version v23990ce3b75690d10 release build init initcpp657 parameter interaction bind set setting listen1 init initcpp922 validating signatures for all blocks init initcpp933 setting mocktime 20220801t210530z init kernelcontextcpp21 context using the sha256 implementation mocktime 20220801t210530z init randomcpp100 reporthardwarerand using rdseed as an additional entropy source mocktime 20220801t210530z init randomcpp103 reporthardwarerand using rdrand as an additional entropy source mocktime 20220801t210530z init initcommoncpp98 startlogging default data directory homeuserbitcoin mocktime 20220801t210530z init initcommoncpp99 startlogging using data directory mocktime 20220801t210530z init initcommoncpp104 startlogging config file mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest bind127001 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest discover0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest dnsseed0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest fallbackfee00002 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest fixedseeds0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest keypool1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest listenonion0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest natpmp0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest peertimeout999999999 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest port11093 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest printtoconsole0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest rpcdoccheck1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest rpcport16093 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest server1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest shrinkdebugfile0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest unsafesqlitesync1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix config file arg regtest upnp0 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg debug mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg debugexcludelibevent mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg debugexcludeleveldb mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg dnsseed1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg fixedseeds1 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg logsourcelocations mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg logthreadnames mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg logtimemicros mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg mocktime1659387930 mocktime 20220801t210530z init utilsystemcpp1118 logargsprefix commandline arg uacommenttestnode0 mocktime 20220801t210530z init initcpp1148 appinitmain using at most 125 automatic connections 1024 file descriptors available mocktime 20220801t210530z init scriptsigcachecpp101 initsignaturecache using 16 mib out of 322 requested for signature cache able to store 524288 elements mocktime 20220801t210530z init validationcpp1669 using 16 mib out of 322 requested for script execution cache able to store 524288 elements mocktime 20220801t210530z init initcpp1175 appinitmain script verification uses 1 additional threads mocktime 20220801t210530z scheduler utilthreadcpp18 tracethread scheduler thread start mocktime 20220801t210530z init httpservercpp184 inithttpallowlist http allowing http connections from 1270008 1128 mocktime 20220801t210530z init httpservercpp321 httpbindaddresses http binding rpc on address 1 port 16093 mocktime 20220801t210530z init httpservercpp321 httpbindaddresses http binding rpc on address 127001 port 16093 mocktime 20220801t210530z init httpservercpp401 inithttpserver http initialized http server mocktime 20220801t210530z init httpservercpp403 inithttpserver http creating work queue of depth 16 mocktime 20220801t210530z init rpcservercpp291 startrpc rpc starting rpc mocktime 20220801t210530z init httprpccpp296 starthttprpc rpc starting http rpc server mocktime 20220801t210530z init httprpccpp245 using random cookie authentication mocktime 20220801t210530z init rpcrequestcpp106 generateauthcookie generated rpc authentication cookie mocktime 20220801t210530z init httpservercpp676 registerhttphandler http registering http handler for exactmatch 1 mocktime 20220801t210530z init httpservercpp676 registerhttphandler http registering http handler for wallet exactmatch 0 mocktime 20220801t210530z init httpservercpp425 starthttpserver http starting http server mocktime 20220801t210530z init httpservercpp427 starthttpserver http starting 4 worker threads mocktime 20220801t210530z http httpservercpp287 threadhttp http entering http event loop mocktime 20220801t210530z init walletloadcpp51 verifywallets using wallet directory mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message verifying wallets… mocktime 20220801t210530z init initcpp1261 appinitmain using 16 prefix for ip bucketing mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message loading p2p addresses… mocktime 20220801t210530z init loggingtimerh57 log addrman checkaddrman new 0 tried 0 total 0 started mocktime 20220801t210530z init loggingtimerh57 log addrman checkaddrman completed 000ms mocktime 20220801t210530z init addrdbcpp194 loadaddrman loaded 0 addresses from peersdat 0ms mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message loading banlist… mocktime 20220801t210530z init banmancpp38 loadbanlist net loaded 0 banned node addressessubnets 0ms mocktime 20220801t210530z init netcpp1523 net setting try another outbound peerfalse mocktime 20220801t210530z init netcpp2170 setnetworkactive setnetworkactive true mocktime 20220801t210530z init policyfeescpp455 read estimatefee reading estimates 190 buckets counting confirms up to 48 blocks mocktime 20220801t210530z init policyfeescpp455 read estimatefee reading estimates 190 buckets counting confirms up to 12 blocks mocktime 20220801t210530z init policyfeescpp455 read estimatefee reading estimates 190 buckets counting confirms up to 1008 blocks mocktime 20220801t210530z init initcpp1403 appinitmain cache configuration mocktime 20220801t210530z init initcpp1404 appinitmain using 20 mib for block index database mocktime 20220801t210530z init initcpp1412 appinitmain using 80 mib for chain state database mocktime 20220801t210530z init initcpp1428 appinitmain using 4400 mib for inmemory utxo set plus up to 2861 mib of unused mempool space mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message loading block index… mocktime 20220801t210530z init validationcpp4710 initializechainstate switching active chainstate to chainstate ibd height 1 null mocktime 20220801t210530z init dbwrappercpp150 cdbwrapper opening leveldb in mocktime 20220801t210530z init dbwrappercpp158 cdbwrapper opened leveldb successfully mocktime 20220801t210530z init dbwrappercpp183 cdbwrapper using obfuscation key for 0000000000000000 mocktime 20220801t210530z init loadblockindexdb loadblockindexdb last block file 0 mocktime 20220801t210530z init loadblockindexdb loadblockindexdb last block file info size293 heights00 time2011020220110202 mocktime 20220801t210530z init loadblockindexdb checking all blk files are present mocktime 20220801t210530z init dbwrappercpp150 cdbwrapper opening leveldb in mocktime 20220801t210530z init dbwrappercpp158 cdbwrapper opened leveldb successfully mocktime 20220801t210530z init dbwrappercpp183 cdbwrapper using obfuscation key for 223bb69586684f13 mocktime 20220801t210530z init validationcpp3894 loadchaintip loaded best chain height0 date20110202t231642z progress1000000 mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message verifying blocks… mocktime 20220801t210530z init initcpp1474 appinitmain block index 35ms mocktime 20220801t210530z init initcpp1631 appinitmain block tree size 1 mocktime 20220801t210530z init initcpp1643 appinitmain nbestheight 0 mocktime 20220801t210530z loadblk utilthreadcpp18 tracethread loadblk thread start mocktime 20220801t210530z loadblk loadmempool imported mempool transactions from disk 0 succeeded 0 failed 0 expired 0 already there 0 waiting for initial broadcast mocktime 20220801t210530z loadblk utilthreadcpp20 tracethread loadblk thread exit mocktime 20220801t210530z init netcpp2103 bindlistenport bound to 12700111093 mocktime 20220801t210530z init netcpp2103 bindlistenport bound to 12700118445 mocktime 20220801t210530z init addrdbcpp228 readanchors loaded 0 addresses from anchorsdat mocktime 20220801t210530z init netcpp2277 start 0 blockrelayonly anchors will be tried for connections mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message starting network threads… mocktime 20220801t210530z net utilthreadcpp18 tracethread net thread start mocktime 20220801t210530z addcon utilthreadcpp18 tracethread addcon thread start mocktime 20220801t210530z opencon utilthreadcpp18 tracethread opencon thread start mocktime 20220801t210530z msghand utilthreadcpp18 tracethread msghand thread start mocktime 20220801t210530z init nouicpp56 nouiinitmessage init message done loading mocktime 20220801t210530z dnsseed utilthreadcpp18 tracethread dnsseed thread start mocktime 20220801t210530z dnsseed netcpp1456 threaddnsaddressseed loading addresses from dns seed dummyseedinvalid mocktime 20220801t210530z dnsseed addrmancpp612 addsingle addrman added 100118444 mapped to as0 to new8135 mocktime 20220801t210530z dnsseed addrmancpp684 add addrman added 1 addresses of 1 from 0 tried 1 new mocktime 20220801t210530z dnsseed netcpp1485 threaddnsaddressseed 1 addresses found from dns seeds mocktime 20220801t210530z dnsseed utilthreadcpp20 tracethread dnsseed thread exit mocktime 20220801t210530z http httpservercpp240 httprequestcb http received a post request for from 12700143440 mocktime 20220801t210530z httpworker1 rpcrequestcpp179 parse rpc threadrpcserver methodgetblockcount usercookie mocktime 20220801t210530z http httpservercpp240 httprequestcb http received a post request for from 12700143440 mocktime 20220801t210530z httpworker0 rpcrequestcpp179 parse rpc threadrpcserver methodgetmempoolinfo usercookie mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon netcpp455 connectnode netdebug trying connection 100118444 lastseen1469hrs mocktime 20220801t210530z opencon netcpp2729 cnode net added connection peer0 mocktime 20220801t210530z opencon netcpp2745 pushmessage net sending version 114 bytes peer0 mocktime 20220801t210530z opencon netprocessingcpp1303 pushnodeversion net send version message version 70016 blocks0 txrelay1 peer0 mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new mocktime 20220801t210530z opencon addrmancpp769 select addrman selected 100118444 from new testframework info stopping nodes testframework warning not cleaning up dir testframework error test failed test logging available at testframework error testframework error hint call to consolidate all logs testframework error testframework error if this failure happened unexpectedly or intermittently please file a bug and provide a link or upload of the combined log testframework error testframework error logs python3 pasted here"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nloadwalletinternal logic check\nin the rpc method when the rpc method loadwallet is called it will call loadwallet and loadwalletinternal when the user repeatedly call the loadwallet with same wallet name in the loadwalletinternal funcntion although it does not call addwallet repeatedly to add to contextwallets and avoid open sqlite database repeatedly but it will make new sqlitedatabase uniqueptr and do some series checks is it better to use getwallet to determine if the wallet is already loaded before calling loadwalletinternal"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nreproducible test failures\nive been having issues performing tests on prs so ive tried it multiple times now on master deleting the directory and starting fresh this is what i get each time make ar cxxld testtestbitcoin collect2 fatal error ld terminated with signal 9 killed compilation terminated make2 makefile7539 testtestbitcoin error 1 make2 leaving directory homeuserbitcoinsrc make1 makefile18626 allrecursive error 1 make1 leaving directory homeuserbitcoinsrc make makefile818 allrecursive error 1 make a second time successful cxx cxxld make2 leaving directory homeuserbitcoinsrc make1 leaving directory homeuserbitcoinsrc making all in docman make1 entering directory make1 nothing to be done for all make1 leaving directory make1 entering directory homeuserbitcoin make1 nothing to be done for allam make1 leaving directory homeuserbitcoin userlocalhostbitcoin make check making check in src make1 entering directory homeuserbitcoinsrc make2 entering directory homeuserbitcoinsrc make3 entering directory homeuserbitcoin make3 leaving directory homeuserbitcoin make checktests checklocal make3 entering directory homeuserbitcoinsrc make4 entering directory homeuserbitcoinsrc pass minisketchtest pass univaluetestobject pass pass univaluetestnonul make5 entering directory homeuserbitcoin make5 leaving directory homeuserbitcoin pass qttesttestbitcoinqt testsuite summary for bitcoin core 23990 total 5 pass 5 skip 0 xfail 0 fail 0 xpass 0 error 0 make4 leaving directory homeuserbitcoinsrc running tests addrmantests from testaddrmantestscpp binbash line 2 testtestbitcoin permission denied make3 makefile20866 error 1 make3 leaving directory homeuserbitcoinsrc make2 makefile18969 checkam error 2 make2 leaving directory homeuserbitcoinsrc make1 makefile18626 checkrecursive error 1 make1 leaving directory homeuserbitcoinsrc make makefile818 checkrecursive error 1 errors also userlocalhostbitcoin sudo make install no issues python3 testrunnerpy extended featureblockpy multiply failed 83 s featuredbcrashpy multiply failed 2812 s featurepruningpy multiply failed 582 s details for each failed test 9245 featureblockpy failed duration 83 s stdout testframework info initializing test directory testframework info reject block with invalid tx outputmissing testframework info reject block with invalid tx inputmissing testframework info reject block with invalid tx testframework info reject block with invalid tx duplicateinput testframework info reject block with invalid tx prevoutnullinput testframework info reject block with invalid tx nonexistentinput testframework info reject block with invalid tx spendtoomuch testframework info reject block with invalid tx createnegative testframework info reject block with invalid tx createtoolarge testframework info reject block with invalid tx createsumtoolarge testframework info reject block with invalid tx toomanysigops testframework info dont reorg to a chain of the same length testframework info reorg to a longer chain testframework info reorg back to the original chain testframework info reject a chain with a double spend even if it is longer testframework info reject a block where the miner creates too much coinbase reward testframework info reject a chain where the miner creates too much coinbase reward even if the chain is longer testframework info reject a chain where the miner creates too much coinbase reward even if the chain is longer on a forked chain testframework info accept a block with lots of checksigs testframework info reject a block with too many checksigs testframework info reject a block with a spend from a reorged out tx testframework info reject a block with a spend from a reorged out tx on a forked chain testframework info reject a block spending an immature coinbase testframework info reject a block spending an immature coinbase on a forked chain testframework info accept a block of weight maxblockweight testframework info reject a block of weight maxblockweight 4 testframework info reject a block with coinbase input script size out of range testframework info accept a block with the max number of opcheckmultisig sigops testframework info reject a block with too many opcheckmultisig sigops testframework info accept a block with the max number of sigops testframework info reject a block with too many sigops testframework info accept a block with the max number of opchecksigverify sigops testframework info reject a block with too many opchecksigverify sigops testframework info reject a block spending transaction from a block which failed to connect testframework info check p2sh sigops are correctly counted testframework info reject a block with too many p2sh sigops testframework info accept a block with the max number of p2sh sigops testframework info build block 44 manually testframework info reject a block with a noncoinbase as the first tx testframework info reject a block with no transactions testframework info reject a block with invalid work testframework info reject a block with a timestamp 2 hours in the future testframework info reject a block with invalid merkle hash testframework info reject a block with incorrect pow limit testframework info reject a block with two coinbase transactions testframework info reject a block with duplicate transactions testframework info reject a block with timestamp before mediantimepast testframework info accept a previously rejected future block at a later time testframework info reject a block with a duplicate transaction in the merkle tree but with a valid merkle root testframework info reject a block with two duplicate transactions in the merkle tree but with a valid merkle root testframework info reject a block with a transaction with prevoutn out of range testframework info reject a block with a transaction with outputs inputs testframework info reject a block with a transaction with a duplicate hash of a previous transaction bip30 testframework info reject a block with a transaction with a nonfinal locktime testframework info reject a block with a coinbase transaction with a nonfinal locktime testframework info accept a valid block even if a bloated version of the block has previously been sent testframework info accept a block with a transaction spending an output created in the same block testframework info reject a block with a transaction spending an output created later in the same block testframework info reject a block with a transaction double spending a transaction created in the same block testframework info reject a block trying to claim too much subsidy in the coinbase transaction testframework info accept a block claiming the correct subsidy in the coinbase transaction testframework info reject a block containing a transaction spending from a nonexistent input testframework info reject a block containing a duplicate transaction but with the same merkle root merkle tree malleability testframework info reject a block containing too many sigops after a large script element testframework info check sigops are counted correctly after an invalid script element testframework info test transaction resurrection during a reorg testframework info accept a block with invalid opcodes in dead execution paths testframework info test reorging blocks with opreturn in them testframework info test a reorg of one weeks worth of blocks 1088 blocks stderr 21245 featurepruningpy failed duration 582 s stdout testframework info initializing test directory testframework info warning this test requires 4gb of disk space testframework info mining a big blockchain of 995 blocks testframework info check that we havent started pruning yet because were below pruneafterheight testframework info success testframework info though were already using more than 550mib current usage 5921861438751221 testframework info mining 25 more blocks should cause the first block file to be pruned testframework info success testframework info usage should be below target 48031389808654785 testframework info check that well exceed disk space target if we have a very high stale block rate testframework info mine 24 stale blocks on node 1 followed by 25 main chain block reorg from node 0 for 12 rounds testframework info usage can be over target because of high stale rate 5123138980865479 testframework info check that we can survive a 288 block reorg still testframework info current block height 1320 testframework info invalidating block at height 1033 testframework info new best height 1032 testframework info generating new longer chain of 300 more blocks testframework info reconnect nodes testframework error jsonrpc error traceback most recent call last file line 166 in getresponse httpresponse selfconngetresponse file line 1347 in getresponse responsebegin file line 307 in begin version status reason selfreadstatus file line 268 in readstatus line 1 iso88591 file line 704 in readinto return selfsockrecvintob sockettimeout timed out during handling of the above exception another exception occurred traceback most recent call last file line 133 in main selfruntest file line 418 in runtest selfreorgtest 1033 file line 217 in reorgtest timeout120 file line 676 in syncblocks besthash xgetbestblockhash for x in rpcconnections file line 676 in besthash xgetbestblockhash for x in rpcconnections file line 49 in call returnval kwargs file line 142 in call response status selfrequestpost selfurlpath postdataencodeutf8 file line 108 in request return selfgetresponse file line 168 in getresponse raise jsonrpcexception getbestblockhash rpc took longer than 60000000 seconds consider using larger timeout for calls that take longer to return 344 testframework info stopping nodes testframeworknode0 error unable to stop node traceback most recent call last file line 336 in stopnode selfstopwaitwait file line 49 in call returnval kwargs file line 142 in call response status selfrequestpost selfurlpath postdataencodeutf8 file line 107 in request path postdata headers file line 1255 in request url body headers encodechunked file line 1266 in sendrequest selfputrequestmethod url skips file line 1092 in putrequest raise requestsent node 5 cleaning up leftover process node 2 cleaning up leftover process node 1 cleaning up leftover process node 0 cleaning up leftover process stderr traceback most recent call last file line 486 in prunetestmain file line 156 in main exitcode selfshutdown file line 311 in shutdown selfstopnodes file line 571 in stopnodes nodewaituntilstopped file line 382 in waituntilstopped timeouttimeout file line 265 in waituntilhelper if predicate file line 372 in isnodestopped assert returncode 0 selfnodemsg assertionerror node 0 node returned nonzero exit code 9 when stopping 245245 featuredbcrashpy failed duration 2812 s stdout testframework info initializing test directory testframework info prepped 5000 utxo entries testframework info iteration 0 generating 2500 transactions 0 0 0 testframework info iteration 1 generating 2500 transactions 0 0 0 testframework info iteration 2 generating 2500 transactions 0 0 0 testframework info iteration 3 generating 2500 transactions 0 0 0 testframework info iteration 4 generating 2500 transactions 0 0 0 testframework info iteration 5 generating 2500 transactions 0 0 0 testframework info iteration 6 generating 2500 transactions 0 0 0 testframework info iteration 7 generating 2500 transactions 1 1 0 testframework info iteration 8 generating 2500 transactions 2 1 0 testframework info iteration 9 generating 2500 transactions 3 1 0 testframework info iteration 10 generating 2500 transactions 4 1 0 testframework info iteration 11 generating 2500 transactions 4 1 0 testframework info iteration 12 generating 2500 transactions 4 1 0 testframework info iteration 13 generating 2500 transactions 4 1 0 testframework info iteration 14 generating 2500 transactions 5 2 0 testframework info iteration 15 generating 2500 transactions 5 2 0 testframework info iteration 16 generating 2500 transactions 5 3 0 testframework info iteration 17 generating 2500 transactions 6 3 0 testframework info iteration 18 generating 2500 transactions 6 3 0 testframework info iteration 19 generating 2500 transactions 6 3 0 testframework info iteration 20 generating 2500 transactions 6 3 0 testframework info iteration 21 generating 2500 transactions 6 3 0 testframework info iteration 22 generating 2500 transactions 6 4 0 testframework info iteration 23 generating 2500 transactions 7 4 0 testframework info iteration 24 generating 2500 transactions 7 5 0 testframework info iteration 25 generating 2500 transactions 7 5 0 testframework info iteration 26 generating 2500 transactions 8 6 0 testframework info iteration 27 generating 2500 transactions 8 6 0 testframework info iteration 28 generating 2500 transactions 9 7 0 testframework info iteration 29 generating 2500 transactions 9 7 0 testframework info iteration 30 generating 2500 transactions 9 7 0 testframework info iteration 31 generating 2500 transactions 10 7 0 testframework info iteration 32 generating 2500 transactions 10 8 0 testframework info iteration 33 generating 2500 transactions 10 8 0 testframework info iteration 34 generating 2500 transactions 11 8 0 testframework info iteration 35 generating 2500 transactions 12 8 0 testframework info iteration 36 generating 2500 transactions 12 8 0 testframework info iteration 37 generating 2500 transactions 12 8 0 testframework info iteration 38 generating 2500 transactions 12 8 0 testframework info iteration 39 generating 2500 transactions 12 8 0 testframework error unexpected exception caught during testing traceback most recent call last file line 108 in request return selfgetresponse file line 166 in getresponse httpresponse selfconngetresponse file line 1347 in getresponse responsebegin file line 307 in begin version status reason selfreadstatus file line 276 in readstatus raise end closed connection without remote end closed connection without response during handling of the above exception another exception occurred traceback most recent call last file line 133 in main selfruntest file line 263 in runtest file line 106 in rescanutxos res file line 49 in call returnval kwargs file line 142 in call response status selfrequestpost selfurlpath postdataencodeutf8 file line 113 in request path postdata headers file line 1255 in request url body headers encodechunked file line 1301 in sendrequest selfendheadersbody file line 1250 in endheaders file line 1010 in sendoutput selfsendmsg file line 950 in send selfconnect file line 921 in connect selfsock selfcreateconnection file line 843 in createconnection raise err file line 831 in createconnection sockconnectsa errno 111 connection refused testframework info stopping nodes testframeworknode3 error unable to stop node traceback most recent call last file line 336 in stopnode selfstopwaitwait file line 49 in call returnval kwargs file line 142 in call response status selfrequestpost selfurlpath postdataencodeutf8 file line 107 in request path postdata headers file line 1255 in request url body headers encodechunked file line 1266 in sendrequest selfputrequestmethod url skips file line 1092 in putrequest raise requestsent node 3 cleaning up leftover process stderr traceback most recent call last file line 288 in file line 156 in main exitcode selfshutdown file line 311 in shutdown selfstopnodes file line 571 in stopnodes nodewaituntilstopped file line 382 in waituntilstopped timeouttimeout file line 265 in waituntilhelper if predicate file line 372 in isnodestopped assert returncode 0 selfnodemsg assertionerror node 3 node returned nonzero exit code 9 when stopping try failed tests individually python3 featureblockpy testframework info test reorging blocks with opreturn in them testframework info test a reorg of one weeks worth of blocks 1088 blocks killed i didnt terminate not sure why this was killed python3 featuredbcrashpy testframework info iteration 39 generating 2500 transactions 14 6 5 testframework info verifying utxo hash matches for all nodes testframework info restarted nodes 14 6 5 crashes on restart 19 testframework info stopping nodes testframework info cleaning up on exit testframework info tests successful this succeeds when tested individually python3 featurepruningpy testframework info done testframework info stopping nodes testframework info cleaning up on exit testframework info tests successful this also succeeds python3 testrunnerpy successful bitcoinqt opens as expected machine details qubes 41 up to date debian 11 standard vm coreboot 414 x86"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nissues with compiling bitcoin using the depends folder bitcoin core version 230\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue hello everyone i have ran into a make host issue while doing the steps needed to compile bitcoin on my computer below is a screenshot of the situation and the steps detailed i used to get this program working for another reference i followed the steps to compile bitcoin from these links the screen shot below shows everything else thank you for your time new bitcoin issue expected behavior to compile normally to finish compiling the core on my laptop actual behavior a makefile error to reproduce system information i am using bitcoin core 230 i am using windows 11 as my operating system and wsl for the terminal"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin core will not compile on windows 11\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue any report issue or feature request related to the gui should be reported at i have ran into several issues during my compiling of bitcoin i have tried to compile this thing but each time i try to do so there is a new issue for reference i am using ubuntu bash terminal to compile bitcoin my operating system is windows 11 and i have tried everything i know to troubleshoot this issue i have downloaded clang mingw g and i will attach the a photo to explain this issue each time i try to use the configure autogensh and sudo make there seems to be issues and this will not compile at all any help will be greatly appreciated thank you ps i have also created a virtual environment and i have installed the necessary tools for it as well bitcoin error i expected the bitcoin core to compile the version of bitcoin core is version 230 i have forked it from the bitcoin github bitcoin page i am using an asus x555y series laptop my operating system is windows 11 configlog"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwalletpassphrase gives error must request wallet rpc through wallet\nwhen issuing an rpc for walletpassphrase the following error is returned file not specified must request wallet rpc through wallet uripathid0 documentation from here states sample call looks like this as a jsonrpc call curl user myusername databinary jsonrpc 10 id curltest method walletpassphrase params my pass phrase 60 h contenttype textplain eg no wallet in the rpc further my issue stems from wallet names with embedded spaces for example encrypted with space qt allows for the creation of wallet names with spaces and other characters which are not valid in a uri at least as plain text the cli functions as expected when issued with the rpcwallet parameter and allows for spaces because the wallet name is enclosed in double quotes at a minimum the docs should reflect the proper usage of the rpc call however its unclear how support for wallet names with internal spaces would be supported at all given the current design a better design would be to add the wallet name as a parameter in the array to avoid using different uris which is inconsistent with the usage of all other rpcs in core btc 021"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmultiplication result may overflow\ni believe there is chance of overflow due to multiplication in this line of code"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet address issue\ngood time i have bitcoin core wallet fully update it whenever i try to do sending using the wallet the address box alwayes become red color how this issue can be resolved pls i need help thank u so much"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncannot sync with limited ram and swap\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue any report issue or feature request related to the gui should be reported at while syncing headers with bitcoinqt my device runs out of memory i have a computer with only 1gb of ram and no swap while syncing headers it runs out of memory approximately 600000 headers is where it runs out i expected to be able to sync all the headers and then start downloadingverifying the blockchain while syncing the headers my device runs out of memory i can reproduce this issue every time simply start the bitcoinqt application and wait until it runs out of memory at approximately 600000 headers debian package 2201 orange pi one cpu h3 quadcore cortexa7 h265hevc 4k drive 256gb microsd this issue is probably caused because all the headers are stored in ram eventually this will become a problem with common lower end computers even if they have swap when the index becomes too large it is an important issue to consider so that cheap nodes can be run in third world countries to ensure good decentralization of the network"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nubuntu jammy cant compile fuzz tests with libc\nsteps to reproduce on a fresh ubuntu install export apt update apt install curl wget htop git vim ccache y git clone bitcoincore cd bitcoincore apt install buildessential libtool autotoolsdev automake pkgconfig bsdmainutils python3zmq libeventdev libboostsystemdev libboosttestdev clang llvm libcdev libcabidev y autogensh configure ccclang cxxclang stdliblibc enablefuzz withsanitizersfuzzer make jnproc ubuntu focal passes ubuntu jammy fails checking whether the linker accepts fsanitizefuzzer no configure error linker did not accept requested flags you are missing required libraries"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndoes the txcount obtained by getwalletinfo represent the number of transaction hashes\nthe length of the array obtained by listtransaction and the value obtained by txcount are different careful observation revealed duplicate txids"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nimportprivkey this type of wallet does not support this command\nwhen i run importprivkey it returns unsupported wallet instead of importing code bitcoincli importprivkey privkey label false error code 4 error message this type of wallet does not support this command version bitcoincli version bitcoin core rpc client version v229909d099b02d8f0 node fully synced full node chain main blocks 716934 headers 716934 verification progress 999999 difficulty 2427233199697997 image"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncannot install bitcoin v220 on ubuntu 2004 with current berkeley db version 1814\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue a fresh install of bitcoin v220 is not going through on ubuntu 2004 with an underlying fresh install of berkeley db version 1814 the same error was obtained on two completely unrelated systems expected behavior no error on installation actual behavior the following error console making all in src make1 entering directory make2 entering directory make3 entering directory make3 leaving directory cxxld bitcoind usrbinld in function repmgrnetctext0x247 undefined reference to usrbinld repmgrnetctext0x252 undefined reference to usrbinld repmgrnetctext0x25d undefined reference to x509storectxgeterror usrbinld repmgrnetctext0x28c undefined reference to x509getissuername usrbinld repmgrnetctext0x29c undefined reference to x509nameoneline usrbinld repmgrnetctext0x2be undefined reference to x509getsubjectname usrbinld repmgrnetctext0x2ce undefined reference to x509nameoneline usrbinld repmgrnetctext0x2f0 undefined reference to usrbinld in function repmgrnetctext0x446 undefined reference to sslfree usrbinld in function repmgrsetsslctx repmgrnetctext0x138d undefined reference to opensslinitssl usrbinld repmgrnetctext0x1399 undefined reference to opensslinitssl usrbinld repmgrnetctext0x13a5 undefined reference to opensslinitcrypto usrbinld repmgrnetctext0x13b1 undefined reference to tlsmethod usrbinld repmgrnetctext0x13b9 undefined reference to sslctxnew usrbinld repmgrnetctext0x13d9 undefined reference to sslctxsetverify usrbinld repmgrnetctext0x13f6 undefined reference to sslctxsetcipherlist usrbinld repmgrnetctext0x147b undefined reference to usrbinld repmgrnetctext0x14ee undefined reference to usrbinld repmgrnetctext0x1502 undefined reference to usrbinld repmgrnetctext0x1512 undefined reference to usrbinld repmgrnetctext0x1530 undefined reference to usrbinld repmgrnetctext0x1541 undefined reference to usrbinld repmgrnetctext0x1584 undefined reference to sslctxsetverifydepth usrbinld repmgrnetctext0x1600 undefined reference to sslctxfree usrbinld repmgrnetctext0x174d undefined reference to sslctxfree usrbinld in function repmgrsslaccept repmgrnetctext0x1842 undefined reference to sslnew usrbinld repmgrnetctext0x1858 undefined reference to sslsetfd usrbinld repmgrnetctext0x1874 undefined reference to errclearerror usrbinld repmgrnetctext0x187c undefined reference to sslaccept usrbinld repmgrnetctext0x18cf undefined reference to sslisinitfinished usrbinld repmgrnetctext0x18fb undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x1905 undefined reference to sslgeterror usrbinld repmgrnetctext0x19c0 undefined reference to sslfree usrbinld repmgrnetctext0x19c5 undefined reference to errclearerror usrbinld in function repmgrsslconnect repmgrnetctext0x1c53 undefined reference to sslnew usrbinld repmgrnetctext0x1c71 undefined reference to sslsetfd usrbinld repmgrnetctext0x1c76 undefined reference to errclearerror usrbinld repmgrnetctext0x1c7e undefined reference to sslconnect usrbinld repmgrnetctext0x1cd8 undefined reference to sslisinitfinished usrbinld repmgrnetctext0x1cfb undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x1d06 undefined reference to sslgeterror usrbinld repmgrnetctext0x1d5c undefined reference to sslnew usrbinld repmgrnetctext0x1e7a undefined reference to sslfree usrbinld in function repmgrsslshutdown repmgrnetctext0x20c4 undefined reference to errclearerror usrbinld repmgrnetctext0x20cc undefined reference to sslshutdown usrbinld repmgrnetctext0x20f3 undefined reference to sslshutdown usrbinld repmgrnetctext0x20fb undefined reference to sslfree usrbinld repmgrnetctext0x221b undefined reference to errprinterrorsfp usrbinld in function repmgrsslwrite repmgrnetctext0x2d72 undefined reference to errclearerror usrbinld repmgrnetctext0x2d80 undefined reference to sslwrite usrbinld repmgrnetctext0x2e03 undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x2e0e undefined reference to sslgeterror usrbinld in function repmgrsslreadv repmgrnetctext0x4e2d undefined reference to errclearerror usrbinld repmgrnetctext0x4e64 undefined reference to sslread usrbinld repmgrnetctext0x4e76 undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x4e82 undefined reference to sslgeterror usrbinld repmgrnetctext0x4eb6 undefined reference to sslshutdown usrbinld repmgrnetctext0x4ffa undefined reference to sslpending usrbinld repmgrnetctext0x5042 undefined reference to sslpending usrbinld repmgrnetctext0x51be undefined reference to sslshutdown usrbinld in function repmgrnetctext0x5325 undefined reference to sslpending usrbinld in function repmgrconnwork undefined reference to sslpending usrbinld undefined reference to sslpending usrbinld in function repmgrreadfromsite repmgrselctext0x3e58 undefined reference to sslpending collect2 error ld returned 1 exit status make2 makefile5933 bitcoind error 1 make2 leaving directory make1 makefile16186 allrecursive error 1 make1 leaving directory make makefile821 allrecursive error 1 to reproduce i followed a flow inspired from this gist 1 install all required dependencies bash sudo apt install buildessential libtool autotoolsdev autoconf pkgconfig libssldev libboostalldev libminiupnpcdev libzmq3dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5dev qttools5devtools libprotobufdev protobufcompiler libqrencodedev 2 get and install current berkeley db version bash cd mntprojectscrypto wget tar xvzf db18140targz cd db18140buildunix mkdir distconfigure disableshared enablecxx withpic prefixbdbprefix mkdir docsbdbsql docsgsgdbserver sudo make install 3 get the latest bitcoin stable version and install bash cd mntprojectscrypto git clone cd bitcoin git checkout v220 autogensh mkdir configure o2 ldflagslbdbprefixlib withgui withincompatiblebdb withzmq enablezmq 4 get the error console making all in src make1 entering directory make2 entering directory make3 entering directory make3 leaving directory cxxld bitcoind usrbinld in function repmgrnetctext0x247 undefined reference to usrbinld repmgrnetctext0x252 undefined reference to usrbinld repmgrnetctext0x25d undefined reference to x509storectxgeterror usrbinld repmgrnetctext0x28c undefined reference to x509getissuername usrbinld repmgrnetctext0x29c undefined reference to x509nameoneline usrbinld repmgrnetctext0x2be undefined reference to x509getsubjectname usrbinld repmgrnetctext0x2ce undefined reference to x509nameoneline usrbinld repmgrnetctext0x2f0 undefined reference to usrbinld in function repmgrnetctext0x446 undefined reference to sslfree usrbinld in function repmgrsetsslctx repmgrnetctext0x138d undefined reference to opensslinitssl usrbinld repmgrnetctext0x1399 undefined reference to opensslinitssl usrbinld repmgrnetctext0x13a5 undefined reference to opensslinitcrypto usrbinld repmgrnetctext0x13b1 undefined reference to tlsmethod usrbinld repmgrnetctext0x13b9 undefined reference to sslctxnew usrbinld repmgrnetctext0x13d9 undefined reference to sslctxsetverify usrbinld repmgrnetctext0x13f6 undefined reference to sslctxsetcipherlist usrbinld repmgrnetctext0x147b undefined reference to usrbinld repmgrnetctext0x14ee undefined reference to usrbinld repmgrnetctext0x1502 undefined reference to usrbinld repmgrnetctext0x1512 undefined reference to usrbinld repmgrnetctext0x1530 undefined reference to usrbinld repmgrnetctext0x1541 undefined reference to usrbinld repmgrnetctext0x1584 undefined reference to sslctxsetverifydepth usrbinld repmgrnetctext0x1600 undefined reference to sslctxfree usrbinld repmgrnetctext0x174d undefined reference to sslctxfree usrbinld in function repmgrsslaccept repmgrnetctext0x1842 undefined reference to sslnew usrbinld repmgrnetctext0x1858 undefined reference to sslsetfd usrbinld repmgrnetctext0x1874 undefined reference to errclearerror usrbinld repmgrnetctext0x187c undefined reference to sslaccept usrbinld repmgrnetctext0x18cf undefined reference to sslisinitfinished usrbinld repmgrnetctext0x18fb undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x1905 undefined reference to sslgeterror usrbinld repmgrnetctext0x19c0 undefined reference to sslfree usrbinld repmgrnetctext0x19c5 undefined reference to errclearerror usrbinld in function repmgrsslconnect repmgrnetctext0x1c53 undefined reference to sslnew usrbinld repmgrnetctext0x1c71 undefined reference to sslsetfd usrbinld repmgrnetctext0x1c76 undefined reference to errclearerror usrbinld repmgrnetctext0x1c7e undefined reference to sslconnect usrbinld repmgrnetctext0x1cd8 undefined reference to sslisinitfinished usrbinld repmgrnetctext0x1cfb undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x1d06 undefined reference to sslgeterror usrbinld repmgrnetctext0x1d5c undefined reference to sslnew usrbinld repmgrnetctext0x1e7a undefined reference to sslfree usrbinld in function repmgrsslshutdown repmgrnetctext0x20c4 undefined reference to errclearerror usrbinld repmgrnetctext0x20cc undefined reference to sslshutdown usrbinld repmgrnetctext0x20f3 undefined reference to sslshutdown usrbinld repmgrnetctext0x20fb undefined reference to sslfree usrbinld repmgrnetctext0x221b undefined reference to errprinterrorsfp usrbinld in function repmgrsslwrite repmgrnetctext0x2d72 undefined reference to errclearerror usrbinld repmgrnetctext0x2d80 undefined reference to sslwrite usrbinld repmgrnetctext0x2e03 undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x2e0e undefined reference to sslgeterror usrbinld in function repmgrsslreadv repmgrnetctext0x4e2d undefined reference to errclearerror usrbinld repmgrnetctext0x4e64 undefined reference to sslread usrbinld repmgrnetctext0x4e76 undefined reference to errprinterrorsfp usrbinld repmgrnetctext0x4e82 undefined reference to sslgeterror usrbinld repmgrnetctext0x4eb6 undefined reference to sslshutdown usrbinld repmgrnetctext0x4ffa undefined reference to sslpending usrbinld repmgrnetctext0x5042 undefined reference to sslpending usrbinld repmgrnetctext0x51be undefined reference to sslshutdown usrbinld in function repmgrnetctext0x5325 undefined reference to sslpending usrbinld in function repmgrconnwork undefined reference to sslpending usrbinld undefined reference to sslpending usrbinld in function repmgrreadfromsite repmgrselctext0x3e58 undefined reference to sslpending collect2 error ld returned 1 exit status make2 makefile5933 bitcoind error 1 make2 leaving directory make1 makefile16186 allrecursive error 1 make1 leaving directory make makefile821 allrecursive error 1 system information bitcoin core v220 from github cf commands above tested on both ubuntu 2004 as host system no vm and ubuntu 2004 as guest system as vm please note this was highly reproducible as fresh install on two different ubuntu 2004 systems"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc getnetworkinfo subversion has spurious trailing 0\nreported by k9ert confirmed on the 220x branch bitcoincli getnetworkinfo version 220000 subversion satoshi2200 cc achow101"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nevent2bufferh file not found\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue any report issue or feature request related to the gui should be reported at what behavior did you expect building bitcoincore on macos bigsur 116 mac mini m1 2020 what was the actual behavior provide screenshots if the issue is guirelated make hostarmappledarwin20 fails cxx fatal error event2bufferh file not found include 1 error generated make2 error 1 make1 allrecursive error 1 make allrecursive error 1 how reliably can you reproduce the issue what are the steps to do so cd depends make cd autogensh export configure withboostboostroot make hostarmappledarwin20 what version of bitcoin core are you using where did you get it website selfcompiled etc did a git pull today nov 20 2021 what type of machine are you observing the error on oscpu and disk type macos bigsur 116 mac mini m1 2020 guirelated issue what is your operating system and its version if linux what is your desktop environment and graphical shell not a gui related issue"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\na bug the wallet passphrase entered was incorrect\nhi im new to bitcoin so i just start to use bitcoin core on my ubuntu server i first created 2 wallet one of which is called testwallet bitcoincli createwallet testwallet false false false false true however when i try to unlock it for 60s bitcoincli rpcwallettestwallet walletpassphrase test1234567 60 error returned error code 14 error message error the wallet passphrase entered was incorrect its a little bit confusing because another one wallet seemed to be normal is it because i use one more wallets here is the environment of my machine and bitcoincore uname a linux 540050400generic 201911242031 smp mon nov 25 013510 utc 2019 x8664 x8664 x8664 gnulinux bitcoincli getnetworkinfo version 220000 subversion satoshi2200 protocolversion 70016 localservices 0000000000000409 localservicesnames network witness networklimited localrelay true timeoffset 0 networkactive true connections 10 connectionsin 0 connectionsout 10 networks name ipv4 limited false reachable true proxy false name ipv6 limited false reachable true proxy false name onion limited true reachable false proxy false name i2p limited true reachable false proxy false relayfee 000001000 incrementalfee 000001000 localaddresses warnings hope somebody could help thanks a lot"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nin file included from fatal error charconv no such file\nhello i have a trouble make3 выход из каталога cxx cxx bitcoindbitcoindo in file included from fatal error charconv нет такого файла или каталога include compilation terminated makefile11830 recipe for target failed make2 error 1 make2 ожидание завершения заданий… in file included from netaddressh190 from chainparamsh11 from bitcoindcpp10 fatal error charconv нет такого файла или каталога include compilation terminated what i have to do ubuntu 1804 x64 nogui"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhow to quicken the make process after modifing the codes\nhello i am just learning the bitcoin codes of version bitcoin020 so i compiled the codes for a very long time to generate the bitcoind and so on after a period of learning i want to modify some codes in order to verify some ideas by the way i run the bitcoin on my wsl of the windows10 however i found the makefile period is a very long time despite i only modify one sentence codes hence would you please tell me how to quicken the make process after modifing the bitcoin codes thank you very much"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\n300gb of blockchain in dir prune is set to 20gb\ni assume its just rubbish from old client versions of bitcoin core how to identify files that are not used any more"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nis listtransactions correct\nubuntuenvironment bitcoincli datadirbtcdir testnet rpcwallettomo2 listtransactions address category receive amount 000010000 label user1 vout 0 confirmations 12 blockhash blockheight 2062825 blockindex 91 blocktime 1627916153 txid walletconflicts time 1627915291 timereceived 1627915291 bip125replaceable no address category receive amount 000010000 label user2 vout 1 confirmations 12 blockhash blockheight 2062825 blockindex 113 blocktime 1627916153 txid walletconflicts time 1627915300 timereceived 1627915300 bip125replaceable no address category send amount 000010000 vout 1 fee 000000208 confirmations 9 blockhash blockheight 2062828 blockindex 102 blocktime 1627918629 txid walletconflicts time 1627917768 timereceived 1627917768 bip125replaceable no abandoned false address category send amount 000005000 vout 0 fee 000000141 confirmations 9 blockhash blockheight 2062828 blockindex 103 blocktime 1627918629 txid walletconflicts time 1627918027 timereceived 1627918027 bip125replaceable no abandoned false address category send amount 000001000 vout 1 fee 000000141 confirmations 3 blockhash blockheight 2062834 blockindex 25 blocktime 1627920653 txid walletconflicts time 1627920400 timereceived 1627920400 bip125replaceable no comment coomentmove abandoned false address category send amount 000001000 vout 0 fee 000000141 confirmations 2 blockhash blockheight 2062835 blockindex 78 blocktime 1627920941 txid walletconflicts time 1627920839 timereceived 1627920839 bip125replaceable no comment coomenttomove abandoned false ubuntuenvironment bitcoincli datadirbtcdir testnet rpcwallettomo2 listtransactions 3 3 address category receive amount 000010000 label user1 vout 0 confirmations 12 blockhash blockheight 2062825 blockindex 91 blocktime 1627916153 txid walletconflicts time 1627915291 timereceived 1627915291 bip125replaceable no address category receive amount 000010000 label user2 vout 1 confirmations 12 blockhash blockheight 2062825 blockindex 113 blocktime 1627916153 txid walletconflicts time 1627915300 timereceived 1627915300 bip125replaceable no address category send amount 000010000 vout 1 fee 000000208 confirmations 9 blockhash blockheight 2062828 blockindex 102 blocktime 1627918629 txid walletconflicts time 1627917768 timereceived 1627917768 bip125replaceable no abandoned false i want to skip 3 past transactions however it seems that the three latest transactions have been eliminated is this the correct behavior ideal bitcoincli listtransactions 20 100 list transactions 100 to 120 realty bitcoincli listtransactions 20 100 list transactions 0 to 20 20210802t132329z bitcoin core version v0211 release build"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncannot sign a transaction with p2wshp2sh while using\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue any report issue or feature request related to the gui should be reported at im creating a raw transaction using the rpc command createrawtransaction when im signing the transaction with the rpc command im receiving the following error response code 500 responsemessage internal server error response does not match scriptpubkeyid1 when im using the transaction signed and sent correctly bitcoin version 021 os linuxwindows"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrate limits for ping rpc\nissue what are the rate limits for ping rpc which was added in if no rate limits do we need them what behavior did you expect i was expecting some errors in bitcoind or maybe peers ban my node based on the rate limits mentioned in i added a ratelimit to rpcrequested ping so that it will limit to 1second per peer the regular automated keepalive ping is immune to this but this comment says there is no rate limit got rid of the idea of ratelimiting userrequested rpc pings that simplifies a chunk of code what was the actual behavior no errors peers did not ban my node i was sending 50100 ping per second how reliably can you reproduce the issue what are the steps to do so its easy to reproduce everyone can use different ways to send ping i used the below steps 1 run bitcoind with bitcoinconf testnet1 server1 testrpcport18444 rpcuseruser3 rpcpasswordpassword3 2 use intruder in burp suite to brute force and send ping rpc with different id in each request request post http11 host 12700118444 authorization basic dxnlcjm6cgfzc3dvcmqz contenttype textplain contentlength 68 jsonrpc 10 id curltest method ping params 3 check peers with netinfo and getpeerinfo keep an eye on bitcoind for errors bitcoincli netinfo bitcoin core v21990bb4790816d84 testnet 70016satoshi21990 ipv4 ipv6 onion total block in 0 0 1 1 out 6 0 4 10 2 total 6 0 5 11 local addresses port 18333 score 4 getpeerinfo requests sent at 06 jul 2021 172801 gmt 72111 72028 83 first image last image bitcoin core version bitcoin core v21990bb4790816d84 had compiled yesterday for testing pr 17355 what type of machine are you observing the error on oscpu and disk type linux popos as vm related question"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nthe 2 block relay connections dont seem to be providing any value\nin all my time running the code where 2 block relays are allocated i have never seen them receiving any blocks its always the full relay nodes that are receiving the blocks perhaps i am misunderstanding the purpose of these 2 connections but so far i am seeing no benefit in them my understanding was that they were in some way more likely to be ready to receive a block than the full delay nodes but this is not what happens from several weeks of observation"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nneed help understanding parts of spanh\nhi in spanh you define a strange macro could someone please tell me the reasoning behind this it doesnt seem to be mentionned in the comments maybe i overlooked it the reason i dont understand is that it as far as i know does not have to change anything whatsoever in terms of code generation static initialization can happen without constexpr in fact its a sneaky way to introduce bugs whenever you have a global stdmap… its a lot of fun but i digress then we have this now im very confused is this checking if an incomplete type is convertible to another incomplete type i dont know how that template could possibly do anything else its not checking if t is implicitly convertible to c is it i dont know what that does why is it only constexpr when not in debug why is it only doing this rather important looking assertion in debug does it become valid to violate that assertion in prod why it seems odd and bug prone thank you for your time"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nexception\ni got this message when i run bitcoind exception boost filesytem createdirectory file exists homesatsbitcoin bitcoind chainparambasecpp36 const cbasechainparams base params assertion failed aborted core dumped any ideas whats happening"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwhy dont we have more checkpoints\nis your feature request related to a problem please describe srcchainparamscpp146 has few checkpoints for the mainnet using a table of block and blockhash why does it end at block 295000 describe the solution youd like either add a comment with an explanation for given number checkpoints or add checkpoints at an agreed block interval describe alternatives youve considered additional context screen shot 20210509 at 8 58 49 am"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfailed to start bitcoind using ubuntu 2010\nhey i keep getting this error when i run sudo systemctl start bitcoindservice job for bitcoindservice failed because the control process exited with error code see systemctl status bitcoindservice and journalctl xe for details when i input sudo journalctl xe i get this ░░ the job identifier is 6033 abr 15 161636 satsdesktop bitcoind7207 error error parsing command line arguments invalid parameter daemonwait abr 15 161636 satsdesktop systemd1 bitcoindservice control process exited codeexited status1failure ░░ subject unit process exited ░░ definedby systemd ░░ support ░░ ░░ an execstart process belonging to unit bitcoindservice has exited ░░ ░░ the process exit code is exited and its exit status is 1 abr 15 161636 satsdesktop systemd1 bitcoindservice failed with result exitcode ░░ subject unit failed ░░ definedby systemd ░░ support ░░ ░░ the unit bitcoindservice has entered the failed state with result exitcode abr 15 161636 satsdesktop systemd1 failed to start bitcoin daemon ░░ subject a start job for unit bitcoindservice has failed ░░ definedby systemd ░░ support ░░ ░░ a start job for unit bitcoindservice has finished with a failure ░░ ░░ the job identifier is 6033 and the job result is failed abr 15 161636 satsdesktop systemd1 bitcoindservice scheduled restart job restart counter is at 5 ░░ subject automatic restarting of a unit has been scheduled ░░ definedby systemd ░░ support ░░ ░░ automatic restarting of the unit bitcoindservice has been scheduled as the result for ░░ the configured restart setting for the unit abr 15 161636 satsdesktop systemd1 stopped bitcoin daemon ░░ subject a stop job for unit bitcoindservice has finished ░░ definedby systemd ░░ support ░░ ░░ a stop job for unit bitcoindservice has finished ░░ ░░ the job identifier is 6113 and the job result is done abr 15 161636 satsdesktop systemd1 bitcoindservice start request repeated too quickly abr 15 161636 satsdesktop systemd1 bitcoindservice failed with result exitcode ░░ subject unit failed ░░ definedby systemd ░░ support ░░ ░░ the unit bitcoindservice has entered the failed state with result exitcode abr 15 161636 satsdesktop systemd1 failed to start bitcoin daemon ░░ subject a start job for unit bitcoindservice has failed ░░ definedby systemd ░░ support ░░ ░░ a start job for unit bitcoindservice has finished with a failure ░░ ░░ the job identifier is 6113 and the job result is failed lines 184118941894 end when i input systemctl status bitcoindservice i get this bitcoindservice bitcoin daemon loaded loaded enabled vendor preset enabled active failed result exitcode since thu 20210415 141316 cest 21min ago docs process 5604 daemonwait codeexited status1failure abr 15 141316 satsdesktop systemd1 bitcoindservice scheduled restart job restart counter is at 5 abr 15 141316 satsdesktop systemd1 stopped bitcoin daemon abr 15 141316 satsdesktop systemd1 bitcoindservice start request repeated too quickly abr 15 141316 satsdesktop systemd1 bitcoindservice failed with result exitcode abr 15 141316 satsdesktop systemd1 failed to start bitcoin daemon some idea how can i solve the problem"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\npsbt strange behavior\nhi i am trying to setup a coldcard to work airgapped with bitcoin core via sd card latest bitcoin core 0210 and latest coldcard firmware used expected behavior i create a watchonly nondescriptor wallet and i execute the importmulti command created by coldcard 2x5000 addresses i do a two simple 1in 1 out test transactions mainnet all looks good core exports the psbt file 600 bytes coldcard signs it and creates the final txn 400 bytes all good i believe the exported unsigned psbt should stay small but its not actual behavior nothing changed i mean core closed and reopened few hours later thats all new tx arrives in trying to do the same spend and psbt export exported psbt file is now 176 kilobytes see attached partial file psbtpartialtxt takes minutes while coldcard digs through all of that and finally signs the one used and produces a 400 bytes txn with the one input one output nothing fancy is going on no multisig used no nothing why does core include a lotall addresses in a psbt also its not doing it at the beginning to reproduce create a watchonly nondescriptor wallet and i execute the importmulti command created by coldcard 2x5000 addresses importdescriptors range 0 5000 timestamp now active true watchonly true desc internal false range 0 5000 timestamp now active true watchonly true desc internal true check you received the correct addresses from core make two receive and send full amount transaction tofrom on other wallet now you should see the huge psbt file now i have done this from scratch with bip44 and bip84 addresses and both suffer from the same issue system information core v0210 from download amd 2920x win10 x64"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoins im jahr 2009 hier angelegt komme nicht mehr drauf zu\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue expected behavior actual behavior to reproduce system information"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nuse of testmempoolaccept is not clear testmempoolaccept yields unexpected error\nexpected behavior i would expect to get no error message when using testmempoolaccept on a raw transaction that decodes just fine using decoderawtransaction or at least a hint at what went wrong actual behavior getrawtransaction decoderawtransaction txid testmempoolaccept error error parsing json to reproduce probably always reproducible with confirmed transactions system information bitcoin core 0181 tgz 0200 snap and tgz"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncannot generate change address on descriptor wallets\ni am trying to create an unsigned transaction in a wallet that contains a 3 of 7 public key descriptor expected behavior to be able to send half a utxo and bitcoin core to handle the change address generation actual behavior instead i get this error on clicking create unsigned transaction needs a change address but we cant generate it please call keypoolrefill first to reproduce to create descriptor 1 create a standard wallet using bitcoin core 2 run getnewaddress to generate an address 3 run dumpprivkey using the address previously generated to get a wif key 4 xor the wif key with 256 1s to create a unique keynot to add security or randomness 4 create a new standard wallet and run sethdseed with the modified wif key 5 dump the second wallet to get the xpriv 6 repeat steps 25 to generate 7 xprivs 7 using the xprivs create the 3 of 7 descriptor example below remove from the above string 8 in the first wallet run getdescriptorinfo to both generate the checksum for the xpriv descriptor and the xpub descriptor itself to reproduce error 1 create a descriptor wallet with disabled private keys 2 import the public key descriptor with importdescriptors example bellow importdescriptors timestamp now active true remove from the above string 3 click create new receiving address in the bitcoin core ui 4 send a small amount to the address 5 in the send tab enter a recipient and then attempt to send half of the original amount sent to the address 6 you should get an error transaction needs a change address but we cant generate it please call keypoolrefill first system info i am using ubuntu 20 with bitcoin core 0210 rc3"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncant sync signet using 021rc3\ni downloaded from bitcoincoreorgbin and ran it with no prior bitcoin folder output bitcoind signet 20201212t153904z bitcoin core version v0210rc3 release build 20201212t153904z signet derived magic message start 0a03cf40 20201212t153904z assuming ancestors of block have valid signatures 20201212t153904z setting 20201212t153904z using the sha256 implementation 20201212t153904z using rdseed as additional entropy source 20201212t153904z using rdrand as an additional entropy source 20201212t153904z default data directory hometwitchbitcoin 20201212t153904z using data directory 20201212t153904z config file not found skipping 20201212t153904z commandline arg signet 20201212t153904z using at most 125 automatic connections 1024 file descriptors available 20201212t153904z using 16 mib out of 322 requested for signature cache able to store 524288 elements 20201212t153904z using 16 mib out of 322 requested for script execution cache able to store 524288 elements 20201212t153904z script verification uses 7 additional threads 20201212t153905z scheduler thread start 20201212t153905z http creating work queue of depth 16 20201212t153905z using random cookie authentication 20201212t153905z generated rpc authentication cookie 20201212t153905z http starting 4 worker threads 20201212t153905z using wallet directory 20201212t153905z init message verifying wallets 20201212t153905z init message loading banlist 20201212t153905z error deserializefiledb failed to open file 20201212t153905z invalid or missing banlistdat recreating 20201212t153905z setnetworkactive true 20201212t153905z using 16 prefix for ip bucketing 20201212t153905z cache configuration 20201212t153905z using 20 mib for block index database 20201212t153905z using 80 mib for chain state database 20201212t153905z using 4400 mib for inmemory utxo set plus up to 2861 mib of unused mempool space 20201212t153905z init message loading block index 20201212t153905z switching active chainstate to chainstate ibd height 1 null 20201212t153905z opening leveldb in 20201212t153905z opened leveldb successfully 20201212t153905z using obfuscation key for 0000000000000000 20201212t153905z loadblockindexdb last block file 0 20201212t153905z loadblockindexdb last block file info size0 heights00 time1970010119700101 20201212t153905z checking all blk files are present 20201212t153905z initializing databases 20201212t153905z preallocating up to position 0x1000000 in blk00000dat 20201212t153905z opening leveldb in 20201212t153905z opened leveldb successfully 20201212t153905z wrote new obfuscate key for 170005111e9356f3 20201212t153905z using obfuscation key for 170005111e9356f3 20201212t153905z init message rewinding blocks 20201212t153905z block index 34ms 20201212t153905z loadblk thread start 20201212t153905z updatetip new height0 version0x00000001 log2work22206105 tx1 date20200901t000000z progress0000064 cache00mib0txo 20201212t153905z block tree size 1 20201212t153905z nbestheight 0 20201212t153905z failed to open mempool file from disk continuing anyway 20201212t153905z loadblk thread exit 20201212t153905z torcontrol thread start 20201212t153905z bound to 38333 20201212t153905z bound to 000038333 20201212t153905z bound to 12700138334 20201212t153905z init message loading p2p addresses 20201212t153905z error deserializefiledb failed to open file 20201212t153905z invalid or missing peersdat recreating 20201212t153905z error deserializefiledb failed to open file 20201212t153905z 0 blockrelayonly anchors will be tried for connections 20201212t153905z init message starting network threads 20201212t153905z dnsseed thread start 20201212t153905z loading addresses from dns seed 2a017c8d0053905 20201212t153905z net thread start 20201212t153905z init message done loading 20201212t153905z opencon thread start 20201212t153905z addcon thread start 20201212t153905z msghand thread start 20201212t153905z loading addresses from dns seed 178128221177 20201212t153905z loading addresses from dns seed 20201212t153905z 0 addresses found from dns seeds 20201212t153905z dnsseed thread exit 20201212t153906z new outbound peer connected version 70016 blocks15726 peer0 fullrelay 20201212t153906z cannot create socket for unsupported network 20201212t154006z adding fixed seed nodes as dns doesnt seem to be available if i switch back to rc2 it works fine i expect rc3 to sync but it doesnt"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngeneratetoaddress blocks dont include txes from mempool\ni mined in offline mode 101 test blocks then i try to send some test coins on other wallet coins stay unconfirmed even after 14 new blocks made by generatetoaddress command in console expected behavior generated blocks by command generatetoaddress include txes from mempool actual behavior all new blocks made by generatetoaddress command have only one tx it dont use mempool to reproduce 1 run new installation of bitcoin core in offline mode 2 generate 101 blocks by command in console generatetoaddress 102 getnewaddress 1 3 create new wallet and send some coins on it 4 generate more blocks by command in console generatetoaddress 10 getnewaddress 1 system information v01901"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncompilecommandsjson generated error with ccls under vim mode\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue autogensh configure withoutgui compliedb n make when i use vim to open the project the are some warning information display as follow wx20201111174002 which are all about c standard library does it have relationship to makefile which was auto generated by autopensh expected behavior no error display actual behavior to reproduce system information bitcoin version commitid"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nq csmain protection for referencing mblockmangchainman\nwhile making my deglobalize chainstatemanager changes i noticed something that i wasnt sure what to make of both the global instance of chainstatemanager gchainman and the blockmanager member of gchainman are protected by csmain this means that changes like the following where im simply passing a blockmanager to a function have to add an awkward withlock in order to appease thread safety analysis examples 1 d227dfe 20158 2 f8e91ed 20158 however im not entirely sure if these csmain protections should be required for referencing these objects themselves especially since chainstatemanager and blockmanagerss member variablesfunctions are already well annotated wre locks any insights would be useful"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest failure in alpine linux ensure adding witness outputs with uncompressed pubkeys fails\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue expected behavior pass the test actual behavior failed the test to reproduce run make check creates a new transaction with a single 2of3 multisig in a p2wsh output creates a new transaction with a single 2of3 multisig in a p2wsh output output in json creates a new transaction with a single 2of3 multisig in a p2wsh output wrapped in p2sh creates a new transaction with a single 2of3 multisig in a p2wsh output wrapped in p2sh output in json uncompressed pubkeys should work just fine for nonwitness outputs ensure adding witness outputs with uncompressed pubkeys fails make3 makefile19028 checklocal error 1 make3 leaving directory make2 makefile17578 checkam error 2 make2 leaving directory make1 makefile17263 checkrecursive error 1 make1 leaving directory make makefile781 checkrecursive error 1 error bitcoin check failed system information bitcoin 0201 alpine linux edge 3121 currently lxc container"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoincli does not include wallet functionalities when compiling dependencies\nbehavior when compiling bitcoin on linux 64bit ubuntu 20041 lts git clone git checkout v0201 autogensh cd depends make noqt1 cd configure withguino disabletests disableguitests make make install getnewaddress expected behaviour shows getnewaddress help actual behaviour error code 32601 error message method not found none of the wallet commands are available i understand that the wallet feature should enabled by default did i mess up a step configlog this file contains any messages produced by compilers while running configure to aid debugging if configure makes a mistake it was created by bitcoin core configure 0201 which was generated by gnu autoconf 269 invocation command line was configure withguino disabletests disableguitests enablewallet platform hostname nuc uname m x8664 uname r 54047generic uname s linux uname v 51ubuntu smp fri sep 4 195052 utc 2020 usrbinuname p unknown binuname x unknown binarch unknown usrbinarch k unknown usrconvexgetsysinfo unknown usrbinhostinfo unknown binmachine unknown usrbinoslevel unknown binuniverse unknown path homedantebin path varlibgems18bin path homedantecargobin path homedantebin path homedantebin path varlibgems18bin path usrlocalsbin path usrlocalbin path usrsbin path usrbin path sbin path bin path usrgames path usrlocalgames path snapbin path sbin path path sbin path usrlocalscripts path usrlocalbin path homedantegobin path sbin path path sbin path usrlocalscripts path usrlocalbin core tests configure2943 loading site script dependsprefixdirname acsitefile crosscompilingmaybe if test z withboost then fi if test z withqtplugindir then fi if test z withqttranslationdir then fi if test z withqtbindir test z 1 then fi if test z withqrencode test n then withqrencodeno fi if test z enablewallet test n then enablewalletno fi if test z withminiupnpc test n then withminiupnpcno fi if test z withgui test n 1 then withguino fi if test z enablezmq test n then enablezmqno fi if test xlinux xdarwin then brewno portno fi if test xlinux xmingw32 then if test z withqtincdir then fi if test z withqtlibdir then fi fi pkgconfigwhich pkgconfig static these two need to remain exported because pkgconfig does not see them otherwise that means they must be unexported at the end of configureac to avoid ruining the cache sigh export if test z then export fi cppflags ldflags if test n gcc m64 a z cc then ccgcc m64 fi if test n g m64 a z cxx then cxxg m64 fi if test n ar then arar accvpathacptarar fi if test n ranlib then ranlibranlib fi if test n nm then nmnm accvpathacptnmnm fi if test n then fi if test n pipe o2 then cflagspipe o2 cflags fi if test n pipe o2 then cxxflagspipe o2 cxxflags fi if test n then cppflags cppflags fi if test n then ldflags ldflags fi configure3088 checking build system type configure3102 result x8664pclinuxgnu configure3122 checking host system type configure3135 result x8664pclinuxgnu configure3178 checking for a bsdcompatible install configure3246 result usrbininstall c configure3257 checking whether build environment is sane configure3312 result yes configure3369 checking for x8664pclinuxgnustrip configure3399 result no configure3409 checking for strip configure3425 found usrbinstrip configure3436 result strip configure3461 checking for a threadsafe mkdir p configure3500 result binmkdir p configure3507 checking for gawk configure3523 found usrbingawk configure3534 result gawk configure3545 checking whether make sets make configure3567 result yes configure3596 checking whether make supports nested variables configure3613 result yes configure3732 checking whether to enable maintainerspecific portions of makefiles configure3741 result yes configure3766 checking whether make supports nested variables configure3783 result yes configure3912 checking for c compiler version configure3921 g m64 version 5 g ubuntu 93010ubuntu2 930 copyright c 2019 free software foundation inc this is free software see the source for copying conditions there is no warranty not even for merchantability or fitness for a particular purpose configure3932 0 configure3921 g m64 v 5 using builtin specs collectgccg target x8664linuxgnu configured with srcconfigure v withpkgversionubuntu 93010ubuntu2 prefixusr programsuffix9 enableshared enablelinkerbuildid libexecdirusrlib enablethreadsposix libdirusrlib enablenls enableclocalegnu enablelibstdcxxdebug disablevtableverify enableplugin enabledefaultpie withsystemzlib enableobjcgcauto enablemultiarch disablewerror witharch32i686 withabim64 enablemultilib withtunegeneric withoutcudadriver buildx8664linuxgnu hostx8664linuxgnu targetx8664linuxgnu thread model posix gcc version 930 ubuntu 93010ubuntu2 configure3932 0 configure3921 g m64 v 5 g error unrecognized command line option v g fatal error no input files compilation terminated configure3932 1 configure3921 g m64 qversion 5 g error unrecognized command line option qversion did you mean version g fatal error no input files compilation terminated configure3932 1 configure3952 checking whether the c compiler works configure3974 g m64 pipe o2 conftestcpp 5 configure3978 0 configure4026 result yes configure4029 checking for c compiler default output file name configure4031 result aout configure4037 checking for suffix of executables configure4044 g m64 o conftest pipe o2 conftestcpp 5 configure4048 0 configure4070 result configure4092 checking whether we are cross compiling configure4100 g m64 o conftest pipe o2 conftestcpp 5 configure4104 0 configure4111 conftest configure4115 0 configure4103 result no configure4108 checking for suffix of object files configure4130 g m64 c pipe o2 conftestcpp 5 configure4134 0 configure4155 result o configure4159 checking whether we are using the gnu c compiler configure4178 g m64 c pipe o2 conftestcpp 5 configure4178 0 configure4187 result yes configure4196 checking whether g m64 accepts g configure4216 g m64 c g conftestcpp 5 configure4216 0 configure4257 result yes configure4283 checking whether make supports the include directive configure4298 make f confmfgnu cat confincout this is the amdoit target configure4301 0 configure4320 result yes gnu style configure4345 checking dependency style of g m64 configure4456 result gcc3 configure4494 checking whether g m64 supports c11 features with stdc11 configure4790 g m64 stdc11 c pipe o2 conftestcpp 5 configure4790 0 configure4799 result yes configure4843 checking whether stdatomic can be used without link library configure4861 g m64 stdc11 o conftest pipe o2 conftestcpp 5 configure4861 0 configure4863 result yes configure4932 checking for x8664pclinuxgnug configure4959 result g m64 stdc11 configure5028 checking for objective c compiler version configure5037 g m64 stdc11 version 5 g ubuntu 93010ubuntu2 930 copyright c 2019 free software foundation inc this is free software see the source for copying conditions there is no warranty not even for merchantability or fitness for a particular purpose configure5048 0 configure5037 g m64 stdc11 v 5 using builtin specs collectgccg target x8664linuxgnu configured with srcconfigure v withpkgversionubuntu 93010ubuntu2 prefixusr programsuffix9 enableshared enablelinkerbuildid libexecdirusrlib enablethreadsposix libdirusrlib enablenls enableclocalegnu enablelibstdcxxdebug disablevtableverify enableplugin enabledefaultpie withsystemzlib enableobjcgcauto enablemultiarch disablewerror witharch32i686 withabim64 enablemultilib withtunegeneric withoutcudadriver buildx8664linuxgnu hostx8664linuxgnu targetx8664linuxgnu thread model posix gcc version 930 ubuntu 93010ubuntu2 configure5048 0 configure5037 g m64 stdc11 v 5 g error unrecognized command line option v g fatal error no input files compilation terminated configure5048 1 configure5037 g m64 stdc11 qversion 5 g error unrecognized command line option qversion did you mean version g fatal error no input files compilation terminated configure5048 1 configure5052 checking whether we are using the gnu objective c compiler configure5071 g m64 stdc11 c conftestmm 5 g fatal error cannot execute cc1objplus execvp no such file or directory compilation terminated configure5071 1 configure failed program was confdefsh define packagename bitcoin core define packagetarname bitcoin define packageversion 0201 define packagestring bitcoin core 0201 define packagebugreport define packageurl define havecxx11 1 end confdefsh int main ifndef gnuc choke me endif return 0 configure5080 result no configure5089 checking whether g m64 stdc11 accepts g configure5109 g m64 stdc11 c g conftestmm 5 g fatal error cannot execute cc1objplus execvp no such file or directory compilation terminated configure5109 1 configure failed program was confdefsh define packagename bitcoin core define packagetarname bitcoin define packageversion 0201 define packagestring bitcoin core 0201 define packagebugreport define packageurl define havecxx11 1 end confdefsh int main return 0 configure5124 g m64 stdc11 c conftestmm 5 g fatal error cannot execute cc1objplus execvp no such file or directory compilation terminated configure5124 1 configure failed program was confdefsh define packagename bitcoin core define packagetarname bitcoin define packageversion 0201 define packagestring bitcoin core 0201 define packagebugreport define packageurl define havecxx11 1 end confdefsh int main return 0 configure5140 g m64 stdc11 c g conftestmm 5 g fatal error cannot execute cc1objplus execvp no such file or directory compilation terminated configure5140 1 configure failed program was confdefsh define packagename bitcoin core define packagetarname bitcoin define packageversion 0201 define packagestring bitcoin core 0201 define packagebugreport define packageurl define havecxx11 1 end confdefsh int main return 0 configure5150 result no configure5175 checking dependency style of g m64 stdc11 configure5284 result gcc3 configure5348 checking how to print strings configure5375 result printf configure5404 checking for x8664pclinuxgnugcc configure5431 result gcc m64 configure5700 checking for c compiler version configure5709 gcc m64 version 5 gcc ubuntu 93010ubuntu2 930 copyright c 2019 free software foundation inc this is free software see the source for copying conditions there is no warranty not even for merchantability or fitness for a particular purpose configure5720 0 configure5709 gcc m64 v 5 using builtin specs collectgccgcc target x8664linuxgnu configured with srcconfigure v withpkgversionubuntu 93010ubuntu2 prefixusr programsuffix9 enableshared enablelinkerbuildid libexecdirusrlib enablethreadsposix libdirusrlib enablenls enableclocalegnu enablelibstdcxxdebug disablevtableverify enableplugin enabledefaultpie withsystemzlib enableobjcgcauto enablemultiarch disablewerror witharch32i686 withabim64 enablemultilib withtunegeneric withoutcudadriver buildx8664linuxgnu hostx8664linuxgnu targetx8664linuxgnu thread model posix gcc version 930 ubuntu 93010ubuntu2 configure5720 0 configure5709 gcc m64 v 5 gcc error unrecognized command line option v gcc fatal error no input files compilation terminated configure5720 1 configure5709 gcc m64 qversion 5 gcc error unrecognized command line option qversion did you mean version gcc fatal error no input files compilation terminated configure5720 1 configure5724 checking whether we are using the gnu c compiler configure5743 gcc m64 c pipe o2 conftestc 5 configure5743 0 configure5752 result yes configure5761 checking whether gcc m64 accepts g configure5781 gcc m64 c g conftestc 5 configure5781 0 configure5822 result yes configure5839 checking for gcc m64 option to accept iso c89 configure5902 gcc m64 c pipe o2 conftestc 5 configure5902 0 configure5915 result none needed configure5940 checking whether gcc m64 understands c and o together configure5962 gcc m64 c conftestc o conftest2o configure5965 0 configure5962 gcc m64 c conftestc o conftest2o configure5965 0 configure5977 result yes configure5996 checking dependency style of gcc m64 configure6107 result gcc3 configure6122 checking for a sed that does not truncate output configure6186 result binsed configure6204 checking for grep that handles long lines and e configure6262 result bingrep configure6267 checking for egrep configure6329 result bingrep e configure6334 checking for fgrep configure6396 result bingrep f configure6431 checking for ld used by gcc m64 configure6498 result usrbinld configure6505 checking if the linker usrbinld is gnu ld configure6520 result yes configure6532 checking for bsd or mscompatible name lister nm configure6586 result nm configure6716 checking the name lister nm interface configure6723 gcc m64 c pipe o2 conftestc 5 configure6726 nm conftesto configure6729 output 0000000000000000 b somevariable configure6730 result bsd nm configure6733 checking whether ln s works configure6737 result yes configure6745 checking the maximum length of command line arguments configure6876 result 1572864 configure6924 checking how to convert x8664pclinuxgnu file names to x8664pclinuxgnu format configure6964 result funcconvertfilenoop configure6971 checking how to convert x8664pclinuxgnu file names to toolchain format configure6991 result funcconvertfilenoop configure6998 checking for usrbinld option to reload object files configure7005 result r configure7039 checking for configure7069 result no configure7079 checking for objdump configure7095 found usrbinobjdump configure7106 result objdump configure7138 checking how to recognize dependent libraries configure7338 result passall configure7383 checking for configure7413 result no configure7423 checking for dlltool configure7453 result no configure7483 checking how to associate runtime and link libraries configure7510 result printf sn configure7527 checking for x8664pclinuxgnuar configure7554 result ar configure7635 checking for archiver file support configure7652 gcc m64 c pipe o2 conftestc 5 configure7652 0 configure7655 ar cr libconftesta conftestlst 5 configure7658 0 configure7663 ar cr libconftesta conftestlst 5 ar conftesto no such file or directory configure7666 1 configure7665 result configure7683 checking for x8664pclinuxgnustrip configure7710 result strip configure7782 checking for configure7809 result ranlib configure7951 checking command to parse nm output from gcc m64 object configure8104 gcc m64 c pipe o2 conftestc 5 configure8107 0 configure8111 nm conftesto sed n e s abcdgirstwabcdgirstw azazazaz091 2 2p sed gnultod conftestnm configure8177 gcc m64 o conftest pipe o2 conftestc conftstmo 5 configure8180 0 configure8218 result ok configure8265 checking for sysroot configure8295 result no configure8302 checking for a working dd configure8340 result bindd configure8344 checking how to truncate binary pipes configure8359 result bindd bs4096 count1 configure8495 gcc m64 c pipe o2 conftestc 5 configure8498 0 configure8648 checking for x8664pclinuxgnumt configure8678 result no configure8688 checking for mt configure8704 found binmt configure8715 result mt configure8738 checking if mt is a manifest tool configure8744 mt configure8752 result no configure9429 checking how to run the c preprocessor configure9460 gcc m64 e conftestc configure9460 0 configure9474 gcc m64 e conftestc conftestc1010 fatal error acnonexistenth no such file or directory 10 include compilation terminated configure9474 1 configure failed program was confdefsh define packagename bitcoin core define packagetarname bitcoin define packageversion 0201 define packagestring bitcoin core 0201 define packagebugreport define packageurl define havecxx11 1 end confdefsh include configure9499 result gcc m64 e configure9519 gcc m64 e conftestc configure9519 0 configure9533 gcc m64 e conftestc conftestc1010 fatal error acnonexistenth no such file or directory 10 include compilation terminated configure9533 1 configure failed program was confdefsh define packagename bitcoin core define packagetarname bitcoin define packageversion 0201 define packagestring bitcoin core 0201 define packagebugreport define packageurl define havecxx11 1 end confdefsh include configure9562 checking for ansi c header files configure9582 gcc m64 c pipe o2 conftestc 5 configure9582 0 configure9655 gcc m64 o conftest pipe o2 conftestc 5 configure9655 0 configure9655 conftest configure9655 0 configure9666 result yes configure9679 checking for systypesh configure9679 gcc m64 c pipe o2 conftestc 5 configure9679 0 configure9679 result yes configure9679 checking for sysstath configure9679 gcc m64 c pipe o2 conftestc 5 configure9679 0 configure9679 result yes configure9679 checking for stdlibh configure9679 gcc m64 c pipe o2 conftestc 5 configure9679 0 configure9679 result yes configure"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfreebsd 121 build broken\nconfigure withguino disabletests disablewallet makegmake cxxld benchbenchbitcoin usrlocalbinld in function setupenvironment undefined reference to const usrlocalbinld undefined reference to const collect2 error ld returned 1 exit status gmake2 makefile7354 bitcointx error 1 gmake2 waiting for unfinished jobs usrlocalbinld in function setupenvironment undefined reference to const usrlocalbinld undefined reference to const collect2 error ld returned 1 exit status gmake2 makefile7350 bitcoincli error 1 usrlocalbinld in function setupenvironment undefined reference to const usrlocalbinld undefined reference to const collect2 error ld returned 1 exit status gmake2 makefile7362 bitcoind error 1 usrlocalbinld in function setupenvironment undefined reference to const usrlocalbinld undefined reference to const collect2 error ld returned 1 exit status gmake2 makefile7346 benchbenchbitcoin error 1 gmake2 leaving directory gmake1 makefile17262 allrecursive error 1 gmake1 leaving directory gmake makefile780 allrecursive error 1"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhow to reproduce werrorsigncompare failures locally\ni tried gcc and clang but those failures wont show for me see while i like the warning and error if developers cant see them on their boxes it makes it tedious to fix those issues up"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngetmediantimepast can it be optimized with a simple index 5\ni was working on an blockchain indexer and explorer and as i was trying to figure out how to calculate the returned mediantime from the getblockchaininfo i realized that the value is not what i was expecting it to be this was in an c implementation of similar code to bitcoin so i initially thought it was a bug in the net implementation then i had a look at the c implementation and to me it appears to be the same static constexpr int nmediantimespan 11 int64t getmediantimepast const int64t int64t pbegin int64t pend const cblockindex pindex this for int i 0 i pprev pbegin pindexgetblocktime stdsortpbegin pend return pbeginpend pbegin2 from what i can understand the method loops backwards through the blocks from the current block populates the block time into an array sort it its already sorted then picks the middle one 5 and returns that is that correctly assumed wouldnt simply selecting index 5 do the exact same thing of course one would need to calculate for genesis and the first 10 blocks but thats easy i was expecting this method to do something else namely take the diff time not the timestamp between each block then picking the middle one which would give the average time between each block for the last 10 blocks another quick way to calculate would be take getblocktime from the block 10 indexes back diff with current block and divide by 10 should give one type of average the current code populates an array of 10 timestamps but it only picks the one in the middle there is no reason to populate it with 10 timestamps as the 5 oldest are not used for anything it also doesnt use or calculatecare about any of the other blocks so if the last 5 blocks took 1 hour 10 minutes 10 minutes 10 minutes 10 minutes 10 minutes 10 minutes 10 minutes 10 minutes 10 minutes then getmediantimepast will return a timestamp 1 hour and 40 minutes back in time from current block i understand median is correct name for the method it returns the middle of the sorted numbers but is the numbers to be sorted suppose to be time between blocks datediff and not the actual timestamps the mediantime returned is also not the time between blocks it is the time 5 blocks back which is why im wondering why not simply grab the datetime of the block 5 indexes back instead for for me to show the median time between blocks in the block explorer i must take blocktime mediantime 5 from what i know i think the calculate is used for consensusmining and not suppose to be what im after average block time i can calculate that another way but i stumbled upon this and initially thought it to be something else and thought it could maybe be improved a bit is that the way it is suppose to work or am i not able to read the code properly thanks"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrunning full profiler\nhow can i run a profiler to get the timings on each function of the overall executable looking to find out which functions are running slow and to look more into them"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbip 152 status\nim not sure where to put this issue anyway reading bip 152 thats active in the protocol i see it has a status reported as draft for someone like me thats trying to implement the protocol following the specification its already difficult to dodge the official dev documentation with its dated and even wrong informations and reading bips its not clear if a bip is included or not for sure in a protocol without checking the code id expect official bips having at least a correct status reported but as just said bip 152 is reported as draft that sounds confusing and probably wrong image as a side note whats the most updated reference not mentioning the code currently available thanks"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nosx mojave 10146 build fails compiling univalue\ngit pull origin go in to srcunivalue autogensh configure make make clean and two different coins attempted with same results osx 10146 mojave please advise if this is incompatibility or if im missing something gcc v configured with apple clang version 1100 clang110003312 target x8664appledarwin1870 thread model posix installeddir full output autogensh glibtoolize putting auxiliary files in acconfigauxdir buildaux glibtoolize copying file buildauxltmainsh glibtoolize putting macros in acconfigmacrodirs buildauxm4 glibtoolize copying file buildauxm4libtoolm4 glibtoolize copying file glibtoolize copying file buildauxm4ltsugarm4 glibtoolize copying file glibtoolize copying file configure configureac45 installing buildauxcompile configureac45 installing buildauxconfigguess configureac45 installing buildauxconfigsub configureac28 installing buildauxinstallsh configureac28 installing buildauxmissing makefileam installing buildauxdepcomp paralleltests installing buildauxtestdriver machecking whether make supports nested variables yes checking for a bsdcompatible install usrbininstall c checking whether build environment is sane yes kchecking for a threadsafe mkdir p buildauxinstallsh c d checking for gawk no checking for mawk no checking for nawk no checking for awk awk checking whether make sets make yes echecking build system type x8664appledarwin1870 checking host system type x8664appledarwin1870 checking how to print strings printf checking whether make supports the include directive yes gnu style checking for gcc gcc checking whether the c compiler works yes checking for c compiler default output file name aout checking for suffix of executables checking whether we are cross compiling no checking for suffix of object files o checking whether we are using the gnu c compiler yes checking whether gcc accepts g yes checking for gcc option to accept iso c89 none needed checking whether gcc understands c and o together yes checking dependency style of gcc gcc3 checking for a sed that does not truncate output usrbinsed checking for grep that handles long lines and e usrbingrep checking for egrep usrbingrep e checking for fgrep usrbingrep f checking for ld used by gcc checking if the linker is gnu ld no checking for bsd or mscompatible name lister nm usrlocalbinnm b checking the name lister usrlocalbinnm b interface bsd nm checking whether ln s works yes checking the maximum length of command line arguments 196608 checking how to convert x8664appledarwin1870 file names to x8664appledarwin1870 format funcconvertfilenoop checking how to convert x8664appledarwin1870 file names to toolchain format funcconvertfilenoop checking for option to reload object files r checking for objdump objdump checking how to recognize dependent libraries passall checking for dlltool dlltool checking how to associate runtime and link libraries printf sn checking for ar ar checking for archiver file support checking for strip strip checking for ranlib ranlib checking command to parse usrlocalbinnm b output from gcc object ok checking for sysroot no checking for a working dd bindd checking how to truncate binary pipes bindd bs4096 count1 checking for mt no checking if is a manifest tool no checking for dsymutil dsymutil checking for nmedit nmedit checking for lipo lipo checking for otool otool checking for otool64 no checking for singlemodule linker flag yes checking for exportedsymbolslist linker flag yes checking for forceload linker flag no checking how to run the c preprocessor gcc e checking for ansi c header files yes checking for systypesh yes checking for sysstath yes checking for stdlibh yes checking for stringh yes checking for memoryh yes checking for stringsh yes checking for inttypesh yes checking for stdinth yes checking for unistdh yes checking for dlfcnh yes checking for objdir libs checking if gcc supports fnortti fnoexceptions yes checking for gcc option to produce pic fnocommon dpic checking if gcc pic flag fnocommon dpic works yes checking if gcc static flag static works no checking if gcc supports c o fileo yes checking if gcc supports c o fileo cached yes checking whether the gcc linker supports shared libraries yes checking dynamic linker characteristics darwin1870 dyld checking how to hardcode library paths into programs immediate checking whether stripping libraries is possible yes checking if libtool supports shared libraries yes checking whether to build shared libraries yes checking whether to build static libraries yes checking for g g checking whether we are using the gnu c compiler yes checking whether g accepts g yes checking dependency style of g gcc3 checking how to run the c preprocessor g e checking for ld used by g checking if the linker is gnu ld no checking whether the g linker supports shared libraries yes checking for g option to produce pic fnocommon dpic checking if g pic flag fnocommon dpic works yes checking if g static flag static works no checking if g supports c o fileo yes checking if g supports c o fileo cached yes checking whether the g linker supports shared libraries yes checking dynamic linker characteristics darwin1870 dyld checking how to hardcode library paths into programs immediate checking that generated files are newer than configure done configure creating configstatus configstatus creating makefile configstatus creating pclibunivaluepc configstatus creating configstatus creating univalueconfigh configstatus executing depfiles commands configstatus executing libtool commands make allam cxx testobjectobjecto cxx cxx cxx cxx cxxld libunivaluela ar u modifier ignored since d is the default see u cxxld testobject ld warning ignoring file libslibunivaluea building for macosx8664 but attempting to link with file built for unknownunsupported file format 0x21 0x3c 0x61 0x72 0x63 0x68 0x3e 0x0a 0x2f 0x20 0x20 0x20 0x20 0x20 0x20 0x20 undefined symbols for architecture x8664 const referenced from univaluearray in objectobjecto univaluereadchar const unsigned long referenced from univaluetypecheck in objectobjecto univaluereadwrite in objectobjecto univalueclear referenced from univalueset in objectobjecto univaluearray in objectobjecto univalueobject in objectobjecto std1allocator const univalue const referenced from univalueobject in objectobjecto std1allocator const char const in objectobjecto univaluesetintlong long referenced from univalueset in objectobjecto univalueobject in objectobjecto univalueunivaluelong long in objectobjecto univalueunivalueint in objectobjecto long long referenced from univalueset in objectobjecto long long in objectobjecto std1allocator const referenced from univalueset in objectobjecto univaluearray in objectobjecto std1allocator const in objectobjecto univalueunivaluechar const in objectobjecto const referenced from univalueobject in objectobjecto univaluesetboolbool referenced from univaluetypecheck in objectobjecto univalueset in objectobjecto univalueunivaluebool in objectobjecto univaluesetnull referenced from univalueset in objectobjecto std1allocator const univalue const referenced from univalueobject in objectobjecto univaluesetarray referenced from univalueset in objectobjecto referenced from univalueset in objectobjecto in objectobjecto const referenced from univaluearray in objectobjecto univaluepushbackchar const in objectobjecto std1allocator const referenced from univalueconstructor in objectobjecto univaluetypecheck in objectobjecto univalueset in objectobjecto univaluesetobject referenced from univalueset in objectobjecto univalueobject in objectobjecto std1allocator univaluevtype std1less std1allocator std1allocator std1allocator const univaluevtype const const referenced from univalueobject in objectobjecto int unsigned int const referenced from univaluereadwrite in objectobjecto std1allocator const unsigned long const referenced from univalueobject in objectobjecto univaluegetkeys const referenced from univaluetypecheck in objectobjecto univaluegetint const referenced from univaluetypecheck in objectobjecto univaluegetobj const referenced from univaluetypecheck in objectobjecto univaluegetstr const referenced from univaluetypecheck in objectobjecto univaluegetbool const referenced from univaluetypecheck in objectobjecto univaluegetreal const referenced from univaluetypecheck in objectobjecto std1allocator univalue std1less std1allocator std1allocator std1allocator const univalue const referenced from univalueobject in objectobjecto univaluegetvalues const referenced from univaluetypecheck in objectobjecto univaluegetarray const referenced from univaluetypecheck in objectobjecto univaluegetint64 const referenced from univaluetypecheck in objectobjecto std1allocator const const referenced from univalueobject in objectobjecto univaluereadwrite in objectobjecto long const referenced from univaluearray in objectobjecto univaluereadwrite in objectobjecto ld symbols not found for architecture x8664 clang error linker command failed with exit code 1 use v to see invocation make1 testobject error 1 make all error 2"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nquestion compiling only bitcoind not others\nquestion hi im working on bitcoind to write something to test locally when i type make in the working directorytop directory the compile processcode which is written in makefile is very long time because others are compiled with so this is timeconsuming in my current work id like to compile only bitcoind can i get some guide thanks"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nunable to start bitcoind after power failure\nhi im unable to restart bitcoind after a power failure here is the debuglog error i am getting bitcoinraspberrypi tail f 20191111t164954z opening leveldb in 20191111t164954z fatal leveldb error corruption current file does not end with newline 20191111t164954z you can use debugleveldb to get more complete diagnostic messages 20191111t164954z fatal leveldb error corruption current file does not end with newline 20191111t164954z error opening block database please restart with reindex or reindexchainstate to recover 20191111t164954z aborted block database rebuild exiting 20191111t164954z shutdown in progress 20191111t164954z scheduler thread interrupt 20191111t164954z shutdown done ive tried running bitcoind reindex bitcoin reindexchainstate not sure what i am doing wrong"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmissing entry to install\nbitcoin setup is not successfull on a clean ubuntu system following the install instructions expected behavior i would expect that installation to complete and that my setup is able to build bitcoin actual behavior apparently configure gave this error configure error libdbcxx headers missing bitcoin core requires this library for wallet functionality disablewallet to disable wallet functionality next make does not work make make no targets specified and no makefile found stop system information to reproduce the bitcoin version this happens is fix there are many solutions specified in but for me the woking one was the comment from bellaj sudo addaptrepository ppabitcoinbitcoin sudo aptget update sudo aptget install libdb48dev libdb48dev so i guess this could be added to the ubuntu section of"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet decodepsbt decoderawtransaction should show rbf status\nthe decodepsbt and decoderawtransaction rpc calls return the sequence for each input but id rather not have to manually determine if that implies rbf i mainly care about this for mempool transactions cc instagibbs achow101"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nroundtrip of cpubkey does not necessarily result in an equal object\nwhen fuzzing the serialization code for cpubkey i noticed that obj does not hold true for all cpubkey obj is there any reason to why cpubkey is deviating from the other serializable classes for which equality is defined in this regard context template cdatastream serializeconst t obj cdatastream dssernetwork initprotoversion ds obj return ds template t ds t obj ds obj return obj"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nerror connect econnrefused v0180\nmy config is below the bitcoin core version is v0180 txindex1 server1 rpcuserusername rpcpasswordpassword rpcallowip the ip i connect rpcportport but i got error error connect econnrefused"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nno addresses returned by getnodeaddresses rpc call\nthe issue i am attempting to use the getnodeaddresses rpc call to return all addresses known by a node in a docker network im using the regtest environment the rpc call returns an empty array although nodes have been added on the referent node using the add rpc call expected behavior the getnodeaddresses rpc call should return nodes added via the add rpc call actual behavior no addresses are returned ie an empty array is returned bitcoincli regtest datadirrootbitcoin getnodeaddresses 5 reproduction setup a regtest network of 11 nodes no mining has been done and the bitcoin folder contains only bitcoinconf with the following content regtest regtest1 server1 rpcport8332 port8333 connect to the referent node and run the command bitcoincli regtest datadirrootbitcoin addnode p8333 add where p is the other node address for every node the referent node wants to add run the commands on the referent node bitcoincli regtest datadirrootbitcoin getconnectioncount 10 bitcoincli regtest datadirrootbitcoin getpeerinfo id 2 addr 1000353378 cut out part of response id 11 addr 1000436236 addrbind 100028333 services 000000000000040d relaytxes true lastsend 1569835448 lastrecv 1569835448 bytessent 464 bytesrecv 488 conntime 1569835207 timeoffset 0 pingtime 0001063 minping 0000456 version 70015 subver satoshi0180 inbound true addnode false startingheight 303 banscore 0 syncedheaders 1 syncedblocks 1 inflight whitelisted false minfeefilter 000001000 bytessentpermsg feefilter 32 ping 96 pong 96 sendcmpct 66 sendheaders 24 verack 24 version 126 bytesrecvpermsg feefilter 32 getaddr 24 ping 96 pong 96 sendcmpct 66 sendheaders 24 verack 24 version 126 bitcoincli regtest datadirrootbitcoin getnodeaddresses 5 bitcoin core version bitcoincli version bitcoin core rpc client version bitcoind version bitcoin core daemon version installed via the repository ppabitcoinbitcoin os docker container info lsbrelease a no lsb modules are available distributor id ubuntu description ubuntu 18043 lts release 1804 codename bionic host info lsbrelease a no lsb modules are available distributor id ubuntu description ubuntu 18043 lts release 1804 codename bionic cat proccpuinfo grep name uniq model name intelr coretm i74600m cpu 290ghz 1 tb ssd disk"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nentity too large\nclient error post resulted in a 413 request entity too large response i got error when using decoderawtransaction i already set the postmaxsize 2g and uploadmaxfilesize 2g in phpini in apache i already set the limitrequestbody 104857600 where do i need to change in order to pass this error thank you"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbtc 018 node\nwhy cant docker use rpc commands directly through mount ports as in previous versions does bitcoinconf need special configuration"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeature get utxos for nonwallet addresses\nhey team adding a feature request here for the ability to query all utxos for a given addresss regardless if its in the nodes wallet or not i understand the reasoning here of why its not included outofthebox as it could add a significant amount of overhead to the core requirements of running the node however its fairly concerning that the most of the articles about how to get this functionality just point to using an external api to fetch this info tutorials of how to get this functionality on the developer side are also painful when just trying to get this fairly common feature up and running isnt part of the point of running a full node to be able to get anything you need without the reliance of a third party dont trust verify i would imagine the best implementation for this would be to add a flag in the bitcoinconf of something like indexaddrs1 or something like that anyway just putting the idea out there thanks"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncannot create low fee transaction via rpc\nissue were running bitcoind lnd on a raspberry pi with several other pieces of software because we want bitcoind to be really light weight we set the maxmempool to be 20 mb we dont really care about having mempool data itself but we do care about being able to create transactions and broadcast those transactions to the network the problem weve been running into is that when the mempool is constricted like this 20 mb limit mempoolminfee seams to start out at 000000001 at boot time but then gets larger the longer bitcoind is online we typically create transactions at 1 satperbyte because we dont care about them being validated immediately the problem is were getting this lncli rpc error code unknown desc 26 mempool min fee not met 143 2005 code 66 this error is of course being propagated by bitcoind we set mintxfee to 000000001 and even minrelaytxfee to 000000001 but neither seem to stop mempoolminfee from increasing over time is there anyway to guarantee these transactions always get inserted into the mempool and broadcasted i did some research and it looks like the mempool operates like that to avoid dos attacks but shouldnt rpc calls bypass these ddos issues it makes sense that rpc calls should always work expected behavior there are two appropriate ways i think this could be handled 1 creating a transaction via rpc should always be accepted by the local mempool and broadcasted to peers that will accept that feerate 2 creating a transaction via rpc should always be broadcasted to peers that will accept that feerate actual behavior the rpc call fails with an error message similar to this mempool min fee not met 143 2005 environment we compile our own docker containers important lines from the docker file are below we are also using lnd 070 from ubuntu1804 arg version0180 env binarylink machine info this specifically is happening on a raspberry pi 3b but i believe it is not machine based"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoinconf assumevalid0 does not seem to be working\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue assumevalid0 does not seem to work when it is in the bitcoinconf file but does when set as a cli argument i thought setting this in the config file would be enough to set this value when set in the config file the log says it is still using the default hex value it does work when set as a command line argument screenshot from 20190622 111343 screenshot from 20190622 111326 screenshot from 20190622 110837 just setting the config option without the command line argument recreates the issue i did test my config file by removing the dbcache setting and that was reflected in the logs screenshot from 20190622 112623 screenshot from 20190622 112632 i am using the downloaded release version 180 i am using a laptop with ubuntu and a platter hard drive"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhow to compile and debug the latest version of bitcoin source code with visual studio 2015 or visual studio 2013\nhello everyone my question is how to compile and debug the latest version of bitcoin source code with visual studio 2015 or visual studio 2013"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngetnewaddress always returns same type\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue when i run getnewaddress legacy i expect to get an address starting with a 1 when i run getnewaddress p2shsegwit i expect to get an address starting with a 3 when i run getnewaddress bech32 i expect to get an address starting with bc1 i always get an address starting a 3 another user i know always gets an address starting with a 1 this is reproducible both from command line running bitcoind and also bitcoinqt from bitcoind i type bitcoincli getnewaddress legacy or from bitcoinqt i issue the commands from the debug window console as shown in the screenshot above running version 018 downloaded from im running on macos mojave version 10145 and i always get an address starting with 3 the other user i know runs ubuntu and always gets an address starting with a 1 na"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntransaction fee calculated is only 1 of what it ought to be\nthe transaction fee recommended only seems to be calculating 1 of what it should be and this is causing transactions to hang or not get processed in a timely manner i have spent three lots of coins from my bitcoin core wallet in each case the fee has been set to automatically calculate i do not believe i changed the parameter since installation and it is set to confirmation target time of 60 minutes which when initially writing this was supposed to be 000064232 btckb three transactions lastly a transaction size of 221 bytes 0221 kbytes the expected fee from two weeks ago based on the 000091727 btckb should be about 0000203 however the fee charged is only about 1 of this 000000238 btc seemingly out by a factor of 100 it is now confirmed but attempting to accelerate on failed because the fee was too low secondly a similar small fee of 000000224 btc was applied on a previous transaction two weeks earlier i have no idea of what the calculation btckb would have then been and thirdly a transaction another week earlier had a fee calculated of 000001194 btc or 00000632 btckb i again have no idea of what the btckb was at that time but this is also seemingly out be a factor of 50 or 100 if the calculation is out using mbtc instead of satoshis or some such thing then i worry any sudden change could adversely impact people who have identified the bug and have manually set their btckb value to 100 times what it ought to be any workaround setting the btckb value manually is really worrisome for anyone not using wallets regularly i would worry i could pay 100 time more than i ought to"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhow to get onion addresses for seeds\nthank you emzy however your list doesnt have onion addresses at all originally posted by laanwj in i have no idea why my comandline is dnsseed h dnsseedemzyde n node3emzyde m emzyemzyde p 5353"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoincli doesnt have getnewaddress method\ni have installed bitcoin core running on my local machine i want to create a new address using bitcoincli executing a command as follows then an error message was displayed how can i solve it bitcoincli getnewaddress error code 32601 error message method not found the version of bitcoincore is as follows bitcoincli version bitcoin core rpc client version v01800742f7dd97 the machine running bitcoin core is virtual machine on virtualbox on windows7 the guest os is ubuntu server and version is as follows uname a linux ubuntu 415045generic 48ubuntu smp tue jan 29 162813 utc 2019 x8664 x8664 x8664 gnulinux"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwhy bitcoin core is a monolith\ni dont understand why bitcoin core software was designed as a monolith and not as a microservices architecture now the node the gui the cli the wallet are all in one for example some people dont need the gui others dont need the cli or others dont need the wallet for example some people can install a cli set the node and use it remotely or some people can be take a wallet with a remote node so my question is why the core team deceided a monolith architecture i dont find any reasonable fact for do this"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntransaction broadcasting failed\ncont when i try to broadcast a raw hex transaction all look nice bitcoincli return a transaction id for the sended hex data but i looking on blockchain explorer and nohing happens a my txid not found likely i dont have no one peers that known about it in my debug log i not seen no one rejects for sendedded transaction only invgetdatatx messagesd bitcoin core version os ubuntu 1804 txzip"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwindows mingw error windres f invalid option\nhaving the hardest time figuring out this issue for some reason it seems like its trying to pass f option to windres during the check test f windres i dont see where f is being passed to windres at all i know i know i could just build it on linux but i am trying to bring back an old and this seems to be my last issue im really just stuck with no solution image configlog"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc connection refused\ni see that there has been some configuration updates which is why i am sure i am getting a connection refused i tried searching for an updated bitcoinconf example but couldnt find anything this is the config throwing the error rpcuseruser rpcpasswordpass rpcport10301 rpcthreads64 rpcallowip127001 rpcallowip10003 rpcallowip10002 rpcallowip10004 rpcallowip10007 rpcallowip10008 rpcallowip10009 rpcallowip100010 rpcallowip100011 maxconnections25 daemon1 gen0 alertnotifyecho s mail s bitcoin alert supportxxxxxxx port 6 s"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nquestion minertestscpp with new data\nhi bitcoin devs smiley cpp 4 0xa4a3e223 2 0x15c32f9e 1 0x0375b547 1 0x7004a8a5 2 0xce440296 2 0x52cfe198 1 0x77a72cd0 2 0xbb5d6f84 2 0x83f30c2c 1 0x48a73d5b 1 0xef7dcd01 2 0x6809c6c4 2 0x0883ab3c 1 0x087bbbe2 2 0x2104a814 2 0xdffb6daa i want to do minertests with new data could you tell me how to create new one blockinfo i would especially like to check blockchain data after segwit this data is maybe outdated thinking if i can i would like to reinforce the test data and contribute to this project smile i tried a lot but i could not get the extranonce sob"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoincli console walletpassphrase cant unlock wallet password with some special characters will not work\nbitcoincli console walletpassphrase cant unlock wallet password with some special characters will not work i am trying unlock my wallet by console using walletpassphrase my problem is in my password i have a lot special characters like i tried include before the special characters and did not help can you guys share for me what is considered be a special characters here in bitcoin cli as well could guys give a sample of solve this problem here the commnand i used to open the wallet for 20 minutes was walletpassphrase 1200 so my question is how to fix this problem and make my wallet understand what is special characters and what is not thank you"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncant use signrawtransaction in the new version\nafter i update the latest version of bitcoin core 017 i cant use signrawtransaction to signe my tx my cmd is this bitcoincli rpcuserxxx rpcpasswordxxx rpcportxxx signrawtransaction the log is error code 32 error message signrawtransaction was removed in v018 clients should transition to using and"}, {"role": "assistant", "content": "question"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfix virtual size limit enforcement in transaction package context\nalternative minimal subset of to 1 replace maxpackagesize with maxpackageweight which accounts for additional wu necessary to not exclude default chain limit transactions that would have been accepted individually avoids sigops vbyte confusion 2 pass correct vsize to chain limit evaluations in package context 3 stop overlylarge packages that have no existing mempool ancestors also a bugfix by itself if someone sets nonstandard chain limits this should fix the known issues while not blocking additional refactoring later"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nvalidation fix coins disappearing midpackage evaluation\nwhile we are evaluating a package we split it into subpackages for evaluation currently subpackages all have size 1 except the last one if a subpackage has size 1 we may add a tx to mempool and call limitmempoolsize which evicts transactions if the mempool gets full we handle the case where the justsubmitted transaction is evicted immediately but we dont handle the case in which a transaction from a previous subpackage either just submitted or already in mempool is evicted mainly since the coins created by the evicted transaction are cached in mview we dont realize the utxo has disappeared until asserts that they exist also the returned reports that the transaction is in mempool even though it isnt anymore fix this by not calling limitmempoolsize until the very end and editing the results map with mempool full if things fall out pointed out by instagibbs in on top of the v3 pr"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc in\nis there an existing issue for this x i have searched the existing issues current behaviour crashub in expected behaviour no crash steps to reproduce compile with ubsan srcqtbitcoinqt analyzepsbt relevant log output 0 0x55a94d97befd in int const 1 0x55a94d4648ca in cfeerategetfeeperk const 2 0x55a94d4648ca in const jsonrpcrequest const const summary policyfeeratecpp2963 in how did you obtain bitcoin core compiled from source what version of bitcoin core are you using current master operating system and version linux machine specifications no response"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfuzz mitigate timeout in\nthe slow fuzz seed described in 27799 was just slower than expected not an endless loop ensuring that every anscestor is only processed once speeds up the termination of the graph traversal fixes 27799"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfuzz improve coinselection\nthis pr moves coin creation to its own function called createcoins add coverage for eligibleforspending add coverage for addinputs get result of each algorithm srd knapsack and bnb call createcoins and add into them add coverage for and getinputset using the result of each algorithm srd knapsack and bnb add coverage for merge call srd with the new utxos and if successful try to merge with the previous srd result"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin core compiled with ubuntu focal gcc8 immediately segfaults\nis there an existing issue for this x i have searched the existing issues current behaviour segfault expected behaviour no segfault steps to reproduce fresh install of ubuntu focal export apt update apt install curl wget htop git vim ccache y git clone depth1 bitcoincore cd bitcoincore apt install buildessential libtool autotoolsdev automake pkgconfig bsdmainutils python3zmq libeventdev libboostdev gcc8 g8 y autogensh configure ccgcc8 cxxg8 make j nproc srcbitcoind valgrind srcbitcoind relevant log output valgrind srcbitcoind 19993 memcheck a memory error detector 19993 copyright c 20022017 and gnu gpld by julian seward et al 19993 using valgrind3150 and libvex rerun with h for copyright info 19993 command srcbitcoind 19993 19993 invalid read of size 8 19993 at 0x1fd15f vector stlvectorh567 19993 by 0x1fd15f fspathh209 19993 by 0x1fd18b cmpt fspathh644 19993 by 0x1fd18b destroy stlconstructh98 19993 by 0x1fd18b destroy stlconstructh108 19993 by 0x1fd18b destroy stlconstructh137 19993 by 0x1fd18b destroy stlconstructh206 19993 by 0x1fd18b vector stlvectorh567 19993 by 0x1fd18b fspathh209 19993 by 0x1c5a7c path fsh30 19993 by 0x1c5a7c const clone cold494 systemcpp838 19993 by 0x6057e0 stdallocator bool systemcpp849 19993 by 0x4f557f stdfunction stdallocator stdallocator stdallocator const initcpp24 19993 by 0x1cc16e appinit bitcoindcpp155 19993 by 0x1cc16e main bitcoindcpp266 19993 address 0x2b is not stackd mallocd or recently freed 19993 19993 19993 process terminating with default action of signal 11 sigsegv dumping core 19993 access not within mapped region at address 0x2b 19993 at 0x1fd15f vector stlvectorh567 19993 by 0x1fd15f fspathh209 19993 by 0x1fd18b cmpt fspathh644 19993 by 0x1fd18b destroy stlconstructh98 19993 by 0x1fd18b destroy stlconstructh108 19993 by 0x1fd18b destroy stlconstructh137 19993 by 0x1fd18b destroy stlconstructh206 19993 by 0x1fd18b vector stlvectorh567 19993 by 0x1fd18b fspathh209 19993 by 0x1c5a7c path fsh30 19993 by 0x1c5a7c const clone cold494 systemcpp838 19993 by 0x6057e0 stdallocator bool systemcpp849 19993 by 0x4f557f stdfunction stdallocator stdallocator stdallocator const initcpp24 19993 by 0x1cc16e appinit bitcoindcpp155 19993 by 0x1cc16e main bitcoindcpp266 19993 if you believe this happened as a result of a stack 19993 overflow in your programs main thread unlikely but 19993 possible you can try to increase the size of the 19993 main thread stack using the mainstacksize flag 19993 the main thread stack size used in this run was 8388608 19993 19993 heap summary 19993 in use at exit 122654 bytes in 1182 blocks 19993 total heap usage 2545 allocs 1363 frees 383342 bytes allocated 19993 19993 leak summary 19993 definitely lost 0 bytes in 0 blocks 19993 indirectly lost 0 bytes in 0 blocks 19993 possibly lost 136 bytes in 1 blocks 19993 still reachable 122518 bytes in 1181 blocks 19993 suppressed 0 bytes in 0 blocks 19993 rerun with leakcheckfull to see details of leaked memory 19993 19993 for lists of detected and suppressed errors rerun with s 19993 error summary 1 errors from 1 contexts suppressed 0 from 0 segmentation fault core dumped how did you obtain bitcoin core compiled from source what version of bitcoin core are you using current master operating system and version machine specifications no response"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nissue in p2pibdstallingpy under valgrind\nat with the nativevalgrind job bash test testframeworknode0 debug connecting to 12700112173 outboundfullrelay node0 msghand netprocessingcpp5807 sendmessages net requesting block 21 peer0 node0 msghand netcpp2816 pushmessage net sending getdata 37 bytes peer0 node0 http httpservercpp239 httprequestcb http received a post request for from 12700140916 node0 msghand netprocessingcpp3169 processmessage net received headers 82947 bytes peer1 node0 httpworker0 rpcrequestcpp179 parse rpc threadrpcserver methodaddconnection usercookie node0 httpworker0 netcpp457 connectnode netdebug trying connection 12700112173 lastseen00hrs node0 httpworker0 netcpp2803 cnode net added connection peer2 test testframeworkutils error waituntil failed predicate testfunction lambda selfisconnected test testframework error assertion failed traceback most recent call last file line 134 in main selfruntest file line 77 in runtest p2pidxid file line 663 in file line 467 in waitforconnect timeouttimeout lockp2plock file line 281 in waituntilhelper raise not true after timeout assertionerror predicate testfunction lambda selfisconnected not true after 600 seconds test testframework debug closing down network thread test testframeworkutils error waituntil failed predicate not timeouttimeout node0 msghand netprocessingcpp2760 net protecting outbound peer1 from eviction node0 msghand netcpp2816 pushmessage net sending sendheaders 0 bytes peer1"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nuse of a wallet shouldnt be blocked in prune mode wallet loading failed beyond pruned data\nit is impossible to load and use a wallet neither in bitcoinqt gui nor consolerpc commands the wallet is only about 2 weeks old and typical settings are used data pruned to 2 gb expected behavior a wallet is loaded either manually or automatically on startup and addresses are shown in bitcoinqt successful execution of wallet rpc commands eg getwalletinfo dumpwallet etc not different from the way it had worked and looked the previous time a user started bitcoin core actual behavior wallet loading failed prune wallet loading failed prune last wallet synchronisation goes beyond pruned data you need to reindex download the whole blockchain again in case of pruned node also rpc commands fail for example loadwallet getwalletinfo dumpwallet except for listwallets to reproduce 1 start bitcoinqt 2 select fileopen walletwallet name reproducible every time in prune mode the wallet was created at the time for which data were pruned the wallet was created in bitcoinqt system information official binary bitcoin core 2401 windows 11"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncore stops to run with failed to read block error\nexpected behavior while my node was running it get an internal failure that force it to stop the running 20230221t232922z syncing basic block filter index with block chain from height 624447 20230221t232934z error serializefiledb renameintoplace failed 20230221t232952z syncing basic block filter index with block chain from height 624889 20230221t233022z error readblockfromdisk deserialize or io error readcompactsize size too large iostream error at flatfileposnfile2030 npos82255446 20230221t233022z threadsync failed to read block from disk 20230221t233022z error a fatal internal error occurred see debuglog for details the code is based on the commit to reproduce no idea how i can reproduce it now i switch to the tagged version to see if this happens too system information ➜ bitcoin gitmaster neofetch metgg vincentx86 gp gp y os debian gnulinux 11 bullseye x8664 p host optiplex 3050 p ggs b kernel 510021amd64 d p uptime 5 days 16 hours 33 mins p d p packages 502 dpkg d shell zsh 58 yb dp terminal devpts1 y yp cpu intel i57500t 4 3300ghz b gpu intel hd graphics 630 y memory 2214mib 7840mib y b yb yb"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nerror timeout on transient error could not connect to the server 1270018333 error code 1 eof reached\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue when im trying to use bitcoincli while bitcoind running it displays error message error timeout on transient error could not connect to the server 1270018333 error code 1 eof reached make sure the bitcoind server is running and that you are connecting to the correct rpc port running command bitcoincli getblockchaininfo bitcoind txindex 20230217t180320z bound to 1270018334 20230217t180320z bound to 8333 20230217t180320z bound to 00008333 i am on macos ventura 131 intel i5 macbook pro 20230217t180307z bitcoin core version v2401 release build i saw a related issue few years ago and apparently this issue should to be patched"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndecodescript miniscript functionality tops out at 520 bytes\nafter miniscript is extracted from compatible scripts unless the check for maxscriptelementsize fails which then it falls back to legacy behavior achow101"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc getdescriptorinfo shouldnt output undefined value of the descriptor\nexpected behavior descriptor checksum tdkpah70 isrange false issolvable true hasprivatekeys true actual behavior descriptor checksum tdkpah70 isrange false issolvable true hasprivatekeys true to reproduce execure the rpc command eg getdescriptorinfo system information bitcoin 2401"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet passphrases silently ignore everything after a null character\nproblem encrypting a wallet through json rpc or qt appears to allow a user to include null characters in the passphrase but silently ignores everything including and after the first null character for instance on regtest trying to set a passphrase of anull characterb curl user cookie databinary jsonrpc 10 idcurltest method encryptwallet params au0000b h contenttype textplain this will succeed but allow the user to unlock with the passphrase a instead of the expected full passphrase which also works curl user cookie databinary jsonrpc 10 idcurltest method walletpassphrase params a10 h contenttype textplain i am also able to replicate it in qt on my macos machine by running printf a0b pbcopy and pasting the result into the passphrase dialog my main concern is a user thinking that theyre generating say 32 random bytes as a passphrase and if theyre unlucky and get a zero in the first few bytes it unexpectedly cuts their security down to almost nothing root cause the reason is due to our securestring type securestring is a stdstring specialization with a secure allocator however when assigned its treated like a c string no explicit length and nullterminated see the original pr for more details potential solutions i think there are two plausible approaches to take the first and my preference is to allow and support null characters and i will submit a pr that enables that by making securestring use the entire string the second is to explicitly reject any passphrases that contain null characters one significant complication may be that if anyone is already using a passphrase with a null then my first solution would stop their wallet from unlocking however it would still be unlockable just by trimming the null and any subsequent characters"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nevery other change address is unused\nim seeing 50 of generated change addresses not being used its as if two are reserved for every one that is used this is happening in version v2401 heres a sequence of commands that shows what i mean only the odd numbered change hdkeypaths are used binrm fr bitcoinregtest bitcoinqt regtest bitcoincli regtest createwallet 1 devnull bitcoincli regtest createwallet 2 devnull bitcoincli regtest rpcwallet1 generate 1 devnull bitcoincli regtest rpcwallet2 generate 100 devnull tobitcoincli regtest rpcwallet2 getnewaddress txsfor i in 15 do bitcoincli regtest rpcwallet1 sendtoaddress to 1 done addrsfor i in txs do bitcoincli regtest getrawtransaction i true jq mc done grep v 1 jq r addr for a in addrs do bitcoincli regtest rpcwallet1 getaddressinfo a jq r hdkeypath done m841011 m841013 m841015 m841017 m841019 this happens whether or not i create descriptor wallets for example with a descriptor wallet i get these descriptors for the change addresses and for a legacy wallet i get these"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\n\n"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest formattruncation warning in dbwrappertests\ncompiling master at on ubuntu 2210 with depends cpp cxx in member function ‘void error ‘d’ directive output may be truncated writing between 1 and 11 bytes into a region of size 10 365 snprintfbuf sizeofbuf d x note directive argument in the range 2147483648 9 365 snprintfbuf sizeofbuf d x in file included from usrincludestdioh906 from from from from from clientversionh30 from dbwrapperh8 from in function ‘int snprintfchar sizet const char ’ inlined from ‘void at note ‘builtinsnprintfchk’ output between 2 and 12 bytes into a destination of size 10 54 return builtinsnprintfchk s n usefortifylevel 1 55 glibcobjsize s fmt 56 vaargpack i ran with enablewerror otherwise its merely a warning cc achow101"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nprivate key import result with 3 address generation\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue private key import result with 3 address generation expected behavior therefore it seems a bug but also future request assumes that as bitcoin address generation has choice of version like segwit or leacy the private key import should result within the setup actual behavior generates 3 types wallet like legacy segwit and p2pkh to reproduce system information"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbuild xproto fails to install on\nbash staging xproto make1 entering directory making install in specs make2 entering directory making install in siaddresses make3 entering directory make4 entering directory make4 nothing to be done for installexecam make4 nothing to be done for installdataam make4 leaving directory make3 leaving directory make3 entering directory make4 entering directory make4 nothing to be done for installexecam make4 leaving directory make3 leaving directory make2 leaving directory make2 entering directory make3 entering directory make3 nothing to be done for installexecam installsh c d installsh c d installsh c d mkdir cant create directory file exists mkdir cant create directory file exists make3 makefile487 error 1 make3 waiting for unfinished jobs usrbininstall c m 644 xprotopc usrbininstall c m 644 apkeysymh deckeysymh hpkeysymh keysymdefh keysymh sunkeysymh xallocah xarchh xatomh xdefsh xf86keysymh xfuncsh xh xmdh xosdefsh xosh xosrh xprotoh xprotostrh xthreadsh xw32defsh xwdfileh xwindowsh xwinsockh make3 leaving directory make2 makefile838 installam error 2 make2 leaving directory make1 makefile535 installrecursive error 1 make1 leaving directory make funcsmk289 error 2 make leaving directory bitcoindepends does not happen when building just the package"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nintermittent issue in error 30974 opening database environment dbrunrecovery fatal error run database recovery\nwget tar xvf c tail 525 head 13 node2 httpworker2 walletbdbcpp145 open node2 httpworker2 walletbdbcpp172 open error 30974 opening database environment dbrunrecovery fatal error run database recovery test testframework error jsonrpc error traceback most recent call last file line 134 in main selfruntest file line 185 in runtest file line 49 in call returnval kwargs file line 146 in call raise status wallet file verification failed error initializing wallet database environment this error could occur if this wallet was not shutdown cleanly and was last loaded using a build with a newer version of berkeley db if so please use the software that last loaded this wallet 4"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\np2ppermissions intermittent timeout\nsh wget tar xvf p2ppermissionstarxz c p2ppermissions15 tail 131 head 33 test testframeworkutils error waituntil failed predicate selfwaituntillambda txid in test testframework error assertion failed traceback most recent call last file line 134 in main selfruntest file line 34 in runtest selfchecktxrelay file line 128 in checktxrelay selfwaituntillambda txid in file line 732 in waituntil return timeouttimeout file line 281 in waituntilhelper raise not true after timeout assertionerror predicate selfwaituntillambda txid in not true after 24000 seconds"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest sqlite tests on freebsd fail with modulenotfounderror no module named sqlite3\nit would be good if the test was skipped instead or if the documentation explained how to install pysqlite 126256 walletdescriptorpy descriptors failed duration 0 s stdout stderr traceback most recent call last file line 7 in import sqlite3 file line 57 in from sqlite3dbapi2 import file line 27 in from sqlite3 import modulenotfounderror no module named sqlite3"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin core startup is interrupted if there is the setting mintxfee0 in bitcoinconf\nexpected behavior it is expected that bitcoin core is not shutdown automatically during startup moreover it should be possible to set transaction fee at 0 actual behavior bitcoin core error mintxfee to reproduce 1 click bitcoinqtexe system information 1 a wallet that contained unspent funds was opened previously 2 the bitcoinconf file contains mintxfee0 3 bitcoin core 2401 official binary for windows portable"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncontribinstalldb4sh script fails on freebsd\nrunning contribinstalldb4sh to download and build libdb4 for legacy wallet support fails on freebsd contribinstalldb4sh pwd sha256sum option requires an argument c usage sha256sum pqrtx c file s string files this is on freebsd 131 fixed by 26772"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nintermittent failure in toolwalletpy\n"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoindservice start request repeated too quickly\nim obtaining the following error when initializing bitcoind service × bitcoindservice bitcoin daemon loaded loaded enabled vendor preset enabled active failed result exitcode since sat 20221217 174809 03 5min ago process 1141 daemon confhomesatoshisna cpu 24ms dez 17 174809 nakamoto systemd1 bitcoindservice scheduled restart job restart counter is at 5 dez 17 174809 nakamoto systemd1 stopped bitcoin daemon dez 17 174809 nakamoto systemd1 bitcoindservice start request repeated too quickly dez 17 174809 nakamoto systemd1 bitcoindservice failed with result exitcode dez 17 174809 nakamoto systemd1 failed to start bitcoin daemon bitcoindservice file it is not recommended to modify this file inplace because it will be overwritten during package upgrades if you want to add further options or overwrite existing ones then use systemctl edit bitcoindservice see man systemdservice for details note that almost all daemon options could be specified in but keep in mind those explicitly specified as arguments in execstart will override those in the config file unit descriptionbitcoin daemon afternetworktarget service daemon make sure the config directory is readable by the service user execstartprebinchgrp bitcoin etcbitcoin process management typeforking restartonfailure timeoutstopsec600 directory creation and permissions run as bitcoinbitcoin usersatoshi groupsatoshi runbitcoind etcbitcoin varlibbitcoind hardening measures provide a private tmp and vartmp privatetmptrue mount usr boot and etc readonly for the process protectsystemfull deny access to home root and runuser protecthometrue disallow the process and all of its children to gain new privileges through execve nonewprivilegestrue use a new dev namespace only populated with api pseudo devices such as devnull devzero and devrandom privatedevicestrue deny the creation of writable and executable memory mappings install ive installed bitcoincore via snap bitcoin core rpc client version v2401 os ubuntu 22041 lts x8664"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoind v2300 traps bscheduler3227 trap invalid opcode\nissue bitcoind process ended abruptly expected behaviour bitcoind should continue to run log output nothing unusual terminal output 1879 illegal instruction core dumped dmesg output traps bscheduler3227 trap invalid opcode ip555ad42d5cb2 sp7efc897f9590 error0 in cannot reproduce easily this happened first time in last 4 years running bitcoind nonstop bitcoincli version bitcoin core rpc client version v2300 official build from the website running normally from the user folder no systemd no service but in screen session in bash loop bash loop allows it to automatically restart so i experienced no downtime bitcoind has started again automatically full command line bitcoind was running with is 21 serverstyle machine with ecc ram os debian gnulinux 11 bullseye x8664 cpu amd ryzen 7 1700 16 3000ghz 280°c ram 64gb ram 2666 mts multibit ecc hdd btrfs raid10 mode 4x 4tb hard drives no issues with btrfs or drives all perfectly clean no gui bitcoind running in screen session logging to a file i could upload entire session debuglog 25mib on request bitcoind process was running from 11 november to 13 december then crashed log file ends cleanly with no error messages last few lines are 20221213t175000z socks5 connect to xxxonion8333 failed host unreachable 20221213t175044z connect to 1270017656 failed after wait connection refused 111 20221213t175314z connect to 1270017656 failed after wait connection refused 111 20221213t175722z updatetip new height767249 version0x20a00000 log2work93893910 tx787817132 date20221213t175718z progress1000000 cache56mib23274txo 20221213t175916z connect to 1270017656 failed after wait connection refused 111 20221213t175934z updatetip new height767250 version0x23778000 log2work93893921 tx787819399 date20221213t175922z progress1000000 cache66mib31759txo"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncant bump fee after abandoning child transaction\nsteps 1 send transaction a to a different wallet 2 using the change create another transaction b to a different wallet 3 abandontransaction b 4 bumpfee a fails with transaction has descendants in the wallet"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nvalidation bugfix provide more info in mempoolacceptresult\nthis pr fixes a bug and improves the mempool accept interface to return information more predictably bug in package validation we first try the transactions individually see docpolicypackagesmd for more explanation and if they all failed for missing inputs and policyrelated ie fee reasons well try package validation otherwise well just quit early since for example if a transaction had an invalid signature adding a child will not help make it valid currently when we quit early were not setting the packagestate to be invalid so the caller might think it succeeded also were returning no results it makes more sense to return the individual transaction failure thanks instagibbs for catching also make the package results interface generally more usefulpredictable always return the feerate at which a transaction was considered for checkfeerate in when it was successful this can replace the current which only sometimes exists always provide an entry for every transaction in when the error is pckgtx"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nthe btc module is not working with the latest magento php 81 version\nhello team hope that you are doing well we are facing an issue with the btc modules not working with the latest magento php version 81 kindly please check and let us know on this how we can use the module with php version 81 looking forward to hearing from you soon thank you"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nnew bitcoin ddos technique\nedit the issue has been closed while the bug undergoes further review hi i will keep this concise as the attack is neither innovative nor sophisticated it is possible to slow and entirely halt external connections from communicating with a bitcoincore node i dont know whether peer connections remain open or frequently disconnectreconnect what happens to syncd nodes with active peers is yet to be seen its too early at least for me to know whether peers would drop a node under attack over timeouts and how bitcoind behaves with peers while tcp8333 is under fire so further research required this needs to be tested against syncd nodes there is a dos here but also a probably slim possibility that a scaled attack would only result in new nodes being unable to enter the network it is accomplished by repeatedly sending a small request eg x x with thousands of concurrent socket requests in this screen shot im using a handful of cheap digital ocean machines to attack 1 node corn as the script exhausts itself and finds trouble assigning itself open sockets the ddos becomes hit or miss in external requests sometimes connecting usually not connecting and sometimes producing black hole events wherein its impossible to disconnect from an external telnet request until it drops you — which is atypical behavior the attack works the best within the first 20 seconds of the attack script being launched and so may require further optimization am i missing something because im definitely able to stress my own nodes with this technique it is my opinion that a botnet could probably tango down the bitcoin network or at least slow finality considerably ive opted for full disclosure for a variety of reasons kev"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest intermittent failure in rpcnetpy\nsee master the problem here is is that calling disconnectp2ps waits until 0 checks the field subver in getpeerinfo to distinguish p2p nodes from full nodes however if we are dealing with a p2p connection that has never sent a version the node has never received the special subversion and the wait is ineffective we continue even though the disconnection is not yet completed"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbreking in mac os\nim trying to use bitcoin core on mac os i want to record on an external hd but i get the following error all the time 20221117t220744z msghand thread exit 20221117t220744z net thread exit 20221117t220744z opencon thread exit 20221117t220744z filecommit fcntl ffullfsync failed 25 20221117t220744z error serializefiledb failed to flush file volumesextreme 20221117t220744z dumpanchors flush 2 outbound blockrelayonly peer addresses to anchorsdat started 20221117t220744z filecommit fcntl ffullfsync failed 25 20221117t220744z error serializefiledb failed to flush file volumesextreme 20221117t220744z dumpanchors flush 2 outbound blockrelayonly peer addresses to anchorsdat completed 001s 20221117t220744z scheduler thread exit 20221117t220744z writing 0 unbroadcast transactions to disk 20221117t220744z filecommit fcntl ffullfsync failed 25 20221117t220744z failed to dump mempool filecommit failed continuing anyway 20221117t220745z filecommit fcntl ffullfsync failed 25 20221117t220745z error flush failed to commit file 1 20221117t220745z flushing block file to disk failed this is likely the result of an io error 20221117t220745z error a fatal internal error occurred see debuglog for details 20221117t220745z filecommit fcntl ffullfsync failed 25 20221117t220745z error flush failed to commit file 1 20221117t220745z flushing undo file to disk failed this is likely the result of an io error 20221117t220745z error a fatal internal error occurred see debuglog for details 20221117t220746z filecommit fcntl ffullfsync failed 25 20221117t220746z error flush failed to commit file 1 20221117t220746z flushing block file to disk failed this is likely the result of an io error 20221117t220746z error a fatal internal error occurred see debuglog for details 20221117t220746z filecommit fcntl ffullfsync failed 25 20221117t220746z error flush failed to commit file 1 20221117t220746z flushing undo file to disk failed this is likely the result of an io error 20221117t220746z error a fatal internal error occurred see debuglog for details 20221117t220746z shutdown done"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nmacos reports error on shutdown of gui\nmacos reports error on shutdown of gui bitcoin core quit unexpectedly although this may be hardware related memory and cpu load seem normal screenshots and logs attached expected behavior application closes without error message actual behavior application quits and restarts without error or corruption of data but message persists to reproduce the error message seems to persist every time under normal conditions closing the application invokes the message bitcoin core is shutting down do not shut down the computer until this window has disappeared then opens fine on relaunch system information bitcoin core 2300 version 2300 2300 code type x8664 native parent process launchd 1 os version macos 130 22a380 log20221111txt img width280 altscreenshot 20221111 at 20 51 52 src img width631 altscreenshot 20221111 at 21 24 41 src img width615 altscreenshot 20221111 at 21 24 48 src"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwhitelisting fails for nodes added with addnode\nwhitelisting works for subnets for outgoing and incoming connections unless the node has been added using addnode in which case the permissions are always na in the gui and the node is disconnected as if there is no whitelisting eg when historical block download is reached or a mempool request comes in etc"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest failure in interfacerestpy\nbash test testframework error assertion failed traceback most recent call last file line 133 in main selfruntest file line 103 in runtest selfsyncall file line 715 in syncall file line 708 in syncmempools raise sync timed out after sformat assertionerror mempool sync timed out after 480s set test testframework debug closing down network thread"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nunable to cross compile zeromq dependency for arm64appledarwin\ntrying to compile starting with dependencies fails with checking build system type x8664pclinuxgnu checking host system type invalid configuration arm64appledarwin machine arm64apple not recognized configure error binbash configconfigsub arm64appledarwin failed expected behavior actual behavior checking for no checking for pkgconfig usrbinpkgconfig checking pkgconfig is at least version 090 yes checking for xmlto no checking for asciidoc no checking build system type x8664pclinuxgnu checking host system type invalid configuration arm64appledarwin machine arm64apple not recognized configure error binbash configconfigsub arm64appledarwin failed make funcsmk289 error 1 to reproduce command make hostarm64appledarwin j 8 system information master branch ubuntu 2004 core i5 intel 16gb ram"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ninstability in listunspent after 24699\ni maintain a wallet that uses bitcoincli for signing transactions and its test system uses regtest to create a bunch of utxos for the signing tests to sign these tests use a gitcommitted walletdat that is copied into the newlycreated datadir before launching bitcoind for years up until part of 24699 this was stable and worked well occasionally i would need to recreate all the transactions when this project changed mining 24732 or coin selection 24584 but i could handle that what i cant handle is having the generated transactions be different each time i run the exact same sequence of bitcoincli commands starting from the same walletdat starting with thats what happens is this a supported use model or is it unreasonable to expect this to be stable summarizing v0200 stable v0210 stable v220 stable v230 stable which is stable unstable v240rc2 unstable current master unstable expected behavior the generated transactions should be identical given an identical series of bitcoincli calls actual behavior the generated transactions choose different input coins from the regtest blockchain every time i run to reproduce in my glacier wallet fork run recreatealltests git commit the result run the same command again git status should show no changes when its unstable dozens of files change system information running on whonix 16 building inside the git repo as such cd depends make j4 noqt1 autogensh configure make j4"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfails with signed nonwallet inputs and breaks the existing signatures\nthe error returned by the rpc is unable to sign input invalid stack size possibly missing key it seems that this rpc alters the scriptsig of all of the inputs that were already signed the problem is very similar to which is already solved heres an example of the broken signatures after signing diff 0beforetxt 20221024 174631105518559 0300 1aftertxt 20221024 174631146517797 0300 118 118 txid hash txid hash version 1 size 406 vsize 406 weight 1624 size 373 vsize 291 weight 1162 locktime 0 vin txid vout 1 scriptsig asm 0 hex asm 0 0 hex sequence 0 236 2310 asm hex txinwitness sequence 0 ive prepared a bash script that reproduces it i used hal to merge the transactions bash binbash set x set e shopt s expandaliases alias datadirpwd daemon1 alias datadirpwd declare a privkeys declare a pubkeys declare a multisigs declare a addresses declare a redeemscripts declare a txs declare a scriptpubkeys declare a vouts declare a mergetxs parameters for the multisig addreesses addresstypelegacy multisign2 multisigm3 multisigcount1 create the keypairs for i in seq 0 multisigcount multisigm 1do keypairhal key generate regtest 2devnull privkeysiecho keypair jq r wifprivatekey pubkeysiecho keypair jq r publickey done bcli stop sleep 5 true rm rf regtest bdae bcli rpcwait createwallet echo create the multisig addresses for i in seq 0 multisigcount 1do mspubkeys sep for j in seq i multisigm i multisigm multisigm 1do mspubkeysseppubkeysj sep done mspubkeys echo bcli createmultisig multisign mspubkeys addresstype multisigsibcli rpcwait createmultisig multisign mspubkeys addresstype addressesiecho multisigsi jq r address redeemscriptsiecho multisigsi jq r redeemscript done echo pubkeys pubkeys echo privkeys privkeys generate enough blocks to unlock the reward destbcli getnewaddress bcli generatetoaddress 101 dest devnull 21 send 1 btc to each multisig address for i in seq 0 multisigcount 1do txsibcli sendtoaddress addressesi 1 scriptpubkeysibcli decoderawtransaction bcli getrawtransaction txsi jq r vout scriptpubkey selectaddress addressesi hex voutsibcli decoderawtransaction bcli getrawtransaction txsi jq r vout addressesi n echo txsi scriptpubkeysi bcli generatetoaddress 1 dest devnull 21 done echo each multisig sends its coins to a new wallet destwallet and signs the transaction using echo createwallet destwallet bcli createwallet destwallet destaddressbcli rpcwalletdestwallet getnewaddress echo unloadwallet destwallet bcli unloadwallet destwallet for i in seq 0 multisigcount 1do echo sending utxo txsi to final address destaddress txbcli createrawtransaction txidtxsivoutvoutsi destaddress1 sign with keys one by one for j in seq i multisigm i multisigm multisign 1do txbcli tx privkeysj prevtxs singleanyonecanpay txecho txjq r hex done mergetxsitx done echo finalinputs finaloutputs create the transaction to provide the funds to pay for the previous transactions feeinputbcli listunspentjq r 0 feeinputamountecho feeinputjq r amount fee00001 changeamountbc l feeinputamount fee changeaddressbcli getnewaddress changetxbcli createrawtransaction feeinput sepin sepout prepare a json with the inputs and another one with the outputs for i in seq 0 multisigcountdo decodedtxhal tx decode mergetxsi inputnoecho decodedtx jq r inputs length 1 for k in seq 0 inputnodo inputecho decodedtx jq r inputsk delsequence sepin done outputnoecho decodedtx jq r outputs length 1 for k in seq 0 outputnodo outputecho decodedtx jq r outputsk deln sepout done done fulltx version 1 locktime 0 inputs finalinputs outputs finaloutputs echo fulltxjq fulltxtxt create the transaction with all the inputs and outpts and sign it using fails finaltxecho fulltxjqhal tx create 2devnull bcli decoderawtransaction finaltx 0beforetxt echo tx before finaltx signedfinaltxbcli finaltx echo tx after echo signedfinaltxjq r hex bcli decoderawtransaction echo signedfinaltxjq r hex 1aftertxt diff naurwp 0beforetxt 1aftertxt 0diff true signerrorecho signedfinaltxjq r errors0errorempty if n signerror then echo error signing with wallet signerror exit 1 fi senttxbcli sendrawtransaction echo signedfinaltxjq r hex bcli gettransaction senttx bcli generatetoaddress 1 dest devnull 21 bcli gettransaction senttx ive tested with bitcoin core 230 please let me know if theres anything else i can test"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nintermitted failure in p2psendtxrcnclpy\ni have seen p2psendtxrcnclpy fail randomly multiple times by now eg also noted here log node0 preregisterpeer preregister peer8 node0 pushmessage net sending sendtxrcncl 14 bytes peer8 node0 pushmessage net sending verack 0 bytes peer8 node0 processmessage net receive version message pythonp2ptester003 version 70016 blocks1 us12700114312 txrelay1 peer8 node0 processmessage net received verack 0 bytes peer8 node0 pushmessage net sending sendcmpct 9 bytes peer8 node0 forgetpeer forget txreconciliation state of peer8 node0 pushmessage net sending ping 8 bytes peer8 node0 pushmessage net sending getheaders 645 bytes peer8 node0 sendmessages net initial getheaders 199 to peer8 startheight1 node0 pushmessage net sending feefilter 8 bytes peer8 node0 processmessage net received ping 8 bytes peer8 node0 pushmessage net sending pong 8 bytes peer8 node0 processmessage net received wtxidrelay 0 bytes peer8 node0 processmessage net wtxidrelay received after verack from peer8 disconnecting test testframeworkp2p debug closed connection to 12700114312 node0 net disconnecting peer8 node0 finalizenode net cleared nodestate for peer8 test testframework error assertion failed traceback most recent call last file line 133 in main selfruntest file line 138 in runtest file line 553 in sendandping file line 570 in syncwithping timeouttimeout file line 463 in waituntil timeouttimeout lockp2plock file line 267 in waituntilhelper if predicate file line 460 in testfunction assert selfisconnected assertionerror"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoinqt crashed after completing a full blockchain rescan\nwhile investigating 26317 i tried running bitcoincli rescanblockchain to rescan the full blockchain it took about 9 hours to run the full rescan and after the scan was complete bitcoinqt crashed with this error in gdb thread 35 bhttp received signal sigpipe broken pipe the end of the debuglog file showed this at the time of the crash 20221019t091507z chris still rescanning at block 758431 progress0997985 20221019t091607z chris still rescanning at block 759032 progress0999291 20221019t091639z chris scanning current mempool transactions 20221019t091639z chris rescan completed in 34260150ms i posted the full backtraces in before making a separate report for this crash this was bitcoinqt built from git tag v240rc1 on debian linux running on intelr coretm i78750h cpu 220ghz with ssd hard drives"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest intermittent failure in featureindexprunepy\n"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nscanblocks rpc result includes falsepositives\nthe recently introduced scanblocks rpc uses bip157 block filters for quickly determining which blocks contain a specified set of output scripts by nature this can lead to falsepositive results ie the filter set matches the block filter even though none of the contained txs spend or create utxos with the specified set of scriptpubkeys can be reproduced on testnet with address srcbitcoincli testnet scanblocks start fromheight 0 toheight 2375004 relevantblocks completed true looking closer at the first returned block one can see that the contained single coinbase transaction is not related to the passed address srcbitcoincli testnet getblock 3 vout value 1250000000 n 0 scriptpubkey asm opdup ophash160 opequalverify opchecksig desc hex address type pubkeyhash it might make sense to introduce an option that actives a second pass phase in which the found blocks are inspected in order to filter out these falsepositives i guess it is debatable if this can really be considered a bug in practice it shouldnt be a problem but at the very least we should mention the possibility of falsepositives in the rpc help to not confuse users"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nadd lock annotation for\nci failure from 24407 calling withlock on a nonrecursive mutex requires not holding it beforehand"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoind dumps core when deriveaddresses is called with index 2147483647 2311\nthe deriveaddresses jsonrpc endpoint accepts a descriptor and an index for the derivation currently the rpc interface caps the allowed index derivation range in the interval 02311 however calling deriveaddresses using a range that includes the index 2147483647 2311 results in a crash of bitcoind on an amd64 machine bitcoincli deriveaddresses descriptor 2147483647 2147483647 bitcoind dumps core in the pr that addresses this pull request 26275 is included a test case that causes the crash for convenience heres the contents of a core dump generated with that test sudo coredumpctl debug bitcoind pid 110184 bitcoind uid 1000 muxator gid 1000 muxator signal 6 abrt timestamp thu 20221006 174808 cest 4min 56s ago command line srcbitcoind logtimemicros debug debugexcludelibevent debugexcludeleveldb uacommenttestnode0 logthreadnames logsourcelocations logleveltrace sandboxlogandabort executable srcbitcoind message process 110184 bitcoind of user 1000 dumped core elf object binary architecture amd x8664 gnu gdb gdb fedora 1211fc36 core was generated by srcbitcoind program terminated with signal sigabrt aborted 0 0x00007f55a8ac6c4c in from lib64libcso6 current thread is 1 thread 0x7f5576ffd640 lwp 110197 missing separate debuginfos use dnf debuginfoinstall glibc23517fc36x8664 libgcc12212fc36x8664 zlib121133fc36x8664 gdb bt 0 0x00007f55a8ac6c4c in from lib64libcso6 1 0x00007f55a8a769c6 in raise from lib64libcso6 2 0x00007f55a8a607f4 in abort from lib64libcso6 3 0x00007f55a8c40c11 in addvsi3 from lib64libgccsso1 4 0x0000563935a84d73 in operator self request at 5 0x0000563935a87ec2 in stdinvokeimpl const rpchelpman const struct f at 6 0x0000563935a8773f in stdinvoker const rpchelpman const jsonrpcrequeststruct fn at 7 0x0000563935a86ec3 in stdfunctionhandler minvokeconst stdanydata const rpchelpman const jsonrpcrequest functor args0 args1 at 8 0x00005639360b4641 in const jsonrpcrequest const const this0x7f5576ffbd50 args0 args1 at 9 0x00005639360a93b8 in this0x7f5576ffbd30 request at rpcutilcpp585 10 0x00005639359cc1a2 in stdallocator rpchelpman lambdajsonrpcrequest const univalue const univalue bool const request result at rpcserverh109 11 0x00005639359e0be3 in stdinvokeimpl stdallocator rpchelpman lambdajsonrpcrequest const univalue bool1 jsonrpcrequest const univalue boolstdinvokeother stdallocator rpchelpman lambdajsonrpcrequest const univalue bool1 jsonrpcrequest const univalue bool f at 12 0x00005639359da9ba in stdinvoker stdallocator rpchelpman lambdajsonrpcrequest const univalue bool1 jsonrpcrequest const univalue stdallocator rpchelpman lambdajsonrpcrequest const univalue bool1 jsonrpcrequest const univalue bool fn at 13 0x00005639359d4916 in stdfunctionhandler stdallocator rpchelpman lambdajsonrpcrequest const univalue const jsonrpcrequest const univalue bool functor args0 args1 args20x7f5576ffbf44 true at 14 0x00005639359302c6 in const univalue bool const this0x5639368fbb00 args0 args1 args2true at 15 0x0000563935b0afd5 in executecommand command request result lasthandlertrue at rpcservercpp475 16 0x0000563935b0abae in executecommands commandsstdvector of length 1 capacity 1 request result at rpcservercpp440 17 0x0000563935b0ad52 in crpctableexecute this0x5639368fc4c0 request at rpcservercpp460 18 0x0000563935cbe3f5 in httpreqjsonrpc contextstdany containing nodenodecontext req0x7f556c002da0 at httprpccpp201 19 0x0000563935cc0548 in operator req0x7f556c002da0 at httprpccpp300 20 0x0000563935cc1c3a in stdinvokeimpl httprequest const stdcxx11basicstring stdallocator stdinvokeother struct f at 21 0x0000563935cc1a78 in stdinvoker httprequest const stdcxx11basicstring stdallocator struct fn at 22 0x0000563935cc182e in stdfunctionhandler stdallocator starthttprpcconst stdany minvokeconst stdanydata httprequest const stdcxx11basicstring stdallocator functor args00x7f5576ffcb80 0x7f556c002da0 args1 at 23 0x0000563935cd1c0c in stdfunction stdallocator stdcxx11basicstring stdallocator const const this0x7f556c003fb0 args00x7f556c002da0 args1 at 24 0x0000563935cd0fc2 in httpworkitemoperator this0x7f556c003f80 at httpservercpp56 25 0x0000563935cd326d in workqueuerun this0x563938765d10 at httpservercpp111 26 0x0000563935ccbf1d in httpworkqueuerun queue0x563938765d10 workernum3 at httpservercpp343 27 0x0000563935cdfd51 in stdinvokeimpl int workqueue int f0x56393877e7f8 0x563935ccbeb2 int at 28 0x0000563935cdfaaa in stdinvoke int workqueue int fn0x56393877e7f8 0x563935ccbeb2 int at 29 0x0000563935cdf8a6 in stdthreadinvoker int workqueue int minvoke this0x56393877e7e8 at 30 0x0000563935cdf7db in stdthreadinvoker int workqueue int operator this0x56393877e7e8 at 31 0x0000563935cdf60f in stdthreadstateimpl int workqueue int mrun this0x56393877e7e0 at 32 0x00007f55a8e15b03 in from lib64libstdcso6 33 0x00007f55a8ac4e2d in startthread from lib64libcso6 34 0x00007f55a8b4a1b0 in clone3 from lib64libcso6 the affected code seems to be in frame 4 and corresponds to the following code gdb frame 4 4 0x0000563935a84d73 in operator self request at 276 for int i rangebegin i rangeend i i think the reason is that while rangebegin and rangeend are uint64t i is an int which on many platforms means int32t when i is assigned 2311 and is then incremented it wraps back and causes the crash"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwalletspendcpp assertion error\nthis issue tracker is only for technical issues related to bitcoin core general bitcoin questions andor support requests are best directed to the bitcoin stackexchange at for reporting security issues please read instructions at if the node is stuck during sync or giving block checksum mismatch errors please ensure your hardware is stable by running memtest and observe cpu temperature with a loadtest tool such as linpack before creating an issue bitcoind fails to determine a fee rate which ends up crashing rpc method sentoaddress should work as intended and properly calculate the fee it throws and error and exits bitcoind 20221003t031942z feeest 48 85 decay 099520 feerate 1000 from 0 1000 9911 3063730677 0 mem 236 out fail 1 1 000 0000 0 mem 00 out 20221003t031942z feeest 12 85 decay 096200 feerate 1000 from 0 1000 9741 33183406 0 mem 00 out fail 1 1 000 0000 0 mem 00 out 20221003t031942z feeest 612 95 decay 099931 feerate 1000 from 0 1000 10000 9445094450 0 mem 00 out fail 1 1 000 0000 0 mem 00 out bitcoind walletspendcpp783 bool stdvector ctransactionref camount int bilingualstr const ccoincontrol feecalculation bool assertion feeneeded changeandfee changeamount failed aborted core dumped cant reproduce the error is seemingly random 220 windows 11 wsl linux ubuntu 2004 ryzen 9 5950x 64 gb ram"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoind and bitcoinqt crashes while creating psbt\nbitcoind and bitcoinqt crashes when creating a psbt with expected behavior bitcoind and bitcoinqt should not crash and users should not see assertion errors on mainnet failing gracefully with some error message would be better although i was not able to reproduce this issue on fedora so ideally this should be fixed actual behavior error in bitcoind assertion failed target file line 391 error in bitcoinqt image to reproduce 1 create bitcoinconf signet1 txindex1 signetrpcport38332 rpcuseruser rpcpasswordpass fallbackfee00004 2 add descriptor in a wallet using bitcoinqt console importmulti desc timestampnow 3 create psbt using bitcoinqt click on different options in the error message and you will notice it creates psbt with no change by clicking ignore 3 times else crashes with others 4 close bitcoinqt and open powershell or command prompt to create psbt bitcoindexe bitcoincliexe rpcwalletm1 system information windows 10 bitcoin core master branch"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nci old versions of git cant handle merges\nit appears git versions older than 233 cant handle some simple merges and many of our ci tasks use such old versions the simplest fix is probably to just use githubs generated merge branch rather than trying to merge in each ci instance but i havent tested it"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nci error commit failed to commit latest coinstatsindex state\nthis error happened in a push in i pushed the code again git commit amend and didnt happen it seems to be intermittent mocktime 20200831t153412z coinstatsindex utilsystemh50 error error commit failed to commit latest coinstatsindex state summary threadsanitizer data race on vptr ctordtor vs virtual call srcindexbasecpp691 in baseindexbaseindex"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest failure in\n"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ni2p transient destinations should be signaturetype7\n"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndont assume signature grinding for external signers\nsince 13666 our fee calculation assumes that ecsda signatures are a maximum of 71 bytes rather than 72 however not all hardware wallets implement rvalue grinding this can cause us to underpay fees when using an external signer thats especially problematic when the user picks 1 satvbyte as the fee because it wont even get into our own mempool the easiest solution would be to modify to assume 72 bytes for ecsda signatures slightly more advanced would be to expand hwi to keep track of which devices and firmware versions if any support rvalue grinding wed then have to store that in the wallet in some new field personally id rather work on better taproot support which thanks to schnorr avoids this issue altogether"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nunknown descriptor in wallet crashes\nattempting to load a wallet with an unknown descriptor causes a fatal error 20220906t015106z init message loading wallet… 20220906t015106z descriptor invalid descriptor can only have tr at top level iostream error 20220906t015106z descriptor invalid descriptor can only have tr at top level iostream error 20220906t015106z descriptor setting spkman to active id type legacy internal false 20220906t015106z descriptor setting spkman to active id type p2shsegwit internal false 20220906t015106z descriptor setting spkman to active id type bech32 internal false 20220906t015106z descriptor setting spkman to active id type bech32m internal false 20220906t015106z descriptor releasing wallet 20220906t015106z exception st12outofrange mapat bitcoin in runaway exception exception st12outofrange mapat bitcoin in runaway exception bitcoinqt checkqueueh204 t cscriptcheck assertion mworkerthreadsempty failed aborted a fatal error occurred bitcoin core can no longer continue safely and will quit to reproduce a quick hack c 14087 14087 stduniqueptr parsescriptuint32t keyexpindex spanconst error can only have addr at top level return nullptr if ctx functr expr if ctx functrx expr auto arg exprexpr auto internalkey arg out error if internalkey"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfs overlapped missing initializers\nbash fscpp in member function ‘bool fscpp12932 error missing initializer for member 129 overlapped overlapped 0 fscpp12932 error missing initializer for member ‘overlapped’ fscpp12932 error missing initializer for member ‘overlappedhevent’"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsegmentation fault when compiling with libfuzzer and lto x8664\nsteps to reproduce install fresh ubuntu jammy operating system export apt update apt install curl wget htop git vim ccache y git clone bitcoincore cd bitcoincore apt install buildessential libtool autotoolsdev automake pkgconfig bsdmainutils python3zmq libeventdev libboostdev libsqlite3dev libdbdev clang llvm libcdev libcabidev y autogensh configure ccclang flto cxxclang flto enablefuzz withsanitizersfuzzer make jnproc output ar ar libbitcoinwalleta cxxld testfuzzfuzz clang error unable to execute command segmentation fault core dumped the same does not happen when compiling normally dropping withsanitizersfuzzer"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nintermittent failure in walletgroupspy\nfile line 150 in runtest txid6 295 assertionerror node 4 expected messages fee nongrouped 5520 grouped 8240 using grouped does not partially match log"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ncheckblockindex stalls for extremely long time\nstale chain tips can block the rpc and all other responses from the peer for very long time more than 15 minutes sometimes hours or undefinetely during that time i can see that my local node no longer replies to any other peer eg to bitnodeio core and in process viewers i can see that theres a single thread blocking all other threads in a tight loop using 100 cpu in a tight loop ive seen that this is occurs in any db indexer notably the chainstate indexer during ibd or the txindexer or the coinstat db indexer notably in some critical steps where new blocks are added to the chain once every about 15 minutes this seems to happen when a new block contains a transaction validating a better chain and invalidating other blocks from dead branches in that case the ongoin indexer will fail with unchecked conditions in its internal iterator apparently because it expect the next block to be present and locks it incorrectly and is not able to release it and retry if that next valid block has been replaced by a better block in the chain netprocessingcpp2797 processmessage new outbound peer connected version 70015 blocks750474 peer58 blockrelayonly indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 330879 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 331746 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 332578 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 333378 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 334219 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 334916 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 335794 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 336769 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 337743 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 338611 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 339322 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 340016 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 340630 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 341499 validationcpp2441 updatetiplog updatetip new height750475 version0x2281c000 log2work93689008 tx758464817 date20220821t195059z progress1000000 cache37mib27192txo indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 341803 validationcpp2441 updatetiplog updatetip new height750476 version0x20000004 log2work93689019 tx758465224 date20220821t195212z progress1000000 cache39mib28964txo indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 341814 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 342683 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 343432 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 344012 indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 344718 validationcpp2441 updatetiplog updatetip new height750477 version0x2ab96000 log2work93689030 tx758465722 date20220821t195436z progress1000000 cache41mib30966txo indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 344913 mapportcpp204 processupnp upnp port mapping successful mapportcpp204 processupnp upnp port mapping successful finally later it may eventually detect that and detect the inconsistency by eviting some peers indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 344915 netprocessingcpp4381 potential stale tip detected will try using extra outbound peer last tip update 1871 seconds ago netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer194 outboundfullrelay netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer195 outboundfullrelay netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer196 outboundfullrelay netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer198 outboundfullrelay validationcpp2441 updatetiplog updatetip new height750478 version0x20800000 log2work93689041 tx758467003 date20220821t200524z progress0999995 cache55mib41861txo indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 344926 validationcpp2441 updatetiplog updatetip new height750479 version0x20c00000 log2work93689052 tx758468307 date20220821t200838z progress0999996 cache66mib48588txo validationcpp2441 updatetiplog updatetip new height750480 version0x20400000 log2work93689063 tx758468706 date20220821t201040z progress0999996 cache68mib50180txo indexbasecpp169 threadsync syncing coinstatsindex with block chain from height 344927 netprocessingcpp2797 processmessage new outbound peer connected version 70015 blocks750480 peer205 outboundfullrelay netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer208 outboundfullrelay netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer211 outboundfullrelay netprocessingcpp2797 processmessage new outbound peer connected version 70016 blocks750480 peer213 outboundfullrelay and here again we see the deadlock occuring for long time in the coindb indexer note the difference of time between the last too events and in fact nothing else occured no resposes to other peers the coindb indexer was stalled the rpc service stopped to respond even locally it seems then that there are malicious nodes on the p2p network sending bad blocks that partially pass the basic security but can cause bitcoin core to be blocked and become unresponsive it can no longer respond even to a basic rpc such as bitcoin getinfo or bitcoin netinfo it will not even repond to a bitcoincli stop some threads are stopped but not all and the indexer thread is still running in its tight loop if you are in that situation the only way to recover is to kill the process entirely and youll get the related index to become invalid as it was not committed it will have to be reconstructed from zero most often you have no way to recover given that the rpc service is not responsive and even the ctrlc breaker or a simple kill hangup will not work you have to do an instant kill kill 9 on linux or manual kill in the process viewer on windows nothing else will be synced to disk if the index was the ibd index the chainstate can only be recovered by check level 4 works often but not necessarily always but never with check level 3 if it does not work then you have to rebuild the chainstate entirely but for any other index such as the txindex or coinstats index theres no check at all with recovery at startup so the only way to recover is to entirely delete the content of that index directory and rebuild it from zero and this will take many hours and may fail again in the middle due to bad blocks sent by malicious peers and that may have still not been replaced by valid blocks in the main chain apparently these bad blocks seem to come from unapproved forks possibly implementing segwit with too large block sizes which are not correctly detected and cause the indexer to fail or run into some infinite loops or some bad signatures using bytecodes taking extremely long time to validate or just discard rapidly as invalid such events with bad blocks coming from malicious peers tend to be frequent now unfortunately its not easy to track which nodes caused that bug as they may not even be connected since long they have sent their garbage and have disconnected themselves as soon as done just to crash specific versions of bitcoin core not detecting them note this is once again occuring with the current unmodified release v230 from your official site it affects both linux and windows versions are there blocks that are extremely long to validate or index taking much more than just about 1 minutes normally needed here to process every logged group of about 15 blocks such as more than 30 minutes in the 1st break above but still not completed after several hours at end of the logs above isnt it one of the reasons why segwit was asked for with blocks grouping many signatures for example those generated by very large miner pools and needing tons of transactions to validate all their micropayments to many participants see also bug may be related with the same race issue when theres a new chaintip updated while the indexer is running and iterating from the older chain view if this is the cause the bug is manifested only when you run it on a machine with enough cores to allow more threads to run concurrently the crasheshangs i experiment are all runing with 8 cores activates your test environment may just have 1 or 2 cores configured most probably not enough to experiment the race issue between concurrent threads and not experienced by people running it on cheap pc or notebooks or in cheapfree vms for azure and amazon if you get just 1 or 2 non dedicated cores note also that synchronization issues in code may even more likely to cause bugs on cpus running multiple threads per core or using more complex parallelism eg new intel processors with powerefficient and performance cpus with more complex caching layers or needing special kernelinitiated firmware mitigations like retpoline against attacks based on latency response time on caches and with speculative execution models those possibile attacks and firmware or os mitigations exist on many processors and their effect on execution latency may vary depending on the number of active concurrent threads if you have low io latency on disk storage this will also increase the likelyhood of race issues caused by improper synchronization but in all these cases this greatly impacts the leveldb indexers not properly iterating over the main chain of blocks if you want to experiment it faster you may want to test it on a machine with many more cpu cores like newest amd threadripper 48 concurrent threads and then try running multiple indexers running in parallel the chainstate indexer in ibd the coinsdbindexer the txindex and the coinsdbindex one of them will crashhand or report data corruption but not caused by any hardware issue but incorrect synchronization in bitcoin cores code as well it seems that all bugs like reported quite often but always diagnosed in replies incorrectly as a hardware issue just supposed but never really verified are also related to the same synchronization issues between any indexer thread and the thread handling any changes of the tips on the chainstate notably if theres a change between concurrent forks for new blocks after establishing a consensus they more likely occurs at end of a trading day when more blocks are announced for compensating transactions made by major traders its then more frequent to get new blocks emitted more rapidly than just once every 10 minutes during the rest of the day subsidiary question is there way to have a knonw list of trustable peers and a blacklist for bad peers sending fakecorrupted data isnt bitcoin missing some additional checks of the structure of these blocks not just the validation of the individual attempted transactions but basically its assumed format includnig for complex multipart signature schemes or peers attempting to force the use of a hard fork with a disappoved bip proposal or attemping to use it too early before a valid date and proper nogociation if they run some specific subchains one remote peer i remarked was always present when i saw crasheshangs was this one type net mping ping send recv txn blk hb addrp addrl age id address version out full ipv6 27 27 4 1 0 1002 1 11 200141d03032b2b8333 ive seen it several times sending groups of 2 or 3 unconfirmed blocks with large transactions in a row it is likely a nonupgraded miner node according to whois is is hosted by ovh in france and likely on a fiber access it uses the most antique version of satoshi i seen for a full node but with local patches trying to enforce bip148 but with wrong version announcements do i need to list it in my banlist"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndocfix sighash parameter for walletprocesspsbt\ni think the documentation is incorrect since 22514 see"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nstackoverflow in miniscript descriptorparse\nto reproduce wget fuzzdescriptorparse srctestfuzzfuzz rsslimitmb1000 119584error stackoverflow on address 0x7ffcf4e35ff8 pc 0x55a9a0f40e0c bp 0x7ffcf4e36010 sp 0x7ffcf4e36000 t119584 0 0x55a9a0f40e0c in void constminiscriptnode const 1 0x55a9a0f3c96b in void conststdallocator miniscriptnode const 2 0x55a9a0f3c96b in const stdallocator 3 0x55a9a0f40eec in 4 0x55a9a0f40eec in 5 0x55a9a0f40eec in stdsharedptr const 6 0x55a9a0f40eec in void stddestroy conststdsharedptr const 7 0x55a9a0f40eec in void stddestroyauxdestroy conststdsharedptr const stdsharedptr const 8 0x55a9a0f40eec in void stddestroy conststdsharedptr const stdsharedptr const 9 0x55a9a0f40eec in void stddestroy const stdsharedptr conststdsharedptr const stdsharedptr const stdallocator const 10 0x55a9a0f40eec in stdvector const stdallocator constvector 11 0x55a9a0f40eec in miniscriptnodenode 12 0x55a9a0f40eec in void constminiscriptnode const 13 0x55a9a0f3c96b in void conststdallocator miniscriptnode const 14 0x55a9a0f3c96b in const stdallocator 9bitsstlvectorh6772 1475 0x55a9a0f40eec in miniscriptnodenode 1476 0x55a9a0f40eec in void constminiscriptnode const 1477 0x55a9a0f3c96b in void conststdallocator miniscriptnode const 1478 0x55a9a0f3c96b in const stdallocator 1479 0x55a9a0f40eec in 1480 0x55a9a0f40eec in 1481 0x55a9a0f40eec in stdsharedptr const 1482 0x55a9a0f40eec in void stddestroy conststdsharedptr const 1483 0x55a9a0f40eec in void stddestroyauxdestroy conststdsharedptr const stdsharedptr const 1484 0x55a9a0f40eec in void stddestroy conststdsharedptr const stdsharedptr const 1485 0x55a9a0f40eec in void stddestroy const stdsharedptr conststdsharedptr const stdsharedptr const stdallocator const 1486 0x55a9a0f40eec in stdvector const stdallocator constvector 1487 0x55a9a0f40eec in miniscriptnodenode 1488 0x55a9a0f40eec in void constminiscriptnode const summary stackoverflow in void constminiscriptnode const"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntest failure in\nbash test testframework info handleblockconnected height202 transactions1 inputs1 sigops0 duration517 test testframework info handleblockconnected height201 transactions1 inputs1 sigops0 duration338 test testframework info check that we traced 2 blocks test testframework error assertion failed traceback most recent call last file line 133 in main selfruntest file line 131 in runtest blockschecked file line 52 in assertequal raise assertionerrornots joinstrarg for arg in thing1 thing2 args assertionerror not2 0"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\npsbth64451 runtime error unsigned integer overflow 0 1 cannot be represented in type unsigned long\nsteps to reproduce build with integer sanitizer srcqtbitcoinqt enter into the rpc debug console decodepsbt"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin core 023 installer incompatible with windows mandatory aslr\ntry downloading the current version 023 of bitcoin core for windows from the official site the installer exe is corrupted wont run corrupted exe format only the zip file is correct workaround you can use the 022 installer then download the 023 zip and extract the executables from there to overwrite the existing exe files qtexe in the main program filesbitcoin folder other executables in the zip go to the daemon subfolder so the exe package was incorrectly built or was incorrectly transferedtruncated on the download site on bitcoinorg"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\npsbth89651 runtime error unsigned integer overflow 0 1 cannot be represented in type unsigned long\nthis needs a code change or suppression added info running with entropic power schedule 0xff 100 info seed 3574901271 info loaded 1 modules 322037 inline 8bit counters 322037 0x555887da9f40 0x555887df8935 info loaded 1 pc tables 322037 pcs 322037 running 1 inputs 1 times each running psbth89651 runtime error unsigned integer overflow 0 1 cannot be represented in type unsigned long 0 0x555885271598 in void srcpsbth89651 1 0x555885233a4e in void psbtoutput srcserializeh6827 2 0x555885233a4e in cdatastream srcstreamsh3399 3 0x55588523024f in void srcpsbth119115 4 0x55588522edee in void srcserializeh6827 5 0x55588522edee in cdatastream srcstreamsh3399 6 0x5558852067f5 in void anonymous stdoptional int 7 0x5558852067f5 in 8 0x555885106682 in stdfunctionhandler void const span 9 0x55588549ae5a in const 10 0x55588549aad6 in 11 0x555885029372 in char const unsigned long buildid 12 0x5558850138d0 in char const unsigned long buildid 13 0x555885019587 in char int unsigned char const unsigned long buildid 14 0x555885042342 in main buildid 15 0x7fa7994a3082 in libcstartmain 16 0x55588500e1cd in start buildid summary psbth89651 in base64"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nintermittent failure in\non the master branch 172245 failed duration 2 s stdout testframework info initializing test directory testframework info test startupnotify command is run when node starts testframework info test startupnotify is executed once testframework error assertion failed traceback most recent call last file line 133 in main selfruntest file line 34 in runtest 1 file line 51 in assertequal raise assertionerrornots joinstrarg for arg in thing1 thing2 args assertionerror not0 1 didnt find an existing open issue but looks to be the same win64 ci failure reported in"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nverifychain 4 111000 aborts with assertion hashprevblock viewgetbestblock failed\nproviding a low number of blocks works however it just crashed for me with 111000 blocks if this is not supported it might be better to document that or reject the input commit output bitcoinqt validationcpp2005 bool cblock blockvalidationstate cblockindex ccoinsviewcache bool assertion hashprevblock viewgetbestblock failed"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngui check for readlink buffer overflow and handle gracefully\nif readlink returns the size of the buffer an overflow may have safely occurred pass a buffer size of maxpath1 the size of the actual buffer to detect this scenario"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nconfusing filtering by block hash behaviour in listsinceblock\nthe reproduction speaks for itself diff diff git index fc06565983e06fbf120a 100755 3213 3214 class selfconnectnodes1 2 coinbasematurity 1 selftestnoblockhash selftestreorg selftestdoublespend selftestdoublesend selftestnoblockhash selftestreorg selftestdoublespend selftestdoublesend def testnoblockhashself selfloginfotest no blockhash 3835 38419 class false false def test the filtering in listtransactions is consistent with gettransactions output the block hash parameter gives according to the documentation the block hash to list transactions since test that if we have a transaction confirmed at a certain block listing the coins since this block will output this transaction txid 1 1 tx coins assert txid in ctxid for c in coins if name main is it intended that filtering transaction since block n only output transactions confirmed from block n1"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nqa intermittent failure in walletencryptionpy descriptors\nlog excerpt 177244 walletencryptionpy descriptors failed duration 6 s stdout testframework info initializing test directory testframework info check a timeout less than the limit testframework error assertion failed traceback most recent call last file line 133 in main selfruntest file line 85 in runtest actualtime file line 56 in assertgreaterthan raise assertionerrors s strthing1 strthing2 assertionerror 1756315608992383 1756315609 testframework info stopping nodes testframework warning not cleaning up dir testframework error test failed test logging available at testframework error testframework error hint call to consolidate all logs testframework error testframework error if this failure happened unexpectedly or intermittently please file a bug and provide a link or upload of the combined log testframework error testframework error"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nthreadsanitizer data race on vptr ctordtor vs virtual call in baseindex\nbash warning threadsanitizer data race on vptr ctordtor vs virtual call pid24158 write of size 8 at 0x7ffe0efae9f8 by main thread 0 baseindexbaseindex srcindexbasecpp531 testbitcoin0xcc6b69 1 testbitcoin0x3b9b21 2 testbitcoin0x3b9b21 3 testbitcoin0x3b814b 4 testbitcoin0x2bbf1d 5 const testbitcoin0x220877 6 testbitcoin0x220877 7 testbitcoin0x220877 8 const testbitcoin0x1ae59e 9 int boostdetaildoinvoke boostfunction boostsharedptr const boostfunction const testbitcoin0x1ae59e 10 const testbitcoin0x1ae59e 11 const testbitcoin0x1ae8c0 12 const testbitcoin0x1aa21b 13 const unsigned long testbitcoin0x1aa21b 14 long unsigned long const testbitcoin0x1ddb63 15 long unsigned long const testbitcoin0x1de1d8 16 long unsigned long const testbitcoin0x1de1d8 17 long bool testbitcoin0x1a8e66 18 int char int char testbitcoin0x1c19c6 19 main testbitcoin0x1c1ff6 previous read of size 8 at 0x7ffe0efae9f8 by thread t1 mutexes write m603 0 const1operator const srcindexbasecpp3889 testbitcoin0xcc74e6 1 const srcindexbasecpp3889 testbitcoin0xcc74e6 2 const cblockindex const srcindexbasecpp2739 testbitcoin0xcc9759 3 const cblockindex const8operator const testbitcoin0x10223a4 4 void const cblockindex const8operator const cblockindex const8operator testbitcoin0x10223a4 5 const cblockindex const8operator const testbitcoin0x10223a4 6 const cblockindex const9operator const testbitcoin0x10223a4 7 decltypestaticcast const cblockindex const9fp std1invoke const cblockindex const cblockindex const9 testbitcoin0x10223a4 8 void const cblockindex const cblockindex const9 testbitcoin0x10223a4 9 const cblockindex const9 std1allocator const cblockindex const9 void operator testbitcoin0x10223a4 10 std1functionfunc const cblockindex const9 std1allocator const cblockindex const9 void operator testbitcoin0x10223a4 11 const testbitcoin0x10b6b71 12 std1functionoperator const testbitcoin0x10b6b71 13 srcschedulercpp1755 testbitcoin0x10b6b71 14 const srcschedulercpp14441 testbitcoin0x10b8875 15 decltypestaticcastfp testbitcoin0x10b8875 16 void testbitcoin0x10b8875 17 void operator testbitcoin0x10b8875 18 std1functionfunc void operator testbitcoin0x10b8875 19 const testbitcoin0x10b5b5c 20 std1functionoperator const testbitcoin0x10b5b5c 21 srcschedulercpp6217 testbitcoin0x10b5b5c 22 std1allocator const std1vector const0operator const testbitcoin0xa4e7b8 23 decltypestaticcast std1allocator const std1vector const0fp std1invoke std1allocator const std1vector std1allocator const std1vector const0 testbitcoin0xa4e7b8 24 void std1allocator const std1vector std1allocator const std1vector const0 testbitcoin0xa4e7b8 25 std1allocator const std1vector const0 std1allocator std1allocator const std1vector const0 void operator testbitcoin0xa4e7b8 26 std1functionfunc std1allocator const std1vector const0 std1allocator std1allocator const std1vector const0 void operator testbitcoin0xa4e7b8 27 const testbitcoin0x115760f 28 std1functionoperator const testbitcoin0x115760f 29 utiltracethreadchar const std1function srcutilthreadcpp189 testbitcoin0x115760f 30 staticcast std1allocator const std1vector const0fp0 std1invoke char const std1allocator const std1vector const0void char const std1function char const std1allocator const std1vector const0 testbitcoin0xa4e3b1 31 void std1threadexecute void char const std1function char const std1allocator const std1vector const0 2ul 3ulstd1tuple void char const std1function char const std1allocator const std1vector const0 std1tupleindices testbitcoin0xa4e3b1 32 void std1threadproxy void char const std1function char const std1allocator const std1vector const0 void testbitcoin0xa4e3b1 location is stack of main thread location is global at 0x7ffe0ef91000 stack0x00000001d9f8 mutex m603 0x558df2c934a0 created at 0 pthreadmutexinit testbitcoin0x11cf6f 1 libcso10x49fb3 2 libcstartmain libcso60x29eba thread t1 bscheduler tid24216 running created by main thread at 0 pthreadcreate testbitcoin0x11b7fd 1 long void void void testbitcoin0xa47a76 2 std1threadthread char const 10 std1allocator const std1vector const0 voidvoid char const std1function char const 10 std1allocator const std1vector const0 testbitcoin0xa47a76 3 std1allocator const std1vector const testbitcoin0xa47a76 4 std1allocator const std1vector const testbitcoin0xa47ed9 5 std1allocator const std1vector const testbitcoin0xa48be3 6 testbitcoin0x3b7c8b 7 testbitcoin0x3b7c8b 8 testbitcoin0x2bbf1d 9 const testbitcoin0x220877 10 testbitcoin0x220877 11 testbitcoin0x220877 12 const testbitcoin0x1ae59e 13 int boostdetaildoinvoke boostfunction boostsharedptr const boostfunction const testbitcoin0x1ae59e 14 const testbitcoin0x1ae59e 15 const testbitcoin0x1ae8c0 16 const testbitcoin0x1aa21b 17 const unsigned long testbitcoin0x1aa21b 18 long unsigned long const testbitcoin0x1ddb63 19 long unsigned long const testbitcoin0x1de1d8 20 long unsigned long const testbitcoin0x1de1d8 21 long bool testbitcoin0x1a8e66 22 int char int char testbitcoin0x1c19c6 23 main testbitcoin0x1c1ff6 summary threadsanitizer data race on vptr ctordtor vs virtual call srcindexbasecpp531 in baseindexbaseindex exit status 2"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwalletbdbh2710 fatal error dbcxxh no such file or directory\nim having build error with current master with gentoo linux make clean autogensh configure make cxx in file included from qtrpcconsolecpp32 walletbdbh2710 fatal error dbcxxh no such file or directory 27 include compilation terminated locate dbcxxh usrincludedb48dbcxxh usrincludedb53dbcxxh reverting 25244 fixes the problem"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nnlocktime bug in bitcoin core v23\nrecreating the bug report because the previous one closed by a party who doesnt know nothing about bitcoin apparently block height for nlocktime doesnt work and this poses a serious risk for smart contracts i have added block height to nlocktime and got converted to timestamp which corresponds to 19700420 212525 found this bug when verifying a raw transaction"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ndepends bdb werrorformatsecurity format not a string literal and no format arguments\nrunning make c depends on nixos with gcc 1030 results in c libtool compile gcc c i idist dgnusource dreentrant pipe o2 disttxntxnc fpic dpic o txno disttxntxnc in function ‘txnbegin’ disttxntxnc1713 error format not a string literal and no format arguments werrorformatsecurity 171 dberrxenv txnalloc disttxntxnc in function ‘txncompensatebegin’ disttxntxnc3183 error format not a string literal and no format arguments werrorformatsecurity 318 dberrxenv txnalloc cc1 some warnings being treated as errors make1 makefile1980 txno error 1 make1 leaving directory make funcsmk288 error 2 make leaving directory i could work around it with diff diff git index 100644 147 147 dunicode endef but i dont know if this is the right fix or if there possibly is a real bug in the code causing the warning"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nstarting with an unsupported wallet configured leads to a segfault master only\n0 void void at 1 2 this0x13dca9a70 at 3 0x000000011f25c9c0 in stdcxx11list stdallocator this0x7ffef8013e98 position at 4 0x000000011f241cc4 in stdcxx11list stdallocator this0x7ffef8013e98 position at 5 stdfunction 1operator const this at walletwalletcpp165 6 stdinvokeimpl 1stdinvokeother stdfunction 1 f at 7 stdinvoker stdfunction 1 fn at 8 stdfunctionhandler 1minvokestdanydata const functor at 9 0x000000011e8fb1f8 in stdfunctionoperator const this at 10 0x000000011f08d6c0 in interfacesanonymous this0x7ffef801edd0 at 11 0x000000011f08d7fc in interfacesanonymous this0x7ffef801edd0 at 12 0x000000011e7fcd34 in ptr0x7ffef801edd0 this at 13 stduniqueptr uniqueptr this at 14 0x000000011e90e038 in this0x13dc49f00 at qtsplashscreencpp138 15 0x000000011e90e6ec in this0x13dc49f00 at qtsplashscreencpp136 16 0x00007fffa4ff35f4 in o at 17 0x00007fffa4ff8550 in qobjectevent this e at 18 0x00007fffa45bd41c in qwidgetevent this0x13dc49f00 event0x7fff98023f40 at 19 0x00007fffa455da70 in this receiver0x13dc49f00 e0x7fff98023f40 at 20 0x00007fffa4569374 in qapplicationnotify this0x7ffff9f207a0 receiver0x13dc49f00 e0x7fff98023f40 at 21 0x00007fffa4faec80 in receiver0x13dc49f00 event0x7fff98023f40 at 22 0x00007fffa4faf00c in receiver event at 23 0x00007fffa4fb3ee4 in receiver0x0 eventtype0 data0x13dad8900 at 24 0x00007fffa4fb4244 in receiver0x0 eventtype at 25 0x00007fffa5037290 in s0x13dbb9ce0 at 26 0x00007fffa22e9794 in gmaindispatch at 27 0x00007fffa22ee930 in gmaincontextdispatch at 28 0x00007fffa22eeb58 in gmaincontextiterate blockblockentry1 self at 29 0x00007fffa22eec60 in mayblock at 30 0x00007fffa5036e7c in this0x13dbbcc70 flags at 31 0x00007fff9ef44e64 in this flags at 32 0x00007fffa4fabcc8 in this flags at 33 0x00007fffa4fac488 in qeventloopexec this0x7ffff9f204c8 flags at 34 0x00007fffa4fb9588 in qcoreapplicationexec at 35 0x00007fffa3d5704c in qguiapplicationexec at 36 0x00007fffa455d98c in qapplicationexec at 37 0x000000011e7b4354 in guimain argc argv at qtbitcoincpp661 38 0x000000011e7ac070 in main argc argv at qtmaincpp21"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc createmultisig adds incorrect warning for address type p2shsegwit\nthe createmultisig rpc adds a spurious warning message when creating for address type p2shsegwit createmultisig 2 p2shsegwit address redeemscript descriptor warnings unable to make chosen address type please ensure no uncompressed public keys are present i think this traces back to in the code the comparison at fails since outputtype is outputtypep2shsegwit and returns outputtypelegacy expected behavior no warning message for example createmultisig 2 p2shsegwit address redeemscript descriptor"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nguix build wo substitutes failing at libgit2 check\nthis is an upstream guix issue 55273 but they seem to be planning to resolve it with a version bump and either way we have versions pinned i think building unpack phaseildlog 356 178 17 ildlog 356 189 warning error may be used uninitialized in this function wmaybeuninitialized 148 if error 0 17 ildlog 356 72 18 building c object check phasenote keeping build directory builder for failed with exit code 1 build of failed refsrevparsef 1 failure refsrevparsedate function call succeeded error no error expected nonzero return"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoin core wallet hd key generation disabled\nthe bitcoin core wallet window has icons in the lower right corner one of those icons is the letters hd with the v220 version when passing the mouse cursor over this icon a message appeared which said hd key generation is enabled however after downloading the latest version of bitcoin core 230 the message that appears to me is the opposite hd key generation is disabled 1st screenshot the wallet had no funds and in that sense i have not lost anything but i am concerned that after upgrading bitcoin core to the latest version the hd key generation has changed im pretty new to this and dont understand much i have asked read and looked for some solution but no one has been able to tell me what happens whether it is normal or not what the solution isetc also note that when using the getwalletinfo command in the bitcoin core console appeared this 2nd screenshot and that i do not know if it refers to the same hd key generation or not also tried to upgrade the bitcoin core wallet with the upgradewallet comand 3rd screenshot i got the latest version of bitcoin core from and i got this url from the bitcoin core project profile on twitter my os is windows 10 pro and my cpu is a intelr coretm i54460 cpu 320ghz 320 ghz for me this is first time doing thisso sorry for what might be wrong and sorry for my english i do not speak it well enough captura de pantalla 20220505 113132 captura de pantalla 20220501 200018 upgrade wallet"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nautomatic prune on tails os\nrunning bitcoin core full node on tails os new version 230 automatically prunes when started i dont want to prune and have therefore set prune0 in bitcoinconf but that wont stop 230 from pruning have to manually untick the tick box at startup this was never the case in 220 so wondering if prune0 is disabled even though its stated in options image"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbug configure install\nafter the latest update can not be installed in the configure section with the following problem configure checking dependency style of g gcc3 checking whether g supports c17 features with stdc17 yes checking whether stdatomic can be used without link library yes checking whether stdfilesystem can be used without link library no checking whether stdfilesystem needs lstdcfs no checking whether stdfilesystem needs lcfs configure error in homebi tcoin configure error cannot figure out how to use stdfilesystem see configlog for more details"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallettaprootpy fails with insufficient funds 4\ntest testframework error jsonrpc error traceback most recent call last file line 133 in main selfruntest file line 448 in runtest psbt none 0psbt file line 49 in call returnval kwargs file line 144 in call raise status insufficient funds 4"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet ignore chainstateflushed notifications while attaching chain\nfixes 24487 when a rescan is performed during cwalletattachchain eg when loading an old wallet but this is interrupted by a shutdown signal the wallet will currently stop the rescan receive a chainstateflushed signal set the saved best block to the tip and shut down at next startup the rescan is not continued or repeated because of this but some blocks have never been scanned by the wallet which could lead to an incorrect balance fix this by ignoring chainstateflushed notifications until the chain is attached since is being manually called by attachchain anyway after finishing with the rescan it is not a problem if intermediate notifications are ignored manual rescans started aborted by the rescanblockchain abortrescan rpcs are not affected by this i didnt choose alternative ways of fixing this issue that would delay the validationinterface registration or change anything else about the handling of blockconnected signals for the reasons mentioned in this existing comment"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nonlynetonion plus onlynetipv4etc without onion in spite of torcontrol specified incorrectly kills startup\nin v22 using the options onlynetonion onlynetipv4 onlynetipv6 combined with the options torcontrol etc functioned and bitcoind correctly pulled the onion socks address via a probe to tor in v23 that combination of options no longer functions and onion is required expected using onlynetonion and ipv4 and ipv6 if torcontrol is specified should still work actual behavior bitcoind refuses to start up due to commitid e53a8505db preventing it from doing so in initcpp to reproduce run as per above system information sources built from tag v230 as of this writing i think error message in debuglog is error outbound connections restricted to tor onlynetonion but the proxy for reaching the tor network is not provided no proxy and no onion given or it is explicitly forbidden onion0 shutdown in progress scheduler thread exit shutdown done"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrpc calls to bitcoin rpc are truncated\nrpc calls to bitcoin rpc are truncated im having a problem making batching calls to bitcoin rpc it is returning a truncated json my suspicions is that there is some maxsize for the response of requests if that is true it should return a message error bitcoin core version 220 to reproduce the problem bash curl x post d jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 jsonrpc 20 method getblock params 0 h silent"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nunresponsive cli\nissue report 24810 reminds me that ive been seeing a similar issue since several months on master built with enabledebug in my development environment where the cli becomes unresponsive and eventually returns error timeout on transient error could not connect to the server 1270018332 error code 0 timeout reached make sure the bitcoind server is running and that you are connecting to the correct rpc port once the cli becomes unresponsive it seems to happen with any cli command this didnt occur for me with v21 and im not sure about v22 as iirc it began sometime last fall 2021 for me until now ive been discounting it as something related to my local environment and working around it by restarting since i restart very often for review and testing debian testing currently debian 516181 20220329 x8664 gnulinux im going to try to narrow down the issue more is anyone else running into this"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbuild do not modify commoninitvcxproj directly\nwhen building with msvc and using a nondefault toolset the following command python toolset v143 actually modifies the source tree diff git diff warning lf will be replaced by crlf in the file will have its original line endings in your working directory diff git index 0cbe2effd44b7efff3 100644 397 397 false false v142 v143 unicode no 497 497 true true v142 v143 unicode this pr fixes this bug"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nrace in generatetoaddress\ntest failure at seems to indicate generatetoaddress has a path that doesnt set the height in coinbase correctly rpc call node1 httpworker2 rpcrequestcpp179 parse threadrpcserver usercookie a new block immediately arrives over the network via the msghand thread node1 httpworker2 loggingtimerh57 log enter lock contention csmain rpcminingcpp156 started node1 msghand newpowvalidblock newpowvalidblock block node1 httpworker2 loggingtimerh57 log enter lock contention csmain rpcminingcpp156 completed 4225μs then msghand gets held up in the middle of activatebestchain short lock contention node1 msghand loggingtimerh57 log enter lock contention csmain validationcpp2889 started node1 httpworker2 nodeminercpp160 createnewblock createnewblock block weight 892 txs 0 fees 0 sigops 400 node1 httpworker2 validationcpp1988 connectblock sanity checks 001ms 000s 000msblk node1 httpworker2 validationcpp2087 connectblock fork checks 008ms 001s 008msblk node1 httpworker2 validationcpp2172 connectblock connect 1 transactions 004ms 0035mstx 0000mstxin 001s 005msblk node1 httpworker2 validationcpp2185 connectblock verify 0 txins 007ms 0000mstxin 001s 010msblk node1 httpworker2 nodeminercpp175 createnewblock createnewblock packages 015ms 0 packages 0 updated descendants validity 040ms total 055ms node1 httpworker2 loggingtimerh57 log enter lock contention csmain rpcminingcpp124 started node1 msghand loggingtimerh57 log enter lock contention csmain validationcpp2889 completed 446μs at this point msghand has the ball again and httpworker2 is waiting before calling incrementextranonce which is where the height in coinbase is set node1 msghand validationcpp2617 connecttip load block from disk 000ms 000s node1 msghand validationcpp1988 connectblock sanity checks 000ms 000s 000msblk node1 msghand validationcpp2087 connectblock fork checks 008ms 001s 008msblk node1 msghand validationcpp2172 connectblock connect 1 transactions 005ms 0049mstx 0000mstxin 001s 005msblk node1 msghand validationcpp2185 connectblock verify 0 txins 009ms 0000mstxin 001s 010msblk node1 msghand validationcpp2204 connectblock index writing 014ms 001s 008msblk node1 msghand blockchecked blockchecked block statevalid node1 msghand validationcpp2629 connecttip connect total 050ms 005s 037msblk node1 msghand validationcpp2634 connecttip flush 004ms 000s 003msblk node1 msghand validationcpp2640 connecttip writing chainstate 006ms 001s 004msblk node1 msghand policyfeescpp654 processblock blockpolicy estimates updated by 0 of 0 block txs since last block 0 of 0 tracked mempool map size 0 max target 51 from current node1 msghand validationcpp2433 updatetiplog updatetip new height305 version0x30000000 log2work9257388 tx310 date20220331t224307z progress1000000 cache00mib112txo node1 msghand validationcpp2651 connecttip connect postprocess 158ms 016s 114msblk node1 msghand validationcpp2652 connecttip connect block 218ms 022s 158msblk node1 msghand txmempoolcpp722 check checking mempool with 0 transactions and 0 inputs node1 msghand blockconnected enqueuing blockconnected block block height305 node1 msghand updatedblocktip enqueuing updatedblocktip new block fork block in ibdfalse now the tip has been updated looks like msghand releases the lock but manages to reacquire it before any other thread node1 msghand loggingtimerh57 log enter lock contention newtaskmutex schedulercpp78 started node1 msghand loggingtimerh57 log enter lock contention newtaskmutex schedulercpp78 completed 3μs the scheduler thread seems to get the lock next node1 scheduler operator blockconnected block block height305 node1 scheduler loggingtimerh57 log enter lock contention csmain netprocessingcpp1596 started node1 scheduler loggingtimerh57 log enter lock contention csmain netprocessingcpp1596 completed 2398μs and finally httpworker2 gets it incrementing the extra nonce and presumably updating to the new block node1 httpworker2 loggingtimerh57 log enter lock contention csmain rpcminingcpp124 completed 5139μs other threads do their thing node1 msghand loggingtimerh57 log enter lock contention csmain validationcpp5081 started node1 msghand loggingtimerh57 log enter lock contention csmain validationcpp5081 completed 32μs node1 scheduler operator updatedblocktip new block fork block in ibdfalse then httpworker2 is calling processnewblock and everything falls apart node1 httpworker2 loggingtimerh57 log enter lock contention csmain validationcpp3687 started node1 httpworker2 loggingtimerh57 log enter lock contention csmain validationcpp3687 completed 58μs node1 msghand loggingtimerh57 log enter lock contention csmain validationcpp5081 started test testframework error jsonrpc error traceback most recent call last file line 132 in main selfruntest file line 258 in runtest coinbasematurity 1 address2 syncfunselfnoop file line 649 in generatetoaddress blocks invalidcallfalse kwargs file line 311 in generatetoaddress return kwargs file line 49 in call returnval kwargs file line 144 in call raise status processnewblock block not accepted 32603 node1 httpworker2 utilsystemh51 error error acceptblock badcbheight block height mismatch in coinbase node1 httpworker2 blockchecked blockchecked block statebadcbheight block height mismatch in coinbase node1 httpworker2 utilsystemh51 error error processnewblock acceptblock failed badcbheight block height mismatch in coinbase node1 msghand loggingtimerh57 log enter lock contention csmain validationcpp5081 completed 1364μs"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nwallet postpone wallet loading notification for encrypted wallets\nfixes bitcoincoregui571 cwalletcreate notifies about wallet loading too early that results the notification goes before were created and added to an encrypted wallet and in erroneously returns false for just created encrypted descriptor wallets"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbench mempoolcheck actually runs with checkratio 0\nfor mempoolcheck it seems that the intention was to have a mempool with checkratio 1 see checkmempool1 however in the subsequent line in the above snippet a ctxmempool gets constructed with no arguments which means that checkratio will default to 0 manually specifying checkratio to 1 according to the original intention and running the mempoolcheck benchmark results in an assertion error diff git index afa4618e1b32cdb70539 100644 1057 1057 static void bench const int childtxs benchcomplexityn 1 2000 const stdvector orderedcoins childtxs minancestors 5 const auto testingsetup checkmempool1 ctxmempool pool ctxmempool poolnullptr 1 lock2csmain poolcs const ccoinsviewcache coinstip for auto tx orderedcoins addtxtx pool sh srcbenchbenchbitcoin filtermempoolcheck benchbitcoin txmempoolcpp759 void ctxmempoolcheckconst ccoinsviewcache int64t const assertion failed aside from this problem we should also probably just reuse the ctxmempool in testingsetup ping glozow"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nguix linker warning for darwin builds\ncxxld ld warning double slash removed from installname"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nfeatureinit intermittent issue unicodedecodeerror utf8 codec cant decode bytes in position 12151217 unexpected end of data\npresumably because a unicode character was only written partially test testframework error unexpected exception caught during testing traceback most recent call last file line 132 in main selfruntest file line 79 in runtest blockfilterindex1 coinstatsindex1 file line 120 in exit nextselfgen file line 442 in waitfordebuglog log dlread file line 322 in decode result consumed selfbufferdecodedata selferrors final unicodedecodeerror utf8 codec cant decode bytes in position 12151217 unexpected end of data"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nuse designated initializers\ndesignated initializers are supported since gcc 47 our minimum required is 8 and clang 3 our minimum required is 7 they work out of the box with c17 and only msvc requires the c20 flag to be set i dont expect any of our msvc users will run into issues due to this see also"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoind repeatedly crashing at updatetip with no error message\nexpected behavior bitcoind either doesnt crash or provides some error information in debuglog about the crash actual behavior about 10 seconds after starting bitcoind it reliably crashes right after 20220305t234740z updatetip new 5f height425259 version0x20000000 log2work85132165 tx149305533 date20160815t014346z progre ss0211905 cache01mib867txo 20220305t234740z updatetip new ec height425260 version0x20000000 log2work85132195 tx149307741 date20160815t020356z progre ss0211908 cache12mib9061txo im currently stuck on block 425258 but thats after trying to run reindex when this was happening more up towards the high 600000s so im not sure if its anything particular with this block or not to reproduce this happens every time consistently for me system information bitcoind version bitcoin core version v220 originally tried with building my own then tried again with the prebuild binary from bitcoincoreorg to make sure i didnt do something wrong same issue lsbrelease a no lsb modules are available distributor id ubuntu description ubuntu 20043 lts release 2004 codename focal lscpu architecture x8664 cpu opmodes 32bit 64bit cpus 4 vendor id genuineintel cpu family 6 model 158 model name intelr coretm i37100 cpu 390ghz lsmem lsmem range size state removable block 23g online no 017 138g online no 32141 memory block size 128m total online memory 16g total offline memory 0b sudo smartctl all devsda start of information section model family western digital red lu wwn device id 5 0014ee 26488ca44 firmware version 8200a82 user capacity 3000592982016 bytes 300 tb sector sizes 512 bytes logical 4096 bytes physical rotation rate 5400 rpm ata version is acs2 minor revision not indicated sata version is sata 30 60 gbs current 60 gbs smart support is available device has smart capability smart support is enabled start of read smart data section smart overallhealth selfassessment test result passed i put my debuglogs over in this gist one default logging and one with debug1"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nhomebrew boost 178 breaks external signer configure\ntest on macos 1221 against the master branch 24397 doesnt fix it brew info boost boost stable 1780 bottled head configure enableexternalsigner checking for boostlib 1640 106400 yes checking whether boostprocess can be used no configure error external signing is not supported for this boost version it does work with boost 176 there was no 177 release in homebrew brew install boost176 configure enableexternalsigner checking for boostlib 1640 106400 yes checking whether boostprocess can be used yes options used to compile and link external signer yes theres nothing in the release notes about boostprocess for either 177 or 178 the homebrew formula changes are nothing but a trivial version and hash bump"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngui successfully registered dogecoin core didnt yet exit safely and error accepttomemorypool nonfinal\nthis is a dogecoincore qt not sync to reproduce file log debug system information debuglog"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsegmentation fault bhttpworker0\nafter calling importaddress trough http rpc i get segmentation fault at the end of synctracked by progress expected behavior should complete importaddress should complete importaddress actual behavior segmentation fault to reproduce just try to call importaddress trought wallet rpc in bitcoin testnet 1010 times system information ubuntu 0211 digital ocean ubuntu instance gdb heres log right before crash 20220219t101115z sending verack 0 bytes peer2291 20220219t101115z receive version message satoshi0171 version 70013 blocks0 us68183751418333 peer2291 20220219t101115z socket closed for peer2290 20220219t101115z disconnecting peer2290 20220219t101115z received verack 0 bytes peer2290 20220219t101115z sending sendheaders 0 bytes peer2290 thread 11 bhttpworker0 received signal sigsegv segmentation fault switching to thread 0x7fffcffff700 lwp 1008189"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ntestonly ub in fuzz tests\nthis line c connmantestmsg connman in is constructing a reference to a connmantestmsg which actually refers to an object of type connman even though connmantestmsg inherits from connman and adds no fields i am pretty sure this is undefined behavior it isnt detected by the sanitizer because theyre not polymorphic types for which runtime type information is tracked but if you make connmanconnman virtual it does get detected testfuzzutilcpp26523 runtime error member call on address 0x619000034380 which does not point to an object of type connmantestmsg 0x619000034380 note object is of type cconnman 00 00 00 00 90 8e a0 29 19 56 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 vptr for cconnman i dont know how to quickly solve this myself as im unfamiliar with this part of the code so im opening an issue to discuss it"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbuild compilation error in tinyformath on manjaro linux\nheres the output from make walletwalleth8029 required from ‘void params const with params stdoptional stdstring stdcxx11basicstring’ required from here tinyformath2919 error no match for ‘operator’ and ‘const stdoptional’ 291 tmp value tinyformath2919 note candidate ‘operatorint int’ builtin walletwalleth8029 required from ‘void params const with params stdoptional stdstring stdcxx11basicstring’ required from here error no type named ‘type’ in ‘struct stdenableif’ in file included from from from fsh11 from walletwalleth10 from walletwalletcpp6 tinyformath in instantiation of ‘void const t int with t stdoptional stdostream stdbasicostream’ tinyformath35532 required from ‘void const char const char int const t with t stdoptional stdostream stdbasicostream’ tinyformath54324 required from ‘static void const char const char int const void with t stdoptional stdostream stdbasicostream’ tinyformath51913 required from t with t stdoptional’ tinyformath97532 required from args with args stdcxx11basicstring stdallocator stdoptional int n 2’ tinyformath102820 required from args with args stdcxx11basicstring stdallocator stdoptional’ tinyformath106437 required from ‘void const char const args with args stdcxx11basicstring stdallocator stdoptional stdostream stdbasicostream’ tinyformath107311 required from ‘stdstring char const args with args stdcxx11basicstring stdallocator stdoptional stdstring stdcxx11basicstring’ same with clang note candidate function not viable no known conversion from const stdoptional to aka basicstreambuf for 1st argument sb in file included from walletwalletcpp6 in file included from walletwalleth10 in file included from fsh8 tinyformath2919 error invalid operands to binary expression stdostringstream aka basicostringstream and const stdoptional tmp value"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsegmentation fault in v21 and v22 releases\nos ubuntu 2004 releases bitcoin core v21 and v22 the problem i have a lot of hd wallets with the first transaction in dic 2017 encrypted not checked for 5 years it starts reescaning and segmentation fault error tried with bitcoinqt bitcoind reindex the whole blockchain and still segmentation fault after loading the gui load the wallet again it closes with segmentation fault v21 and v22 downloaded and checked for signatures and hashes the same wallets if checked after mid20182019 a year or more work the machine is a dell inspiron with 16gb of ram dbcache8000 tried a lot of other things rescan etc that didnt work all other wallets work fine no problems but these ones fail with newer versions of bitcoin core run bitcoinwallet info the wallets are ok not corrupted or anything if i do the reindex while the wallet is loaded it crashes the moment the reindex gets to dic 2017jan 2018 then i reestart without the wallet loaded and it finishes reindexing ok in the log says it loads the wallet ok 5s starts reescaning and then nothing else it crashes it crashes 4 or 5 seconds after reescaning really fast both bitcoinqt and bitcoind"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\ngestdescriptorinfo ignores hardened paths in origin info for computing the checksum therefore returns invalid checksums\nlets say i have two xpubs derived at m1230 from a master xpub id like to create a descriptor describing a multisig between those 2 keys i create a descriptor wallet bcreg1 named createwallet walletnamerepro descriptorstrue name repro warning since i wont compute the checksum by hand i use the hack of getting it from getdescriptorinfo bcreg1 getdescriptorinfo descriptor checksum hs0kuwwv isrange true issolvable true hasprivatekeys false now i use the output of getdescriptorinfo to import the descriptor and bcreg1 rpcwalletrepro importdescriptors success false error code 5 message provided checksum hs0kuwwv does not match computed checksum rgsu3znf hmm turns out the checksum getdescriptorinfo gave me is invalid both in the descriptor and checksum fields i remember some discussions around canonicalization and the h vs notation for hardened paths so i try by using h instead bcreg1 getdescriptorinfo descriptor checksum 6nuh6ujc isrange true issolvable true hasprivatekeys false it outputs the same invalid descriptor in the descriptor field fortunately the checksum in checksum is actually valid so i can use that in importdescriptors maybe worth mentioning before trying on latest master i had an additional issue with 220 where getdescriptorinfo would literally remove the hardened paths from the origin info bc getdescriptorinfo descriptor checksum kvvtf4uz isrange true issolvable true hasprivatekeys false so maybe the bad checksum above was the checksum without the hardened paths bcreg1 getdescriptorinfo descriptor checksum rgsu3znf isrange true issolvable true hasprivatekeys false bingo"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nsegfault when compiled with depends debug1 and libc\nsee also and steps to reproduce on a fresh install of ubuntu focal export apt update apt install curl wget htop git vim ccache y git clone bitcoincore cd bitcoincore apt install buildessential libtool autotoolsdev automake pkgconfig bsdmainutils python3zmq make automake cmake curl clang llvm libcdev libcabidev gmultilib libtool binutilsgold bsdmainutils pkgconfig python3 patch bison y cd depends make debug1 noqt1 nowallet1 nozmq1 noupnp1 nonatpmp1 j nproc autogensh configure ccclang cxxclang stdliblibc enablefuzz withsanitizersfuzzer make j nproc fuzztxpool srctestfuzzfuzz 52419error segv on unknown address 0x000000000008 pc 0x7f5d814ccb47 bp 0x7fff699e4ef0 sp 0x7fff699e4ea0 t52419 52419the signal is caused by a read memory access 52419hint address points to the zero page 0 0x7f5d814ccb47 in std1libcppdbswapvoid void 1 0x564aea7e1377 in std1basicstring std1allocator std1allocator 2 0x564aea80cf94 in 3 0x564aea80bd04 in 4 0x564aeb1f46ad in fsabsolutefspath const 5 0x564aeb1f4c8b in const 6 0x564aea80bbfa in const 7 0x564aeb1fa2bb in const bool 8 0x564aeb0d5074 in const 9 0x564aeaaddd15 in const 10 0x564aeaa06412 in std1allocator const std1vector const 11 0x564aeaa073e2 in std1allocator const std1vector const 12 0x564aeaa0877f in std1allocator const std1vector const 13 0x564aea85508d in std1makeunique std1allocator const std1vector conststd1basicstring std1allocator const std1vector const 14 0x564aea852a22 in std1uniqueptr std1allocator const std1vector const 15 0x564aea9c5817 in anonymous 16 0x564aea7c8d20 in std1invokevoid 17 0x564aea7c8c6d in void 18 0x564aea7c8c0d in void operator 19 0x564aea7c7049 in std1functionfunc void operator 20 0x564aeaab965c in const 21 0x564aeaab95e5 in std1functionoperator const 22 0x564aeb25ac9d in initialize 23 0x564aeb25b71f in llvmfuzzerinitialize 24 0x564aea743437 in char int unsigned char const unsigned long 25 0x564aea76df22 in main 26 0x7f5d810e60b2 in libcstartmain 27 0x564aea719e7d in start can not provide additional info summary segv in std1libcppdbswapvoid void 52419aborting"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nbitcoind and bitcoincli does not supports symbolic link anymore\ni just pulled latest master at and i cannot run bitcoind or bitcoincli without providing a full path for data directory using datadir option it was working fine couple of days ago while running i suspect it may be related to latest switch to the standard stdfilesystem library expected behavior i use a symbolic link to point my homemebitcoin to an external hard drive when running bitcoind from command line or executing bitcoincli commands without using the datadir option it should not terminate or crash unexpectedly those commands should be able to follow the symbolic link and be able to readwrite into the final folder actual behavior bitcoind and bitcoincli are not able to follow the symbolic link bitcoinqt runs fine even when running it from command line see below commands examples create a symbolic link btcthingsbitcoin ln s mediadatabitcoin homemebitcoin try to run bitcoind crashes btcthingsbitcoin bitcoind exception filesystem error cannot create directories not a directory homemebitcoin bitcoin in appinit bitcoind chainparamsbasecpp35 const cbasechainparams baseparams assertion failed aborted core dumped run bitcoinqt it works fine the node runs btcthingsbitcoin bitcoinqt qt5ct using qt5ct plugin try to run a bitcoincli command to interact with the running node does not work btcthingsbitcoin bitcoincli getblockhash 501726 exception filesystem error cannot create directories not a directory homemebitcoin bitcoin in appinitrpc try the same previous command but give an absolute path for datadir works fine btcthingsbitcoin bitcoincli getblockhash 501726 to reproduce steps are indicated previously system information running bitcoin core version v229903ace3a17c9bc self compiled from master branch im using linux mint with the following kernel linux 54096generic x8664 im using an additional hard drive to store the full blockchain ssd i had no prior issues before pulling latest changes i was previously running at"}, {"role": "assistant", "content": "bug"}]}
{"messages": [{"role": "system", "content": "GitHub Issue Report Classifier"}, {"role": "user", "content": "Classify, IN ONLY 1 WORD, the following GitHub issue as 'feature', 'bug', or 'question' based on its title and body:\nreindexchainstate with prune hangs\nsteps to reproduce create a datadir that is pruned start with prune550 reindexchainstate hangs with idle cpu reindex works"}, {"role": "assistant", "content": "bug"}]}
